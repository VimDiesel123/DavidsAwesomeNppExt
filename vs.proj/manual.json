[
    {
        "Command": "01/25/17",
        "Usage": [],
        "Operands": {},
        "Description": "",
        "Arguments": [],
        "Remarks": "",
        "Examples": ""
    },
    {
        "Command": "8",
        "Usage": [],
        "Operands": {},
        "Description": "",
        "Arguments": [],
        "Remarks": "",
        "Examples": ""
    },
    {
        "Command": "56",
        "Usage": [],
        "Operands": {},
        "Description": "",
        "Arguments": [],
        "Remarks": "",
        "Examples": ""
    },
    {
        "Command": "115",
        "Usage": [],
        "Operands": {},
        "Description": "",
        "Arguments": [],
        "Remarks": "",
        "Examples": ""
    },
    {
        "Command": "170",
        "Usage": [],
        "Operands": {},
        "Description": "",
        "Arguments": [],
        "Remarks": "",
        "Examples": ""
    },
    {
        "Command": "234",
        "Usage": [],
        "Operands": {},
        "Description": "",
        "Arguments": [],
        "Remarks": "",
        "Examples": ""
    },
    {
        "Command": "292",
        "Usage": [],
        "Operands": {},
        "Description": "",
        "Arguments": [],
        "Remarks": "",
        "Examples": ""
    },
    {
        "Command": "'",
        "Usage": [],
        "Operands": {},
        "Description": "The ' allows for a user to insert in a comment on a blank line or after a command following a semicolon \";\". See examples for valid uses of '.",
        "Arguments": {
            "str": {},
            "String": {},
            "Comments added into\rprogram": {},
            "Comment strings are restricted to the maximum row size for a program. This will vary per\rcontroller.": {}
        },
        "Remarks": "\nComments will be downloaded to controller, thus taking up program space and execution time.\nSee \nREM\n for comments that will not download to controller.",
        "Examples": "\n'Galil DMC Code Example\nREM This comment is not downloaded to controller and does not take up program\nREM   space or execution time\n'This comment is downloaded to controller and takes up program space\nSH\n \nAB\nAB\n;\n'Comments following a command MUST be proceeded by a semi-colon.\nKP\n \n10'This is NOT valid use of the '\n' applies to DMC500x0,DMC52xx0,DMC40x0,DMC42x0,DMC41x3,DMC30010,DMC21x3,DMC18x6,DMC18x2,RIO47xxx\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "-",
        "Usage": [
            {
                "Example": "variable = (value1 - value2)",
                "Explanation": "Performs an operation between two values or evaluated statements"
            }
        ],
        "Operands": {},
        "Description": "The subtraction operator takes any two values and returns a value equal to the difference of the arguments.",
        "Arguments": {
            "Argument": {
                "0": "n0",
                "1": "n1"
            },
            "Min": {
                "0": "-2,147,483,648",
                "1": "-2,147,483,648"
            },
            "Max": {
                "0": "2,147,483,647",
                "1": "2,147,483,647"
            },
            "Default": {
                "0": "N/A",
                "1": "N/A"
            },
            "Resolution": {
                "0": "1/65,536",
                "1": "1/65,536"
            },
            "Description": {
                "0": "Value to subtract from",
                "1": "Value to subtract"
            }
        },
        "Remarks": "\nAn operator is not a command and is not valid individually.\nEvaluation occurs left to right. Use parenthesis for operator precedence.\nn\n0\n and n\n1\n may also be variables, array elements, operands, or \n@\n functions (e.g. \n@SIN[]\n).",
        "Examples": "\n'Galil DMC Code Example\n'Terminal Example\n:\napple\n \n=\n=\n \n10\n-\n4\n:\nbanana\n \n=\n=\n \napple\n \n-\n \n3\n:\nMG\n \nbanana\n \n-\n \n1\n \n2.0000\n:\n'Galil DMC Code Example\nREM It is recommended that parenthesis be used when more than one mathmatical \nREM   operation is combined in one command.\ncherry\n \n=\n=\n \n(\n(\n(\n(\n10\n*\n30\n)\n)\n-\n(\n(\n60\n/\n30\n)\n)\n)\n)\n;\n' evaluates as 298\ndate\n \n=\n=\n \n10\n*\n30\n-\n60\n/\n30\n;\n' evalutes as 8\nEN\n- applies to DMC500x0,DMC52xx0,DMC40x0,DMC42x0,DMC41x3,DMC30010,DMC21x3,DMC18x6,DMC18x2,RIO47xxx\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "#",
        "Usage": [],
        "Operands": {},
        "Description": "The # denotes the name of a program label, for example, \n#move\n. \nLabels are often used to implement subroutines or loops. \nLabels are either user-defined\nor are reserved names, called \"automatic subroutines\", that automatically execute when a particular event occurs.",
        "Arguments": {
            "Argument": {
                "0": "str"
            },
            "Min": {
                "0": "1 char"
            },
            "Max": {
                "0": "7 chars"
            },
            "Default": {
                "0": "N/A"
            },
            "Resolution": {
                "0": "String"
            },
            "Description": {
                "0": "Name of label"
            }
        },
        "Remarks": "\nLabels can include the characters A-Z, a-z, 1-9. \nNumbers can not be the first character. \nAll other characters are invalid.\nA label can only be defined at the beginning of a new line.\nThe number of labels available can be queried with \nMG _DL\n.\nLL\n returns the current label table in the controller.\nGalil recommends that at least the first character be lowercase for user labels to differentiate from automatic subroutines.\nAutomatic subroutines are listed in the command reference starting with a \n#\n character.\nThere is a maximum of 510 labels available.",
        "Examples": "\n'Galil DMC Code Example\nREM A sample FOR loop\nREM Routine will run 10 times and sum all integers 1 through 10\nsum\n= \n= \n0\n;\n' Variable to hold sum of integers\ni\n= \n= \n1\n;\n' Create a counter\n#for\nsum\n= \n= \nsum\n+\ni\n;\n' Add counter to sum\ni\n= \n= \ni\n+\n1\n;\n' Increment counter\nJP \n#for\n,\n(\n(\ni\n<=\n10\n)\n)\nEN\n'Galil DMC Code Example\nREM A sample Do-While loop\nREM Routine will run while A axis main encoder position is under 100 counts\n#while\nWT \n10\n;\n' Wait 10 mseconds\nJP \n#while\n,\n(\n(\n_TP\nA\nA\n<\n100\n)\n)\n;\n' Loop back if position is under 100 counts\nMG \n\"Position is equal or greater than 100\"\nEN\n# applies to DMC500x0,DMC52xx0,DMC40x0,DMC42x0,DMC41x3,DMC30010,DMC21x3,DMC18x6,DMC18x2,RIO47xxx\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "#AMPERR",
        "Usage": [],
        "Operands": {},
        "Description": "Automatic subroutine used to run code when a fault occurs on a Galil amplifier. See the TA command and individual amplifier information in the controller\nuser manual.",
        "Arguments": [],
        "Remarks": "\nUse RE to return from the AMPERR subroutine\nSee the TA command for more information\nThread 0 does not need to be running for #AMPERR to be executed. This was a requirement on earlier products.\nWhen an external servo driver is used on an axes where the AMP-430x0 is also installed, the axis should be setup as a brushed motor (BRm=1),\notherwise the lack of hall inputs will cause an amplifier error",
        "Examples": "\n'Galil DMC Code Example\n'this code will run in the event of an amplifer error, \n'setting a digital output and notifying the operator.\n#AMPERR\n#AMPERR\n \n'Set a digital bit to signal an amplifier error to peripheral hardware\n \nSB \n4\n \n'Send a message to the user                     \n \nMG \n\"An amplifier error has occured\"\n'Return from the AMPERR subroutine, restoring trippoints that were running\nRE \n1\n'Galil DMC Code Example\nREM Detailed #AMPERR example.  Uses LCD to display amplifier error information\nREM  and remains in #AMPERR routine until the error is cleared.\n#AMPERR\n#AMPERR\nREM mask out axes that are in brushed mode for _TA1\nmask\n= \n= \n(\n(\n(\n(\n_BR\nH\nH\n*\n128\n)\n)\n+\n(\n(\n_BR\nG\nG\n*\n64\n)\n)\n+\n(\n(\n_BR\nF\nF\n*\n32\n)\n)\n+\n(\n(\n_BR\nE\nE\n*\n16\n)\n)\n+\n(\n(\n_BR\nD\nD\n*\n8\n)\n)\n+\n(\n(\n_BR\nC\nC\n*\n4\n)\n)\n+\n(\n(\n_BR\nB\nB\n*\n2\n)\n)\n+\n_BR\nA\nA\n)\n)\nmask\n= \n= \n@COM\n[\n[\nmask\n]\n]\nmask\n= \n= \n(\n(\n(\n(\n_TA1\n&\nmask\n)\n)\n&\n$0000FFFF\n)\n)\nLU \n0\n;\n'turn off auto update of LCD\nREM amplifier error status on LCD\nMG \n\"A-ER TA0\"\n{L1}\n,\n_TA0\n{L2}\n;\nWT \n2000\nMG \n\"A-ER TA1\"\n{L1}\n,\nmask\n{L2}\n;\nWT \n2000\nMG \n\"A-ER TA2\"\n{L1}\n,\n_TA2\n{L2}\n;\nWT \n2000\nMG \n\"A-ER TA3\"\n{L1}\n,\n_TA3\n{L2}\n;\nWT \n2000\nLU \n1\n;\n'turn on Automatic Axis Update of LCD\nWT \n5000\nREM the sum of the amperr bits should be 0 with no amplifier error\ner\n= \n= \n_TA0\n+\nmask\n+\n_TA2\n+\n_TA3\nJP \n#AMPERR\n#AMPERR\n,\ner0\nREM Notify user amperr has cleared\nLU \n0\nMG \n\"AMPERR\"\n{L1}\n,\n\"RESOLVED\"\n{L2}\nWT \n3000\nLU \n1\nRE\n#AMPERR applies to DMC500x0,DMC40x0,DMC41x3,DMC30010,DMC21x3\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "#AUTO",
        "Usage": [],
        "Operands": {},
        "Description": "Defines the automatic entry point of embedded DMC code. When power is applied to the controller, or after the controller is reset, the program will\nautomatically begin executing at this label. When no host software is used with the controller, #AUTO is required to run an application program on the\ncontroller stand-alone.",
        "Arguments": [],
        "Remarks": "\nUse EN to end the routine\nThread 0 is used to execute #AUTO on startup\nThe BP command must be used to burn a program into EEPROM for the #AUTO to function.",
        "Examples": "\n'Galil DMC Code Example\n'On startup, this code will create a 50% duty cycle square wave on output 1 with a period of 1 second.\n#AUTO\n#AUTO\n;\n'     Start on powerup\n \nSB\n \n1\n;\n'     Set bit 1\n \nWT\n \n500\n;\n'   Wait 500msec\n \nCB\n \n1\n;\n'     Clear bit 1\n \nWT\n \n500\n;\n'   Wait 500msec\nJP\n \n#AUTO\n#AUTO\n;\n'  Jump back to #AUTO \n#AUTO applies to DMC500x0,DMC52xx0,DMC40x0,DMC42x0,DMC41x3,DMC30010,DMC21x3,DMC18x6,DMC18x2,RIO47xxx\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "#AUTOERR",
        "Usage": [],
        "Operands": {},
        "Description": "Automatic subroutine that runs code upon power up if the firmware detects errors. If the EEPROM is corrupted, #AUTOERR will run. The EEPROM is\nconsidered corrupt if the checksum calculated on the bytes in the EEPROM do not match the checksum written to the EEPROM.\nFor SSI and BiSS operation, #AUTOERR will also run if the time to acquire serial position data exceeds 90% of the hardware sample loop. This type of error\nis very rare and should never occur in normal operation.",
        "Arguments": [],
        "Remarks": "\nUse EN to end the routine\nThe type of checksum error can be queried with MG_RS\nFor SSI and BiSS operation\nIn the event of a serial position acquisition timeout, the following will occur:\nThe controller will reset\nThe controller servo loop will not run, TM will be set to zero\nTC1 will return \"143 TM timed out\"\nThe automatic subroutine #AUTOERR will run, if present\nThe Error output will be set\nWhen using serial encoders (SSI or BiSS), the #AUTOERR should follow these guidlines\nIF _TC=143 do not employ any trippoints in following code because the timer interrupt is suspended\nSerial encoders can be disabled with the commands SIn=0 or SSn=0 where n is the axis indicator ABCDEFG or H\nIn order to re-enable the timer interrupt issue \"TM n\" where n is the servo update period in us (usually n=1000). See TM for more details",
        "Examples": "\n'Galil DMC Code Example\n'Code detects a checksum error and notifies the user\n#AUTOERR\n#AUTOERR\n \nMG \n\"EEPROM ERROR \"\n,\n_RS\nEN\n'Galil DMC Code Example\n'Use for BiSS and SSI only (-SER firmware)\n'Distinguishing between a serial timeout\n' condition and an EEProm condition\n#AUTOERR\n#AUTOERR\nIF\n \n_TC\n=\n143\nREM BiSS or SSI timeout\nREM No trippoints in this clause\nREM Print message to DMC-4020 LCD\n \nLU \n0\n \nMG \n\"BiSS\"\n{L1}\n \nMG \n\"Timeout\"\n{L2}\n \nSS\nA\nA\n= \n= \n0\n \nSS\nB\nB\n= \n= \n0\nELSE\nREM Checksum error\nREM trippoints ok here\nREM Print message to DMC-4020 LCD\n \nLU \n0\n \nMG \n\"EEProm:\"\n{L1}\n \nMG \n{Z10.0}\n_RS\n{L2}\nENDIF\nEN\n#AUTOERR applies to DMC500x0,DMC52xx0,DMC40x0,DMC42x0,DMC41x3,DMC30010,DMC21x3,DMC18x6,DMC18x2,RIO47xxx\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "#CMDERR",
        "Usage": [],
        "Operands": {},
        "Description": "Automatic subroutine that runs code when a DMC code error occurs. Without #CMDERR defined, if an error (see TC command) occurs in an application\nprogram running on the Galil controller, the program (and all threads) will stop.",
        "Arguments": [],
        "Remarks": "\nUse EN to end the routine\n#CMDERR will only run from errors generated within embedded DMC code, not from the terminal or host\nIn a single threaded application (Thread 0 only), the EN command in the #CMDERR routine will restart thread 0 where it left off.\nIn a multi-threaded application, the thread that has an error will be halted when a command error occurs. Thread 0 will be interrupted to run the\n#CMDERR routine but other threads will continue to run.\nIn order to restart the thread that encountered the error, see the example in Chapter 7 of the User Manual and the _ED operand.\nThread 0 does not need to be running in order for the #CMDERR routine to execute.",
        "Examples": "\n'Galil DMC Code Example\n'This code will put the motion controller in Position Tracking mode.\n'Variable \"target\" is updated from the terminal or from a host program\n'to specify a new target.  #CMDERR is used to detect a bad target value.\n#start\nDP\nA\nA\n= \n= \n0\n;\n'      Define current position as zero\nPT\nA\nA\n= \n= \n1\n;\n'      Turn on position tracking\ntarget\n= \n= \n0\n;\n'   Initialize target variable\n#track\n;\n'     Start tracking\nPA\nA\nA\n= \n= \ntarget\n;\n' Track to current value of target\nWT \n500\n;\n'      Wait 500 ms\nJP \n#track\n;\n'   Continue to track\n'\n'\n#CMDERR\n#CMDERR\n;\n' runs if an error occurs\nJP \n#done\n,\n_TC\n<>\n6\n \n;\n'check that an out of range occured (See TC)\nMG \n\"Value \"\n,\ntarget\n,\n\" is out of range for Position Tracking\"\ntarget\n= \n= \n_PA\nA\nA\n \n;\n' reset target\n#done\nEN \n1\n \n;\n'return to tracking logic \n#CMDERR applies to DMC500x0,DMC52xx0,DMC40x0,DMC42x0,DMC41x3,DMC30010,DMC21x3,DMC18x6,DMC18x2,RIO47xxx\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "#COMINT",
        "Usage": [],
        "Operands": {},
        "Description": "Automatic subroutine to provide interrupt driven communications from the serial port. #COMINT can be configured by the CI command to run either\nwhen any character is received, or when a carriage return is received over the com port. The auxiliary port is used if equipped.",
        "Arguments": [],
        "Remarks": "\nUse EN to end the routine\n#COMINT runs in thread 0, and an application must be running in thread 0 in order for #COMINT to be enabled.\nCode running in thread zero will be interrupted by the #COMINT subroutine.\nIt is important to handle the interrupt condition and return without delay. The controller will continue to receive data and update the data operands\n(P1CH,P2CH, etc) while in #COMINT. This can lead to missed characters, numbers, and strings if #COMINT is unnecessarily delayed.",
        "Examples": "\n'Galil DMC Code Example\n#a\n;\n                           \n'Program Label\n \nCC \n9600\n,\n0\n,\n1\n,\n0\n \nCI \n2\n;\n                         \n'interrupt on any character\n#loop\n \nMG\n \n\"Loop\"\n;\n                   \n'print a message every second\n \nWT\n \n1000\n \nJP \n#loop\n#COMINT\n#COMINT\n \nMG\n \n\"COMINT:\"\n,\n \nP2CH\n{S1}\n;\n      \n'print a message and the received character\nEN \n1\n,\n1\n;\n                        \n' End this subroutine, re-arming trip points that \n'                             were running and re-enabling the CI mask \n#COMINT applies to DMC500x0,DMC40x0,DMC42x0,DMC41x3,DMC30010,DMC21x3,RIO47xxx\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "#ININT",
        "Usage": [],
        "Operands": {},
        "Description": "Automatic subroutine that runs upon a state transition of digital inputs. #ININT is configured with II. #ININT runs in thread 0.",
        "Arguments": [],
        "Remarks": "\nUse the II command to enable the routine.\nUse RI to exit the routine.\nTo make an unconditional jump from #ININT, there are two methods for re-enabling the interrupt capability\nIssue a ZS and then re-issue the command II before the JP\nor, \nuse a \"null\" routine. The \"null\" routine allows for the execution of the RI command before the unconditional jump. For more information see\nApplication Note #2418, \nhttp://www.galil.com/learn/application-notes",
        "Examples": "\n'Galil DMC Code Example\nII \n1\n;\n                \n'arm digital input 1\nEN\n;\n                 \n'End thread zero\n'\n#ININT\n#ININT\n;\n             \n'Automatic sub.  Runs on input event\n \nMG \n\"Inputs:\"\n,\n_TI0\n;\n  \n'Display status of inputs 1-8\n \nWT \n100\n;\n             \n'Debounce input\nRI\n;\n                 \n'Return from interrupt \n#ININT applies to DMC40x0,DMC42x0,DMC41x3,DMC21x3,DMC18x6,DMC18x2,DMC30010,DMC500x0,DMC52xx0\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "#LIMSWI",
        "Usage": [],
        "Operands": {},
        "Description": "Automatic sub for running user-defined code on a limit switch event. A limit switch event requires the following conditions.\n1\n. \nMotion profiling in the direction of the given limit. I.E. RPm increasing for forward switch, RPm decreasing for reverse switch.\n2\n. \nLimit switch toggles active. See CN for inverting the active sense of the limit swithes.\nWithout #LIMSWI defined, the controller will issue ST on the axis when its limit switch is tripped during motion in the direction of the switch. With #LIMSWI\ndefined, code is executed in addition to the stop.\nIn lieu of a controlled stop, the motor can turn off and coast stop in the event of a limit switch event. See OE for this feature.",
        "Arguments": [],
        "Remarks": "\nUse RE to terminate the subroutine\nSee _LF and _LR for switch state operands\n#LIMSWI runs on thread 0. Code does not need to be running in thread 0 for #LIMSWI to be enabled.\nLD can be used to disable the limit operation\nSD can be used to set the deceleration speed on the limit.",
        "Examples": "\n'Galil DMC Code Example\n#main\n        \n;\n'print a message every second\n  \nMG\n \n\"Main\"\n  \nWT \n1000\nJP \n#main\nEN\n'\n#LIMSWI\n#LIMSWI\n \n;\n'runs when a limit switch is tripped\nMG\n \n\"Limit switch:\"\n{N}\nIF\n \n(\n(\n(\n(\n_LF\nA\nA\n \n=\n \n0\n)\n)\n \n|\n \n(\n(\n_LR\nA\nA\n \n=\n \n0\n)\n)\n)\n)\n \nMG\n \n\"Axis A\"\nENDIF\nIF\n \n(\n(\n(\n(\n_LF\nB\nB\n \n=\n \n0\n)\n)\n \n|\n \n(\n(\n_LR\nB\nB\n \n=\n \n0\n)\n)\n)\n)\n \nMG\n \n\"Axis B\"\nENDIF\nRE \n1\n;\n' RE used to exit the #LIMSWI sub \n#LIMSWI applies to DMC40x0,DMC42x0,DMC41x3,DMC21x3,DMC18x6,DMC18x2,DMC30010,DMC500x0,DMC52xx0\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "#MCTIME",
        "Usage": [],
        "Operands": {},
        "Description": "Automatic sub used to run user-code if a Motion Complete (MC) trippoint times out. If the motor position does not reach or pass the target within the\nspecified timeout (TW), #MCTIME wil run if present.\nMC uses position from TP for servos, or TD for steppers.",
        "Arguments": [],
        "Remarks": "\nUse EN to terminate the subroutine",
        "Examples": "\n'Galil DMC Code Example\n#begin\n;\n'                 Begin main program\n \nTW\nA\nA\n=\n=\n \n1000\n;\n'             Set the time out to 1000 ms\n \nPR\nA\nA\n=\n=\n \n10000\n;\n'            Position relative\n \nBG\n \nA\nA\n;\n'                  Begin motion\n \nMC\n \nA\nA\n;\n'                  Motion Complete trip point\nEN\n;\n'                     End main program\n'\n#MCTIME\n#MCTIME\n;\n'                Motion Complete Subroutine\n \nMG\n \n\"A fell short\"\n;\n'     Send out a message\nEN\n \n1\n;\n'                   End subroutine \n#MCTIME applies to DMC40x0,DMC42x0,DMC41x3,DMC21x3,DMC18x6,DMC18x2,DMC30010,DMC500x0,DMC52xx0\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "#POSERR",
        "Usage": [],
        "Operands": {},
        "Description": "Automatic subroutine that runs user code when a position error event occurs. The factory default behavior of the Galil controller upon a position error\n(_TEn > _ERn) is to drive the error signal low only, turning on the red error LED. If OE is set to 1, the motor whose position error (TE) equals or exceeds\nits threshold (ER) will be turned off (MO). #POSERR is used to run code upon a position error, for example to notify a host computer.",
        "Arguments": [],
        "Remarks": "\nUse RE to end the routine.\n#POSERR runs on thread 0. Code does not need to be running in thread 0 for #POSERR to be enabled.\n#POSERR will also run when OE1 is set for an axes and that axis is also setup for encoder failure detection (see OA, OT, OV commands).",
        "Examples": "\n'Galil DMC Code Example\n#main\n;\n'       main program\n'\nJP\n \n#main\nREM simple example of #POSERR\n#POSERR\n#POSERR\n \nMG\n \n\"#POSERR\"\nRE\n'Galil DMC Code Example\nREM example of #POSERR that checks for position error on each axis\n#POSERR\n#POSERR\n \n~a\n~a\n= \n= \n0\n;\n'       axis designator\n \nIF\n \n(\n(\n(\n(\n_TE\n~a\n~a\n>\n_ER\n~a\n~a\n)\n)\n&\n(\n(\n_OE\n~a\n~a\n)\n)\n)\n)\n  \nMG\n \n\"Position Error occured on \"\n,\n~a\n~a\n{F1.0}\n,\n\" axis\"\n \nENDIF\n \n~a\n~a\n= \n= \n~a\n~a\n+\n1\nJP \n#POSERR\n#POSERR\n,\n~a\n~a\n<\n_BV\n;\n' loop until axes have been checked\n \nAI\n \n1\n;\n'       wait until input 1 goes high (ex. safety switch)\n \nSH\nRE \n1\n;\n'         retrurn to main program \n'Galil DMC Code Example\nREM #POSERR example for checking to see if encoder failure occured\nREM The stop code will only update of the profilier is running at the time\nREM the encoder failure is detected.\n#POSERR\n#POSERR\n~a\n~a\n= \n= \n0\n#loop\nIF\n \n_MO\n~a\n~a\n=\n1\n \nIF\n \n(\n(\n(\n(\n_TE\n~a\n~a\n<\n_ER\n~a\n~a\n)\n)\n&\n(\n(\n_OE\n~a\n~a\n)\n)\n&\n(\n(\n_OA\n~a\n~a\n)\n)\n)\n)\n  \nMG\n \n\"possible encoder failure on \"\n,\n~a\n~a\n{Z1.0}\n,\n\" axis\"\n \nENDIF\nENDIF\n~a\n~a\n= \n= \n~a\n~a\n+\n1\nJP \n#loop\n,\n~a\n~a\n<\n_BV\nAI \n1\n;\n'              wait for input 1 to go high\nSH \n;\n'               enable all axes\nRE\n#POSERR applies to DMC40x0,DMC42x0,DMC41x3,DMC21x3,DMC18x6,DMC18x2,DMC30010,DMC500x0,DMC52xx0\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "#SERERR",
        "Usage": [],
        "Operands": {},
        "Description": "Automatic subroutine that allows user code to run when there is a serial encoder fault.\nThis subroutine is only used with controllers equipped with hardware featuring the -BiSS encoder upgrade.",
        "Arguments": [],
        "Remarks": "\nUse the RE command to end this routine.\n#SERERR runs on thread 0\nThe following are the fault conditions which will cause #SERERR to interrupt.\nSerial Encoder Faults\nBiSS\nEncoder timeout (bit 0 of _SS)\nCRC error (bit 1 of _SS)\nError bit* (bit 2 of _SS)\nWarning bit* (bit 3 of _SS)\nThe active level of the Error and Warning bits for BiSS must be configured with SY.\nFor the encoder timeout condition, TC1 will also return \"140 Serial encoder missing.\"\nNote: The encoder manufacturer may name the Error and Warning bits differently. Consult the encoder documentation for the naming convention.\nSee the SY command to define the polarity of these bits.\nGalil defines the Warning bit as the bit directly preceeding the CRC. The Error bit is defined as the bit directly preceeding the Warning bit.",
        "Examples": "\n'Galil DMC Code Example\n'code to display error conditions on LCD\n#SERERR\n#SERERR\nLU \n0\n \nMG \n\"SERERR\"\n{L1}\n \nMG \n_SS\nA\nA\n{L2}\nREM disable axis A\n \nOE\nA\nA\n= \n= \n1\n;\nER\nA\nA\n= \n= \n0\nREM disable axis serial encoder\n \nSS\nA\nA\n= \n= \n0\nRE\n#SERERR applies to SER\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "#TCPERR",
        "Usage": [],
        "Operands": {},
        "Description": "Automatic subroutine which allows execution of user code when an TCP error event occurs. #TCPERR allows the application programmer to run code (for\nexample to reestablish the connection) when error code 123 occurs.",
        "Arguments": [],
        "Remarks": "\nUse RE to exit this subroutine.\nError code 123 (TCP lost sync or timeout) occurs when a message is sent out a handle, and no acknowledgement is received.\nWhen this occurs, the handle the message was sent out is closed.\n#TCPERR can be used to reestablish the handle\nCode does not need to be running in thread 0 for #TCPERR to run.",
        "Examples": "\n'Galil DMC Code Example\n#loop\n \nMG\n \n{EA}\n \n\"L\"\n \nWT \n1000\nJP \n#loop\n#TCPERR\n#TCPERR\n \nMG\n \n{P1}\n \n\"TCPERR.  Dropped handle\"\n,\n \n_IA4\nRE\n'Galil DMC Code Example\n'example of reestablishing connection after TCPERR\n'\n#main\nIH\nE\nE\n= \n= \n192\n,\n168\n,\n1\n,\n30\n;\n'   connect to 192,168,1,30\nWT \n100\n;\n'              wait for handle to be established\nipe\n= \n= \n_IH\nE\nE\n0\n;\n'          save IP for reconnection use\nn\n= \n= \n0\n;\n'                connection counter\n#loop\n;\n'              endless message loop\nMG \n\"hello\"\nWT \n1000\nJP \n#loop\nEN\n#TCPERR\n#TCPERR\nIH\nE\nE\n= \n= \n>\n-\n3\n;\n'            make sure handle E is clear\nJP \n#TCPERR\n#TCPERR\n,\n_IH\nE\nE\n2\n<>\n0\n;\n' wait for clear handle\nIH\nE\nE\n= \n= \nihe\n;\n'            set handle with saved IP var\nWT \n100\nn\n= \n= \nn\n+\n1\n;\n'              increment counter\nJP \n#end\n,\nn\n>\n5\n;\n'         try at least 5 times\nJP \n#TCPERR\n#TCPERR\n,\n_IH\nE\nE\n2\n<>\n-\n2\n;\n'repeat if handle failed\n#end\nIF \n(\n(\nn\n>\n5\n)\n)\n \nMG \n\"failed connection\"\n \nHX \n0\n;\n'               stop code if connection lost\nELSE\n \nMG \n\"Reconnected\"\n \nn\n \n=\n=\n \n0\n;\n'             reset connection counter\nENDIF\nRE\n#TCPERR applies to DMC40x0,DMC42x0,DMC41x3,DMC21x3,RIO47xxx,DMC30010,DMC500x0,DMC52xx0\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "$",
        "Usage": [],
        "Operands": {},
        "Description": "The $ operator denotes that the following string is in hexadecimal notation.",
        "Arguments": {
            "n": {},
            "$80000000.0000": {},
            "$7FFFFFFF.FFFF": {},
            "N/A": {},
            "$0.0001": {},
            "Value of hexadecimal\rnumber": {},
            "32 bits of integer and 16 bits of fraction in\rtotal": {}
        },
        "Remarks": "\nNone",
        "Examples": "\n'Galil DMC Code Example\nx\n \n=\n=\n \n$7fffffff.0000\n              \n;\n'store 2147483647 in x\ny\n \n=\n=\n \nx\n \n&\n \n$0000ffff.0000\n          \n;\n'store lower 16 bits of x in y\nz\n \n=\n=\n \nx\n \n&\n \n$ffff0000.0000\n \n/\n \n$10000\n \n;\n'store upper 16 bits of x in z \n$ applies to DMC500x0,DMC52xx0,DMC40x0,DMC42x0,DMC41x3,DMC30010,DMC21x3,RIO47xxx,DMC18x6,DMC18x2\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "%",
        "Usage": [
            {
                "Example": "variable = (value1 % value2)",
                "Explanation": "Performs an operation between two values or evaluated statements"
            }
        ],
        "Operands": {},
        "Description": "The % symbol is the modulo operator. It takes as arguments any two values, variables, array elements, operands, or At functions (@SIN[]) and returns a\nvalue equal to the modulo of the arguments.\nMathmatical operations are calculated left to right rather than multiplication and division calculations performed prior to addition and subraction.\nExample:\n1+2*3 = 9, not 7\nIt is recommended that parenthesis be used when more than one mathmatical operation is combined in one command.\nExample:\nvar = ((10*30)+(60/30));' \nevaluates as 302\nvar = 10*30+60/30;' \nevalutes as 12",
        "Arguments": [],
        "Remarks": "\nThis is a binary operator (takes two arguments and returns one value). The result of this operation is a value, which is not valid on its own. It must be\ncoupled with a command. See examples below.\nMathmatical operations are calculated left to right rather than multiplication and division calculations performed prior to addition and subraction.\nExample: \n1+2*3 = 9, not 7\nIt is recommended that parenthesis be used when more than one mathmatical operation is combined in one command.\nExample: var = ((10*30)+(60/30));' \nevaluates as 302\nvar = 10*30+60/30;' \nevalutes as 12",
        "Examples": "\n'Galil DMC Code Example\n'Determine the day of week in n days\nDM\n \nname\n[\n[\n7\n]\n]\n;\n'Strings for day of week\nname\n[\n[\n0\n]\n]\n= \n= \n\"SUN\"\nname\n[\n[\n1\n]\n]\n= \n= \n\"MON\"\nname\n[\n[\n2\n]\n]\n= \n= \n\"TUE\"\nname\n[\n[\n3\n]\n]\n= \n= \n\"WED\"\nname\n[\n[\n4\n]\n]\n= \n= \n\"THU\"\nname\n[\n[\n5\n]\n]\n= \n= \n\"FRI\"\nname\n[\n[\n6\n]\n]\n= \n= \n\"SAT\"\ntoday\n= \n= \n2\n;\n'Tuesday\ndays\n= \n= \n123\n;\n'Days from now\ndow\n= \n= \n(\n(\n(\n(\ndays\n \n+\n \ntoday\n)\n)\n%\n7\n)\n)\n;\n'calculate future day of week\nMG \n\"The day of week in \"\n,\ndays\n{Z10.0}\n,\n\" days will be \"\n,\n \nname\n[\n[\ndow\n]\n]\n{S3.0}\nEN\nREM Code Returns: The day of week in  123 days will be SAT \n% applies to DMC40x0,DMC42x0,DMC41x3,RIO47xxx,DMC18x6,DMC30010,DMC500x0,DMC52xx0\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "&",
        "Usage": [],
        "Operands": {},
        "Description": "The & symbol is used to pass a variable by reference on the subroutine stack. When passed by reference, a change to the local-scope variable changes\nthe global value.",
        "Arguments": {
            "Argument": {
                "0": "str0",
                "1": "str1"
            },
            "Min": {
                "0": "1 char",
                "1": "1 char"
            },
            "Max": {
                "0": "7 chars",
                "1": "8 chars"
            },
            "Default": {
                "0": "N/A",
                "1": "N/A"
            },
            "Resolution": {
                "0": "String",
                "1": "String"
            },
            "Description": {
                "0": "Name of label to use for subroutine call",
                "1": "Name of variable to pass by reference to the subroutine"
            }
        },
        "Remarks": "\nVariables sent to a subroutine must be global variables that are already dimensioned.\nDo not dimension any variables in a subroutine when passing variables by reference. This can break the variable pointer.",
        "Examples": "\n'Galil DMC Code Example\nREM Pass By Reference Example:\n#main\nvalue\n= \n= \n5\n;\n'         a value to be passed by reference\nglobal\n= \n= \n8\n;\n'        a global variable\nJS \n#sum\n(\n(\n&\nvalue\n,\n1\n,\n2\n,\n3\n,\n4\n,\n5\n,\n6\n,\n7\n)\n)\n;\n' note first arg passed by reference\nMG\n \nvalue\n;\n'        message out value after subroutine.\nMG\n \n_JS\n;\n'          message out returned value\nEN\n'\n#sum\n;\n'            (* ^a,^b,^c,^d,^e,^f,^g)\n^a\n= \n= \n^b\n+\n^c\n+\n^d\n+\n^e\n+\n^f\n+\n^g\n+\n^h\n+\nglobal\nEN \n,\n,\n^a\n'notes-\n'do not use spaces when working with ^\n'If using global variables, they MUST be created before the subroutine is run\n'From Terminal\n:\nExecuted program from program2.dmc\n36.0000\n36.0000 \n& applies to DMC40x0,DMC42x0,DMC41x3,DMC18x6,DMC30010,DMC500x0,DMC52xx0\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "&",
        "Usage": [
            {
                "Example": "variable = (value1 & value2)",
                "Explanation": "Performs an operation between two values or evaluated statements"
            }
        ],
        "Operands": {},
        "Description": "The & symbol is the bitwise AND operator used with IF, JP, and JS decisions, and also to perform bitwise ANDING of values.",
        "Arguments": {
            "Argument": {
                "0": "n"
            },
            "Min": {
                "0": "-2,147,483,648"
            },
            "Max": {
                "0": "2,147,483,647"
            },
            "Default": {
                "0": "N/A"
            },
            "Resolution": {
                "0": "1/65,536"
            },
            "Description": {
                "0": "Value to use with AND operator"
            },
            "Notes": {
                "0": "nan"
            }
        },
        "Remarks": "\nThe result of this operation is a value, which is not valid on its own. It must be coupled with a command. See examples below.\nFor IF, JP, and JS, the values used for n are typically the results of logical expressions such as (x > 2) & (y=8)",
        "Examples": "\n'Galil DMC Code Example\n'Bitwise use\n:\nvar1\n= \n= \n$F\n;\n'00001111\n:\nvar2\n= \n= \n$F0\n;\n'1111000\n:\nMG\n \n(\n(\nvar1\n \n&\n \nvar2\n)\n)\n0.0000\n:\nMG\n \nvar1\n15.0000\n:\nMG\n \nvar2\n240.0000\n:\n'Galil DMC Code Example\n'Conditional Use\nvar1\n= \n= \n$F\n;\n'00001111\nvar2\n= \n= \n$F0\n;\n'1111000\nIF\n \n(\n(\nvar1\n \n=\n \n$F\n)\n)\n \n&\n \n(\n(\nvar2\n \n=\n \n$F1\n)\n)\n \nMG \n\"True\"\nELSE\n \nMG \n\"False\"\nENDIF\nEN\nREM Returned: False \n& applies to DMC500x0,DMC52xx0,DMC40x0,DMC42x0,DMC41x3,DMC30010,DMC21x3,RIO47xxx,DMC18x6,DMC18x2\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "( , )",
        "Usage": [],
        "Operands": {},
        "Description": "The parentheses denote the order of math and logical operations.",
        "Arguments": {
            "n": {},
            "-2,147,483,648": {},
            "2,147,483,647.9999": {},
            "N/A": {},
            "1/65,536": {},
            "Math or logical expression for evaluation": {},
            "Unnamed: 0": {}
        },
        "Remarks": "\nNote that the controller evaluates expressions from left to right, and does \nnot\n follow academic algebraic standards (e.g. multiplication and division first,\nfollowed by addition or subtraction)\nIt is required to use parentheticals to ensure intended mathematical precedence",
        "Examples": "\n'Galil DMC Code Example\n:\nMG\n \n1\n+\n2\n*\n3\n \n9.0000\n:\nMG\n \n1\n+\n(\n(\n2\n*\n3\n)\n)\n \n7.0000 \n'Galil DMC Code Example\n:\nvar1\n= \n= \n$1F\n:\nvar2\n= \n= \n$F\n:\nMG\n \nvar1\n&\nvar2\n/\n$10\n0.9375      ($0.F000)\n:\nMG\n \nvar1\n&\n(\n(\nvar2\n/\n$10\n)\n)\n0.0000      ($0.0000) \n( , ) applies to DMC500x0,DMC52xx0,DMC40x0,DMC42x0,DMC41x3,DMC30010,DMC21x3,DMC18x6,DMC18x2,RIO47xxx\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "*",
        "Usage": [
            {
                "Example": "variable = (value1 * value2)",
                "Explanation": "Performs an operation between two values or evaluated statements"
            }
        ],
        "Operands": {},
        "Description": "The * symbol is the multiplication operator. It takes as arguments any two values, variables, array elements, operands, or At functions (@SIN[]) and\nreturns a value equal to the product of the arguments.",
        "Arguments": [],
        "Remarks": "\nThis is a binary operator (takes two arguments and returns one value). The result of this operation is a value, which is not valid on its own. It must be\ncoupled with a command. See examples below.\nMathmatical operations are calculated left to right rather than multiplication and division calculations performed prior to addition and subraction.\nExample: \n1+2*3 = 9;' \nnot 7\nIt is recommended that parenthesis be used when more than one mathmatical operation is combined in one command.\nExample: var = ((10*30)+(60/30));' \nevaluates as 302\nvar = 10*30+60/30;' \nevalutes as 12",
        "Examples": "\n'Galil DMC Code Example\n:\nvar1\n \n=\n=\n \n(\n(\n2\n \n+\n \n3\n)\n)\n \n*\n \n2\n:\nvar2\n \n=\n=\n \nvar1\n \n*\n \n10\n:\nMG\n \nvar2\n \n*\n \n0.5\n \n50.0000\n:\n* applies to DMC500x0,DMC52xx0,DMC40x0,DMC42x0,DMC41x3,DMC30010,DMC21x3,DMC18x6,DMC18x2,RIO47xxx\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "/",
        "Usage": [
            {
                "Example": "variable = (value1 / value2)",
                "Explanation": "Performs an operation between two values or evaluated statements"
            }
        ],
        "Operands": {},
        "Description": "The / symbol is the division operator. It takes as arguments any two values, variables, array elements, operands, or At functions (@SIN[]) and returns a\nvalue equal to the quotient of the arguments.",
        "Arguments": [],
        "Remarks": "\nThis is a binary operator (takes two arguments and returns one value). The result of this operation is a value, which is not valid on its own. It must be\ncoupled with a command. See examples below.\nMathmatical operations are calculated left to right rather than multiplication and division calculations performed prior to addition and subraction.\nExample: \n1+2*3 = 9;' \nnot 7\nIt is recommended that parenthesis be used when more than one mathmatical operation is combined in one command.\nExample: var = ((10*30)+(60/30));' \nevaluates as 302\nvar = 10*30+60/30;' \nevalutes as 12",
        "Examples": "\n'Galil DMC Code Example\n:\nvar1\n \n=\n=\n \n100\n/\n10\n:\nvar2\n \n=\n=\n \nvar1\n/\n2\n:\nMG\n \nvar2\n \n+\n \n1\n \n6.0000\n:\n/ applies to DMC500x0,DMC52xx0,DMC40x0,DMC42x0,DMC41x3,DMC30010,DMC21x3,DMC18x6,DMC18x2,RIO47xxx\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": ";",
        "Usage": [],
        "Operands": {},
        "Description": "The semicolon operator allows multiple Galil commands to exist on a single line.",
        "Arguments": [],
        "Remarks": "\nThe semicolon operator is used for the following reasons:\n1\n. \nTo put comments on the same line as the command (STX ;'stop)\n2\n. \nTo compress DMC programs to fit within the program line limit (Note: use a compression utility to do this. Do not program this way because it is\nhard to read.)\n3\n. \nTo give higher priority to a thread. All commands on a line are executed before the thread scheduler switches to the next thread.",
        "Examples": "\n'Galil DMC Code Example\nSB \n1\n;\nWT \n500\n;\nCB \n1\n;\n' multiple commands separated by semicolons with a comment \n'Galil DMC Code Example\n#high\n;\n'     #High priority thread executes twice as fast as\n \na\n \n=\n=\n \na\n \n+\n \n1\n;\n \nb\n \n=\n=\n \nb\n \n+\n \n1\nJP \n#high\n#low\n;\n'      #Low when run in parallel\n \nc\n \n=\n=\n \nc\n \n+\n \n1\n \nd\n \n=\n=\n \nd\n \n+\n \n1\nJP \n#low\n; applies to DMC500x0,DMC52xx0,DMC40x0,DMC42x0,DMC41x3,DMC30010,DMC21x3,DMC18x6,DMC18x2,RIO47xxx\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "@ABS",
        "Usage": [
            {
                "Example": "variable = @ABS[value]",
                "Explanation": "Performs a function on a value or evaluated statement and returns a value"
            }
        ],
        "Operands": {},
        "Description": "The @ABS[] operation takes the absolute value of the given number. Returns the value if positive, and returns -1 times the value if negative.",
        "Arguments": {
            "Argument": {
                "0": "n"
            },
            "Min": {
                "0": "-2,147,483,648"
            },
            "Max": {
                "0": "2,147,483,647"
            },
            "Default": {
                "0": "N/A"
            },
            "Resolution": {
                "0": "1/65,535"
            },
            "Description": {
                "0": "Number to display as absolute value"
            },
            "Notes": {
                "0": "nan"
            }
        },
        "Remarks": "\n@ABS[] is an operand, not a command. It can only be used as an argument to other commands and operators",
        "Examples": "\n'Galil DMC Code Example\n:\nMG\n \n@ABS\n[\n[\n-\n2147483647\n]\n]\n \n2147483647.0000 \n@ABS applies to DMC500x0,DMC52xx0,DMC40x0,DMC42x0,DMC41x3,DMC30010,DMC21x3,DMC18x6,DMC18x2,RIO47xxx\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "@ACOS",
        "Usage": [
            {
                "Example": "variable = @ACOS[value]",
                "Explanation": "Performs a function on a value or evaluated statement and returns a value"
            }
        ],
        "Operands": {},
        "Description": "The @ACOS operator returns in degrees the arc cosine of the given number.",
        "Arguments": {
            "Argument": {
                "0": "n"
            },
            "Min": {
                "0": "-1"
            },
            "Max": {
                "0": "1"
            },
            "Default": {
                "0": "N/A"
            },
            "Resolution": {
                "0": "1/65,536"
            },
            "Description": {
                "0": "Value used for arc cosine operation"
            },
            "Notes": {
                "0": "nan"
            }
        },
        "Remarks": "\n@ACOS[] is an operand, not a command. It can only be used as an argument to other commands and operators\n@ACOS[] is also referred to as the inverse cosine function",
        "Examples": "\n'Galil DMC Code Example\n:\nMG\n \n@ACOS\n[\n[\n-\n1\n]\n]\n \n180.0000\n:\nMG\n \n@ACOS\n[\n[\n0\n]\n]\n \n90.0000\n:\nMG\n \n@ACOS\n[\n[\n1\n]\n]\n \n0.0001 \n@ACOS applies to DMC500x0,DMC52xx0,DMC40x0,DMC42x0,DMC41x3,DMC30010,DMC21x3,DMC18x6,DMC18x2,RIO47xxx\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "@AN",
        "Usage": [
            {
                "Example": "variable = @AN[value]",
                "Explanation": "Performs a function on a value or evaluated statement and returns a value"
            }
        ],
        "Operands": {},
        "Description": "The @AN[] operator returns the value of the given analog input in volts.",
        "Arguments": {
            "Argument": {
                "0": "n",
                "1": "n"
            },
            "Min": {
                "0": "1",
                "1": "1,000"
            },
            "Max": {
                "0": "8",
                "1": "8,999"
            },
            "Default": {
                "0": "N/A",
                "1": "N/A"
            },
            "Resolution": {
                "0": "1",
                "1": "1"
            },
            "Description": {
                "0": "Analog input to query",
                "1": "Read Modbus slave analog input"
            },
            "Notes": {
                "0": "nan",
                "1": "See Remarks"
            }
        },
        "Remarks": "\n@AN[] is an operand, not a command. It can only be used as an argument to other commands and operators\nUsing @AN with a Modbus Slave\nRIO as Modbus Slave\n3rd Party Modbus Slave Device\nn is the I/O number calculated using the following equations:\nn = (HandleNum*1000) + (Bitnum-1)\nHandleNum is the handle specifier from A to H.\nHandle must be assigned to port 502 for Modbus comms (See IH)\nBitNum is the I/O point in the module from 1 to 8",
        "Examples": "\n'Galil DMC Code Example\n:\nMG\n \n@AN\n[\n[\n1\n]\n]\n \n;\n'print analog input 1\n \n1.7883\n:\nx\n \n=\n=\n \n@AN\n[\n[\n1\n]\n]\n \n;\n'assign analog input 1 to a variable \n@AN applies to DMC500x0,DMC52xx0,DMC40x0,DMC42x0,DMC41x3,DMC30010,DMC21x3,RIO47xxx,DMC18x6,RIO574x0\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "@ASIN",
        "Usage": [
            {
                "Example": "variable = @ASIN[value]",
                "Explanation": "Performs a function on a value or evaluated statement and returns a value"
            }
        ],
        "Operands": {},
        "Description": "The @ASIN operator returns in degrees the arc sine of the given number.",
        "Arguments": {
            "Argument": {
                "0": "n"
            },
            "Min": {
                "0": "-1"
            },
            "Max": {
                "0": "1"
            },
            "Default": {
                "0": "N/A"
            },
            "Resolution": {
                "0": "1/65,536"
            },
            "Description": {
                "0": "Value used for arc sine operation"
            },
            "Notes": {
                "0": "nan"
            }
        },
        "Remarks": "\n@ASIN[] is an operand, not a command. It can only be used as an argument to other commands and operators\n@ASIN[] is also referred to as the inverse sine function",
        "Examples": "\n'Galil DMC Code Example\n:\nMG\n \n@ASIN\n[\n[\n-\n1\n]\n]\n \n-90.0000\n:\nMG\n \n@ASIN\n[\n[\n0\n]\n]\n \n0.0000\n:\nMG\n \n@ASIN\n[\n[\n1\n]\n]\n \n90.0000 \n@ASIN applies to DMC500x0,DMC40x0,DMC42x0,DMC41x3,DMC30010,DMC21x3,RIO47xxx,DMC18x6,DMC18x2,DMC52xx0\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "@ATAN",
        "Usage": [
            {
                "Example": "variable = @ATAN[value]",
                "Explanation": "Performs a function on a value or evaluated statement and returns a value"
            }
        ],
        "Operands": {},
        "Description": "The @ATAN operator returns in degrees the arc tangent of the given number.",
        "Arguments": {
            "Argument": {
                "0": "n"
            },
            "Min": {
                "0": "-2,147,483,638"
            },
            "Max": {
                "0": "2,147,483,647"
            },
            "Default": {
                "0": "N/A"
            },
            "Resolution": {
                "0": "1/65,536"
            },
            "Description": {
                "0": "Value used for arc tangent operation"
            },
            "Notes": {
                "0": "nan"
            }
        },
        "Remarks": "\n@ATAN[] is an operand, not a command. It can only be used as an argument to other commands and operators\n@ATAN[] is also referred to as the inverse tangent function",
        "Examples": "\n'Galil DMC Code Example\n:\nMG\n \n@ATAN\n[\n[\n-\n10\n]\n]\n \n-84.2894\n:\nMG\n \n@ATAN\n[\n[\n0\n]\n]\n \n0.0000\n:\nMG\n \n@ATAN\n[\n[\n10\n]\n]\n \n84.2894 \n@ATAN applies to DMC500x0,DMC52xx0,DMC40x0,DMC42x0,DMC41x3,DMC30010,DMC21x3,DMC18x6,DMC18x2,RIO47xxx\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "@COM",
        "Usage": [
            {
                "Example": "variable = @COM[value]",
                "Explanation": "Performs a function on a value or evaluated statement and returns a value"
            }
        ],
        "Operands": {},
        "Description": "The @COM[] operation performs the bitwise complement (NOT) operation to the given number.",
        "Arguments": {
            "Argument": {
                "0": "n"
            },
            "Min": {
                "0": "-\r2,147,483,648"
            },
            "Max": {
                "0": "2,147,483,647"
            },
            "Default": {
                "0": "N/A"
            },
            "Resolution": {
                "0": "1"
            },
            "Description": {
                "0": "Value to perform bitwise complement\roperation."
            },
            "Notes": {
                "0": "Integer interpreted as a 32-bit\rfield"
            }
        },
        "Remarks": "\n@COM[] is an operand, not a command. It can only be used as an argument to other commands and operators",
        "Examples": "\n'Galil DMC Code Example\n:\nMG\n \n{$8.0}\n \n@COM\n[\n[\n0\n]\n]\n$FFFFFFFF\n:\nMG\n \n{$8.0}\n \n@COM\n[\n[\n$FFFFFFFF\n]\n]\n$00000000 \n'Galil DMC Code Example\n'toggle output 1\nOB\n \n1\n,\n@COM\n[\n[\n@OUT\n[\n[\n1\n]\n]\n]\n]\n \n&\n \n1\n;\n' read current state of output 1, take the bitwise complement, mask out bits. \n@COM applies to DMC500x0,DMC52xx0,DMC40x0,DMC42x0,DMC41x3,DMC30010,DMC21x3,DMC18x6,DMC18x2,RIO47xxx\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "@COS",
        "Usage": [
            {
                "Example": "variable = @COS[value]",
                "Explanation": "Performs a function on a value or evaluated statement and returns a value"
            }
        ],
        "Operands": {},
        "Description": "The @COS[] operation returns the cosine of the given angle in degrees",
        "Arguments": {
            "Argument": {
                "0": "n"
            },
            "Min": {
                "0": "-32,768"
            },
            "Max": {
                "0": "32,767"
            },
            "Default": {
                "0": "N/A"
            },
            "Resolution": {
                "0": "1/65,536"
            },
            "Description": {
                "0": "Value in degrees to use for cosine operation"
            },
            "Notes": {
                "0": "nan"
            }
        },
        "Remarks": "\n@COS[] is an operand, not a command. It can only be used as an argument to other commands and operators",
        "Examples": "\n'Galil DMC Code Example\n:\nMG\n \n@COS\n[\n[\n0\n]\n]\n \n1.0000\n:\nMG\n \n@COS\n[\n[\n90\n]\n]\n \n0.0000\n:\nMG\n \n@COS\n[\n[\n180\n]\n]\n \n-1.0000\n:\nMG\n \n@COS\n[\n[\n270\n]\n]\n \n0.0000\n:\nMG\n \n@COS\n[\n[\n360\n]\n]\n \n1.0000 \n@COS applies to DMC500x0,DMC52xx0,DMC40x0,DMC42x0,DMC41x3,DMC30010,DMC21x3,DMC18x6,DMC18x2,RIO47xxx\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "@FLOT",
        "Usage": [
            {
                "Example": "variable = @FLOT[value]",
                "Explanation": "Performs a function on a value or evaluated statement and returns a value"
            }
        ],
        "Operands": {},
        "Description": "The @FLOT operation returns the 32bit floating representation of a number",
        "Arguments": {
            "Argument": {
                "0": "n"
            },
            "Min": {
                "0": "-2,147,483,648"
            },
            "Max": {
                "0": "2,147,483,647"
            },
            "Default": {
                "0": "N/A"
            },
            "Resolution": {
                "0": "1/65,536"
            },
            "Description": {
                "0": "Value to use for floating point conversion"
            },
            "Notes": {
                "0": "nan"
            }
        },
        "Remarks": "\n@FLOT[] is an operand, not a command. It can only be used as an argument to other commands and operators\nA useful utility for determining the 32 bit floating point value for a given fractional number can be found here: \nhttp://babbage.cs.qc.cuny.edu/IEEE-\n754/index.xhtml",
        "Examples": "\n'Galil DMC Code Example\n:\nMG\n \n@FLOT\n[\n[\n2.5\n]\n]\n \n{$8.0}\n$40200000\n:\nMG\n \n@REAL\n[\n[\n$40200000\n]\n]\n \n2.5000\n:\n@FLOT applies to DMC500x0,DMC52xx0,DMC40x0,DMC42x0,DMC41x3,DMC30010,DMC21x3,RIO47xxx\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "@FRAC",
        "Usage": [
            {
                "Example": "variable = @FRAC[value]",
                "Explanation": "Performs a function on a value or evaluated statement and returns a value"
            }
        ],
        "Operands": {},
        "Description": "The @FRAC operation returns the fractional part of the given number",
        "Arguments": {
            "Argument": {
                "0": "n"
            },
            "Min": {
                "0": "-2,147,483,648"
            },
            "Max": {
                "0": "2,147,483,647"
            },
            "Default": {
                "0": "N/A"
            },
            "Resolution": {
                "0": "1/65,536"
            },
            "Description": {
                "0": "Value to use in fractional operation"
            },
            "Notes": {
                "0": "nan"
            }
        },
        "Remarks": "\nThe sign of the number input to the operation will be maintained in the fractional output.\n@FRAC[] is an operand, not a command. It can only be used as an argument to other commands and operators",
        "Examples": "\n'Galil DMC Code Example\n:\nMG\n \n@FRAC\n[\n[\n1.2\n]\n]\n \n0.2000\n:\nMG\n \n@FRAC\n[\n[\n-\n2.4\n]\n]\n \n-0.4000 \n@FRAC applies to DMC500x0,DMC52xx0,DMC40x0,DMC42x0,DMC41x3,DMC30010,DMC21x3,DMC18x6,DMC18x2,RIO47xxx\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "@IN",
        "Usage": [
            {
                "Example": "variable = @IN[value]",
                "Explanation": "Performs a function on a value or evaluated statement and returns a value"
            }
        ],
        "Operands": {},
        "Description": "The @IN operand returns the value of the given digital input (either 0 or 1).",
        "Arguments": {
            "Argument": {
                "0": "n",
                "1": "nan",
                "2": "nan",
                "3": "n"
            },
            "Min": {
                "0": "1",
                "1": "17",
                "2": "81",
                "3": "1,000"
            },
            "Max": {
                "0": "16",
                "1": "48",
                "2": "96",
                "3": "8,999"
            },
            "Default": {
                "0": "N/A",
                "1": "N/A",
                "2": "N/A",
                "3": "N/A"
            },
            "Resolution": {
                "0": "1",
                "1": "1",
                "2": "1",
                "3": "1"
            },
            "Description": {
                "0": "General input to query",
                "1": "Extended input to query",
                "2": "Aux encoder input to\rquery",
                "3": "Read Modbus slave bit"
            },
            "Notes": {
                "0": "Inputs 9-16 only valid for 5-8 axis controller",
                "1": "See Remarks",
                "2": "Used when repurposing aux encoder inputs as digital\rinputs",
                "3": "See Remarks"
            }
        },
        "Remarks": "\n@IN[] is an operand, not a command. It can only be used as an argument to other commands and operators\nExtended IO must be configured as inputs by the CO command for valid results\nUsing @IN with a Modbus Slave\nn = (SlaveAddress*10000) + (HandleNum*1000) + ((Module-1)*4) + (Bitnum-1)\nSlave Address is used when the ModBus device has slave devices connected to it and specified as Addresses 0 to 255. Please note that the use\nof slave devices for modbus are very rare and this number will usually be 0.\nHandleNum is the handle specifier where A is 1, B is 2 and so on.\nModule is the position of the module in the rack from 1 to 16.\nBitNum is the I/O point in the module from 1 to 4",
        "Examples": "\n'Galil DMC Code Example\n:\nMG\n \n@IN\n[\n[\n1\n]\n]\n1.0000\n:\nx\n \n=\n=\n \n@IN\n[\n[\n1\n]\n]\n:\nx\n \n=\n=\n \n?\n?\n;\n'  print digital input 1\n1.000 \n@IN applies to DMC500x0,DMC40x0,DMC42x0,DMC41x3,DMC30010,DMC21x3,RIO47xxx,DMC18x6,DMC18x2,RIO574x0,DMC52xx0\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "@INT",
        "Usage": [
            {
                "Example": "variable = @INT[value]",
                "Explanation": "Performs a function on a value or evaluated statement and returns a value"
            }
        ],
        "Operands": {},
        "Description": "The @INT operation returns the integer part of the given number. Note that the modulus operator can be implemented with @INT (see example below).",
        "Arguments": {
            "Argument": {
                "0": "n"
            },
            "Min": {
                "0": "-2,147,483,648"
            },
            "Max": {
                "0": "2,147,483,647"
            },
            "Default": {
                "0": "N/A"
            },
            "Resolution": {
                "0": "1/65,536"
            },
            "Description": {
                "0": "Value to use in integer operation"
            },
            "Notes": {
                "0": "nan"
            }
        },
        "Remarks": "\n@INT[] is an operand, not a command. It can only be used as an argument to other commands and operators",
        "Examples": "\n'Galil DMC Code Example\n:\nMG\n \n@INT\n[\n[\n1.2\n]\n]\n \n1.0000\n:\nMG\n \n@INT\n[\n[\n-\n2.4\n]\n]\n \n-2.0000 \n'Galil DMC Code Example\n#AUTO\n#AUTO\n;\n'        modulus example\n \nx\n \n=\n=\n \n10\n;\n'      prepare arguments\n \ny\n \n=\n=\n \n3\n \nJS \n#mod\n;\n'      call modulus\n \nMG\n \nz\n;\n'        print return value\nEN\n'subroutine: integer remainder of x/y (10 mod 3 = 1)\n'arguments are x and y. Return is in z\n#mod\n \nz\n \n=\n=\n \nx\n \n-\n \n(\n(\ny\n \n*\n \n@INT\n[\n[\nx\n/\ny\n]\n]\n)\n)\nEN\n@INT applies to DMC500x0,DMC52xx0,DMC40x0,DMC42x0,DMC41x3,DMC30010,DMC21x3,DMC18x6,DMC18x2,RIO47xxx\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "@OUT",
        "Usage": [
            {
                "Example": "variable = @OUT[value]",
                "Explanation": "Performs a function on a value or evaluated statement and returns a value"
            }
        ],
        "Operands": {},
        "Description": "Returns the value of the given digital output (either 0 or 1)",
        "Arguments": {
            "Argument": {
                "0": "n",
                "1": "nan",
                "2": "n"
            },
            "Min": {
                "0": "1",
                "1": "17",
                "2": "1,000"
            },
            "Max": {
                "0": "16",
                "1": "48",
                "2": "8,999"
            },
            "Default": {
                "0": "N/A",
                "1": "N/A",
                "2": "N/A"
            },
            "Resolution": {
                "0": "1",
                "1": "1",
                "2": "1"
            },
            "Description": {
                "0": "General output to query",
                "1": "Extended output to query",
                "2": "Query Modbus slave bit"
            },
            "Notes": {
                "0": "Outputs 9-16 only valid for 5-8 axis controller",
                "1": "See Remarks",
                "2": "See Remarks"
            }
        },
        "Remarks": "\nExtended IO must be configured as outputs with the CO command for valid response\n@OUT[] is an operand, not a command. It can only be used as an argument to other commands and operators\nFor EtherCAT I/O modules, the IO command is used to map the module as an EtherCAT I/O slave. \nFor Digital I/O mapping syntax, refer to the IO\ncommand.\nUsing @OUT with a Modbus Slave\nn = (SlaveAddress*10000) + (HandleNum*1000) + ((Module-1)*4) + (Bitnum-1)\nSlave Address is used when the ModBus device has slave devices connected to it and specified as Addresses 0 to 255. Please note that the use\nof slave devices for modbus are very rare and this number will usually be 0.\nHandleNum is the handle specifier where A is 1, B is 2 and so on.\nModule is the position of the module in the rack from 1 to 16.\nBitNum is the I/O point in the module from 1 to 4",
        "Examples": "\n'Galil DMC Code Example\n:\nMG\n \n@OUT\n[\n[\n1\n]\n]\n;\n'     print state of digital output 1\n1.0000\n:\nx\n \n=\n=\n \n@OUT\n[\n[\n1\n]\n]\n;\n'    assign state of digital output 1 to a variable \n@OUT applies to DMC500x0,DMC52xx0,DMC40x0,DMC42x0,DMC41x3,DMC30010,DMC21x3,RIO47xxx,DMC18x6,DMC18x2,RIO574x0\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "@REAL",
        "Usage": [
            {
                "Example": "variable = @REAL[value]",
                "Explanation": "Performs a function on a value or evaluated statement and returns a value"
            }
        ],
        "Operands": {},
        "Description": "The @REAL operation returns the Galil 4.2 equivalent of a 32 bit floating point number",
        "Arguments": {
            "Argument": {
                "0": "n"
            },
            "Min": {
                "0": "-2,147,483,648"
            },
            "Max": {
                "0": "2,147,483,647"
            },
            "Default": {
                "0": "N/A"
            },
            "Resolution": {
                "0": "1"
            },
            "Description": {
                "0": "32 bit floating point number to convert to Galil 4.2 integer"
            },
            "Notes": {
                "0": "nan"
            }
        },
        "Remarks": "\n@REAL[] is an operand, not a command. It can only be used as an argument to other commands and operators\nA useful utility for determining the 32 bit floating point value for a given fractional number can be found here: \nhttp://babbage.cs.qc.cuny.edu/IEEE-\n754/index.xhtml",
        "Examples": "\n'Galil DMC Code Example\n:\nMG\n \n@FLOT\n[\n[\n2.5\n]\n]\n \n{$8.0}\n$40200000\n:\nMG\n \n@REAL\n[\n[\n$40200000\n]\n]\n \n2.5000\n:\n@REAL applies to DMC500x0,DMC52xx0,DMC40x0,DMC42x0,DMC41x3,DMC30010,DMC21x3,RIO47xxx\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "@RND",
        "Usage": [
            {
                "Example": "variable = @RND[value]",
                "Explanation": "Performs a function on a value or evaluated statement and returns a value"
            }
        ],
        "Operands": {},
        "Description": "The @RND operation rounds the given number to the nearest integer.",
        "Arguments": {
            "Argument": {
                "0": "n"
            },
            "Min": {
                "0": "-2,147,483,648"
            },
            "Max": {
                "0": "2,147,483,647"
            },
            "Default": {
                "0": "N/A"
            },
            "Resolution": {
                "0": "1/65,536"
            },
            "Description": {
                "0": "Value to use in rounding operation"
            },
            "Notes": {
                "0": "nan"
            }
        },
        "Remarks": "\n@FRAC[] is an operand, not a command. It can only be used as an argument to other commands and operators\nThe sign of the number input to the operation will be maintained in the rounded output.",
        "Examples": "\n'Galil DMC Code Example\n:\nMG\n \n@RND\n[\n[\n1.2\n]\n]\n \n1.0000\n:\nMG\n \n@RND\n[\n[\n1.6\n]\n]\n \n2.0000\n:\nMG\n \n@RND\n[\n[\n-\n1.2\n]\n]\n \n-1.0000\n:\nMG\n \n@RND\n[\n[\n5.7\n]\n]\n \n6.0000\n:\nMG\n \n@RND\n[\n[\n-\n5.7\n]\n]\n \n-6.0000\n:\nMG\n \n@RND\n[\n[\n5.5\n]\n]\n \n6.0000\n:\nMG\n \n@RND\n[\n[\n-\n5.5\n]\n]\n \n-5.0000 \n@RND applies to DMC500x0,DMC52xx0,DMC40x0,DMC42x0,DMC41x3,DMC30010,DMC21x3,DMC18x6,DMC18x2,RIO47xxx\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "@SIN",
        "Usage": [
            {
                "Example": "variable = @SIN[value]",
                "Explanation": "Performs a function on a value or evaluated statement and returns a value"
            }
        ],
        "Operands": {},
        "Description": "The @SIN[] operation returns the sine of the given angle in degrees",
        "Arguments": {
            "Argument": {
                "0": "n"
            },
            "Min": {
                "0": "-32,768"
            },
            "Max": {
                "0": "32,767"
            },
            "Default": {
                "0": "N/A"
            },
            "Resolution": {
                "0": "1/65,536"
            },
            "Description": {
                "0": "Value in degrees to use for sine operation"
            },
            "Notes": {
                "0": "nan"
            }
        },
        "Remarks": "\n@SIN[] is an operand, not a command. It can only be used as an argument to other commands and operators",
        "Examples": "\n'Galil DMC Code Example\n:\nMG\n \n@SIN\n[\n[\n0\n]\n]\n \n0.0000\n:\nMG\n \n@SIN\n[\n[\n90\n]\n]\n \n1.0000\n:\nMG\n \n@SIN\n[\n[\n180\n]\n]\n \n0.0000\n:\nMG\n \n@SIN\n[\n[\n270\n]\n]\n \n-1.0000\n:\nMG\n \n@SIN\n[\n[\n360\n]\n]\n \n0.0000 \n@SIN applies to DMC500x0,DMC52xx0,DMC40x0,DMC42x0,DMC41x3,DMC30010,DMC21x3,DMC18x6,DMC18x2,RIO47xxx\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "@SQR",
        "Usage": [
            {
                "Example": "variable = @SQR[value]",
                "Explanation": "Performs a function on a value or evaluated statement and returns a value"
            }
        ],
        "Operands": {},
        "Description": "The @SQR operation takes the square root of the given number.",
        "Arguments": {
            "Argument": {
                "0": "n"
            },
            "Min": {
                "0": "-\r2,147,483,648"
            },
            "Max": {
                "0": "2,147,483,647"
            },
            "Default": {
                "0": "N/A"
            },
            "Resolution": {
                "0": "1/65,536"
            },
            "Description": {
                "0": "Value to use in square root\roperation"
            },
            "Notes": {
                "0": "If n < 0, the absolute value is taken\rfirst."
            }
        },
        "Remarks": "\n@SQR[] is an operand, not a command. It can only be used as an argument to other commands and operators",
        "Examples": "\n'Galil DMC Code Example\n:\nMG\n \n@SQR\n[\n[\n2\n]\n]\n \n1.4142\n:\nMG\n \n@SQR\n[\n[\n-\n2\n]\n]\n \n1.4142 \n@SQR applies to DMC500x0,DMC52xx0,DMC40x0,DMC42x0,DMC41x3,DMC30010,DMC21x3,DMC18x6,DMC18x2,RIO47xxx\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "@TAN",
        "Usage": [
            {
                "Example": "variable = @TAN[value]",
                "Explanation": "Performs a function on a value or evaluated statement and returns a value"
            }
        ],
        "Operands": {},
        "Description": "The @TAN[] operation returns the tangent of the given angle in degrees.",
        "Arguments": {
            "Argument": {
                "0": "n"
            },
            "Min": {
                "0": "-32,768"
            },
            "Max": {
                "0": "32,767"
            },
            "Default": {
                "0": "N/A"
            },
            "Resolution": {
                "0": "1/65,536"
            },
            "Description": {
                "0": "Value in degrees to use for tangent operation"
            },
            "Notes": {
                "0": "nan"
            }
        },
        "Remarks": "\n@TAN[] is an operand, not a command. It can only be used as an argument to other commands and operators",
        "Examples": "\n'Galil DMC Code Example\n:\nMG\n \n@TAN\n[\n[\n23\n]\n]\n \n0.4245\n:\n@TAN applies to DMC500x0,DMC52xx0,DMC40x0,DMC42x0,DMC41x3,DMC30010,DMC21x3,DMC18x6,DMC18x2,RIO47xxx\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "[,]",
        "Usage": [],
        "Operands": {},
        "Description": "The square brackets are used to denote the array index for an array, or to denote an array name.\nThey are also used to designate the argument to a function, such as @ABS[n].",
        "Arguments": {
            "'Galil DMC Code Example\rDM a[50]        ;'define a 50 element array\ra[0] = 3        ;'set first element to 3\rMG a[0]         ;'print element 0": {}
        },
        "Remarks": "\nIf the array will be passed by reference on the subroutine stack (JS), the array name MUST be 6 characters or less.",
        "Examples": "\n'Galil DMC Code Example\nDM\n \na\n[\n[\n50\n]\n]\n        \n;\n'define a 50 element array\na\n[\n[\n0\n]\n]\n \n=\n=\n \n3\n        \n;\n'set first element to 3\nMG\n \na\n[\n[\n0\n]\n]\n         \n;\n'print element 0 \n'Galil DMC Code Example\n#array\n \nDM\n \na\n[\n[\n5\n]\n]\n;\n'                  define a 5 element array\n \na\n[\n[\n0\n]\n]\n \n=\n=\n \n3\n;\n'                 set first element to 3\n \nMG\n \n\"A[0]=\"\n,\na\n[\n[\n0\n]\n]\n;\n'          print element 0\n \nlen\n=\n=\n \na\n[\n[\n-\n1\n]\n]\n;\n'               len now contains the length of A[]\n \nQU\n \na\n[\n[\n]\n]\n,\n0\n,\nlen\n-\n1\n,\n1\n;\nMG \n\"\"\n;\n'    print entire array\n \nMG\n \n\"A[] length=\"\n,\nlen\n;\n'     display Variable len\nEN\n'Example Output from terminal\n:\nXQ \n#array\n:\nA[0]= 3 \n3, 4320, 216666, 217522, 607950 \nA[] length= 5 \n:\n[,] applies to DMC500x0,DMC52xx0,DMC40x0,DMC42x0,DMC41x3,DMC30010,DMC21x3,RIO47xxx,DMC18x6,DMC18x2\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "^",
        "Usage": [],
        "Operands": {},
        "Description": "The ^ character provides local subroutine access for variables passed on the subroutine stack. Passing values on the stack is advanced DMC\nprogramming, and is recommended for experienced DMC programmers familiar with the concept of passing arguments by value and by reference.",
        "Arguments": {
            "Argument": {
                "0": "s"
            },
            "Min": {
                "0": "a"
            },
            "Max": {
                "0": "h"
            },
            "Default": {
                "0": "N/A"
            },
            "Resolution": {
                "0": "N/A"
            },
            "Description": {
                "0": "Stack variable name"
            },
            "Notes": {
                "0": "a,b,c,d,e,f,g,h supported"
            }
        },
        "Remarks": "\nSee the JS command for a full explanation of passing stack variables.\nPassing parameters has no type checking, so it is important to exercise good programming style when passing parameters. See examples below for\nrecommended syntax.\nDo not use spaces in expressions containing ^.\nGlobal variables MUST be assigned prior to any use in subroutines where variables are passed by reference.\nArrays passed on the stack must have names no longer than 6 chars.\nStack zero has no local-scope variables. Accessing these variables from stack zero writes to stack 1's variable table.",
        "Examples": "\n'Galil DMC Code Example\n#add\nJS \n#sum\n(\n(\n1\n,\n2\n,\n3\n,\n4\n,\n5\n,\n6\n,\n7\n,\n8\n)\n)\n \n;\n' call subroutine, pass values\nMG \n_JS\n \n;\n' print return value\nEN\n'\n#sum\n \n;\nNO(^a,^b,^c,^d,^e,^f,^g,^h) Sums the values ^a to ^h and returns the result\nEN \n,\n,\n(\n(\n^a\n+\n^b\n+\n^c\n+\n^d\n+\n^e\n+\n^f\n+\n^g\n+\n^h\n)\n)\n \n;\n' return sum\n'Output from the previous program\n:\nXQ \n#add\n36.0000 \n^ applies to DMC40x0,DMC42x0,DMC41x3,DMC18x6,DMC30010,DMC500x0,DMC52xx0\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "^L^K",
        "Usage": [
            {
                "Example": "^L^K n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {},
        "Description": "Locks user access to the application program. When locked, the ED, UL, LS, and TR commands will give privilege error #106. The application program will\nstill run when locked. Once the program is unlocked, it will remain accessible until a lock command or a reset (with the locked condition burned in) occurs.",
        "Arguments": {
            "Char": {
                "0": "^L",
                "1": "^K"
            },
            "Dec": {
                "0": "12",
                "1": "11"
            },
            "Hex": {
                "0": "0C",
                "1": "0B"
            }
        },
        "Remarks": "\nThe PW command can only be set while the application program is unlocked.\n^L^K ?\n will return a 0 if the controller is not locked, and a 1 if it is locked.\nASCII Values\nChar\nDec\nHex\n^L\n12\n0C\n^K\n11\n0B",
        "Examples": "\n'Galil DMC Code Example\n:\nPW\n \ntest\n,\ntest\n;\n'             Set password to \"test\"\n:\n^L^K\n \ntest\n,\n1\n;\n'              Lock the program\n:\nLS\n;\n'                       Attempt to list the program\n?\n:\nTC\n \n1\n106 Privilege violation\n:\n^L^K applies to DMC40x0,DMC42x0,DMC41x3,RIO47xxx,DMC18x6,DMC30010,DMC500x0,DMC52xx0\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "^R^S",
        "Usage": [
            {
                "Example": "^R^S",
                "Explanation": "Command takes no arguments"
            }
        ],
        "Operands": {},
        "Description": "The Master Reset command resets the controller to factory default settings and erases EEPROM. A master reset can also be performed by installing a\njumper at the location labeled MRST and resetting the board (power cycle or pressing the reset button). Remove the jumper after this procedure.",
        "Arguments": [],
        "Remarks": "\nSending a ^R^S over an Ethernet connection will cause the IP address to be cleared from the controller and will result in a timeout.\nASCII Values\nChar\nDec\nHex\n^R\n18\n12\n^S\n19\n13",
        "Examples": "\n'Galil DMC Code Example\nREM Example burns-in a non-default value for KP, does a standard reset with\nREM the RS command, then performs a master reset with ^R^S.\n:\nKP \n?\n?\n \n6.00\n:\nKP \n10\n:\nKP \n?\n?\n \n10.00\n:\nBN\n:\nRS\n:\nKP \n?\n?\n \n10.00\n:\n^R^S\n:\nKP \n?\n?\n \n6.00\n:\n^R^S applies to DMC500x0,DMC40x0,DMC42x0,DMC41x3,DMC30010,DMC21x3,RIO47xxx,DMC18x6,DMC18x2,RIO574x0,DMC52xx0\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "^R^V",
        "Usage": [
            {
                "Example": "^R^V",
                "Explanation": "Command takes no arguments"
            }
        ],
        "Operands": {},
        "Description": "The Revision Information command causes the controller to return the firmware revision information.",
        "Arguments": {
            "'Galil DMC Code Example\r:^R^V\rDMC4040 Rev 1.1e\r:": {}
        },
        "Remarks": "\nDo not use ^ symbols to send ^R^V command. ^ symbols denote using the control (Ctrl) key when pressing the characters.\nASCII Values\nChar\nDec\nHex\n^R\n18\n12\n^V\n22\n16",
        "Examples": "\n'Galil DMC Code Example\n:\n^R^V\nDMC4040 Rev 1.1e\n:\n^R^V applies to DMC500x0,DMC40x0,DMC42x0,DMC41x3,DMC30010,DMC21x3,RIO47xxx,DMC18x6,DMC18x2,RIO574x0,DMC52xx0\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "_GP",
        "Usage": [
            {
                "Example": "variable= _GP",
                "Explanation": "Holds a value"
            }
        ],
        "Operands": {
            "Operands": [
                "_GPm"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "The _GP operand contains the value of the \"phase differential\" accumulated on the most current change in the gearing ratio between the master and the\nslave axes. The value does not update if the distance over which the slave will engage is set to 0 with the GD command.",
        "Arguments": {
            "Argument": {
                "0": "m"
            },
            "Min": {
                "0": "A"
            },
            "Max": {
                "0": "H"
            },
            "Default": {
                "0": "N/A"
            },
            "Resolution": {
                "0": "Axis"
            },
            "Description": {
                "0": "Axis of interest"
            },
            "Notes": {
                "0": "nan"
            }
        },
        "Remarks": "\nAn operand is not valid individually. Instead, _GP would be used in an expression. See example below.\nPhase Differential is a term that is used to describe the lead or lag between the master axis and the slave axis due to gradual gear shift\nPd= GR * Cm - Cs where\nPd is the phase differential\nGR is the gear ratio\nCm is the number of encoder counts the master axis moved\nCs is the number of encoder counts the slave moved.",
        "Examples": "\n'Galil DMC Code Example\nGA\n \nDA\nDA\n;\n'   Sets the A axis auxs encoder as the gearing master for the A axis.  \nGD \n1000\n;\n'  Set the distance that the master will travel to 1000 \n'         counts before the gearing is fully engaged for the A \n'         axis slave.\nAI \n-\n1\n;\n'    Wait for input 1 to go low.  In this example, this \n'         input is representing a sensor that senses an object \n'         on a conveyor.  This will trigger the controller to \n'         begin gearing and synchronize the master and slave \n'         axes together.\nGR \n1\n;\n'     Engage gearing between the master and slave\np1\n= \n= \n_TD\nA\nA\n;\n' Sets the current A axis position to variable P1.  This \n'         variable is used in the next command\n#wait\n'         Wait for the aux encoder to move forward 1000 \n'         encoder counts so the gearing engagement period is \n'         complete.  Then the phase difference can be adjusted \n'         for.  Note this example assumes forward motion.\nJP \n#wait\n,\n  \n(\n(\n_TD\nA\nA\n \n<\n \n(\n(\np1\n+\n1000\n)\n)\n)\n)\nIP\n \n_GP\nA\nA\n;\n' Increment the difference to bring the master/slave in \n'         position sync from the point that the GR1 command was \n'         issued.\nEN\n;\n'      End Program \n_GP applies to DMC40x0,DMC42x0,DMC41x3,DMC21x3,DMC18x6,DMC18x2,DMC30010,DMC500x0,DMC52xx0\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "_LF",
        "Usage": [
            {
                "Example": "variable= _LF",
                "Explanation": "Holds a value"
            }
        ],
        "Operands": {
            "Operands": [
                "_LFm"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "The _LF operand contains the state of the forward limit.",
        "Arguments": {
            "Argument": {
                "0": "m"
            },
            "Min": {
                "0": "A"
            },
            "Max": {
                "0": "H"
            },
            "Default": {
                "0": "N/A"
            },
            "Resolution": {
                "0": "Axis"
            },
            "Description": {
                "0": "Axis of forward limit switch"
            },
            "Notes": {
                "0": "nan"
            }
        },
        "Remarks": "\n_LF is an operand only with the following output:\n_LFm = 1 when the limit switch state will allow motion in the positive direction.\n_LFm = 0 when the limit switch state will not allow motion in the positive direction.\nThis operand is not a direct readout of the digital input and is affected by the command CN.\nSee Connecting Hardware in User Manual for active/inactive state\nValues of _LF\nDigital Input activation\n_LF value for CN-1\n_LF value for CN1\nOn. Grounded for TTL, or sufficient activation current flowing for optos.\n0 (forward motion prohibited)\n1 (forward motion allowed)\nOff. \nPullup for TTL, or insufficient activation current flowing for optos.\n1 (forward motion allowed)\n0 (forward motion prohibited)",
        "Examples": "\n'Galil DMC Code Example\nMG\n \n_LF\nA\nA\n;\n' Display the status of the A axis forward limit switch\n_LF applies to DMC40x0,DMC42x0,DMC41x3,DMC21x3,DMC18x6,DMC18x2,DMC30010,DMC500x0,DMC52xx0\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "_LR",
        "Usage": [
            {
                "Example": "variable= _LR",
                "Explanation": "Holds a value"
            }
        ],
        "Operands": {
            "Operands": [
                "_LRm"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "The _LR operand contains the state of the reverse limit.",
        "Arguments": {
            "Argument": {
                "0": "m"
            },
            "Min": {
                "0": "A"
            },
            "Max": {
                "0": "H"
            },
            "Default": {
                "0": "N/A"
            },
            "Resolution": {
                "0": "Axis"
            },
            "Description": {
                "0": "Axis of reverse limit switch"
            },
            "Notes": {
                "0": "nan"
            }
        },
        "Remarks": "\n_LR is an operand with the following output\n_LRm= 1 when the limit switch state will allow motion in the reverse direction.\n_LRm= 0 when the limit switch state will not allow motion in the reverse direction.\nThis operand is not a direct readout of the digital input and is affected by the command CN.\nSee Connecting Hardware in User Manual for active/inactive state\nValues of _LR\nDigital input activation\n_LR value for CN-1\n_LR value for CN1\nOn. Grounded for TTL, or sufficient activation current flowing for optos.\n0 (reverse motion prohibited)\n1 (reverse motion allowed)\nOff. Pullup for TTL, or insufficient activation current flowing for optos.\n1 (reverse motion allowed)\n0 (reverse motion prohibited)",
        "Examples": "\n'Galil DMC Code Example\nMG\n \n_LR\nA\nA\n;\n' Display the status of the A axis reverse limit switch\n_LR applies to DMC40x0,DMC42x0,DMC41x3,DMC21x3,DMC18x6,DMC18x2,DMC30010,DMC500x0,DMC52xx0\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "|",
        "Usage": [
            {
                "Example": "variable = (value1 | value2)",
                "Explanation": "Performs an operation between two values or evaluated statements"
            }
        ],
        "Operands": {},
        "Description": "The | symbol is the bitwise OR operator used with IF, JP, and JS decisions, and also to perform bitwise ORING of values.",
        "Arguments": {
            "Argument": {
                "0": "n"
            },
            "Min": {
                "0": "-2,147,483,648"
            },
            "Max": {
                "0": "2,147,483,647"
            },
            "Default": {
                "0": "N/A"
            },
            "Resolution": {
                "0": "1/65,536"
            },
            "Description": {
                "0": "Value to use with OR operator"
            },
            "Notes": {
                "0": "nan"
            }
        },
        "Remarks": "\nFor IF, JP, and JS, the values used for m are typically the results of logical expressions such as (x > 2) | (y=8)\nThe result of this operation is a value, which is not valid on its own. It must be coupled with a command. See examples below.",
        "Examples": "\n'Galil DMC Code Example\n'Bitwise use\nvar1\n= \n= \n$F\n;\n'00001111\nvar2\n= \n= \n$F0\n;\n'1111000\nMG\n \n(\n(\nvar1\n \n|\n \nvar2\n)\n)\nEN\nREM Returned: 255.0000 (same as 11111111) \n'Galil DMC Code Example\n'Conditional Use\nvar1\n= \n= \n$F\n;\n'00001111\nvar2\n= \n= \n$F0\n;\n'1111000\nIF\n \n(\n(\nvar1\n \n=\n \n$F\n)\n)\n \n|\n \n(\n(\nvar2\n \n=\n \n$F1\n)\n)\n \nMG \n\"True\"\nELSE\n \nMG \n\"False\"\nENDIF\nEN\nREM Returned: True \n| applies to DMC500x0,DMC52xx0,DMC40x0,DMC42x0,DMC41x3,DMC30010,DMC21x3,RIO47xxx,DMC18x6,DMC18x2\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "~",
        "Usage": [],
        "Operands": {},
        "Description": "Variable axis designator. Each variable can be assigned an indivudal axis, a vector plane, or a virtual axis. Motion commands on the variable will then apply\nto the assigned axis.\nCommands supporting variable axes are denoted in this command reference with the following icon.\nVariable axis supported icon",
        "Arguments": [],
        "Remarks": "\n~s contains the axis number as defined by n and can be used in expressions (see example)",
        "Examples": "\n'Galil DMC Code Example\n~a\n~a\n= \n= \n2\n;\n~b\n~b\n= \n= \n6\n;\n'     Sets ~a to 2(Z axis).  Sets ~b to 6 (G axis)\nMG \n\"~a=\"\n,\n~a\n~a\n;\n'    Print axis number\nMG \n\"~b=\"\n,\n~b\n~b\n;\n'    Printe axis number\nPR\n~a\n~a\n= \n= \n1000\n;\n'     Relative position move 1000 counts on ~a variable (set as Z axis)\nJG\n~b\n~b\n= \n= \n9000\n;\n'     Set jog speed of ~b variable (set as G axis) to 9000 cts/sec\nBG \n~a~b\n~a~b\n;\n'        Begin motion on ~a and ~b variables (Z and G) \n~ applies to DMC500x0,DMC52xx0,DMC40x0,DMC42x0,DMC41x3,DMC30010,DMC21x3,DMC18x6,DMC18x2\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "+",
        "Usage": [
            {
                "Example": "variable = (value1 + value2)",
                "Explanation": "Performs an operation between two values or evaluated statements"
            }
        ],
        "Operands": {},
        "Description": "The + symbol is the addition operator. It takes as arguments any two values, variables, array elements, operands, or At functions (@SIN[]) and returns a\nvalue equal to the sum of the arguments.",
        "Arguments": [],
        "Remarks": "\nThis is a binary operator (takes two arguments and returns one value). The result of this operation is a value, which is not valid on its own. It must be\ncoupled with a command. See examples below.\nMathmatical operations are calculated left to right rather than multiplication and division calculations performed prior to addition and subraction.\nExample: \n1+2*3 = 9;' \nnot 7\nIt is recommended that parenthesis be used when more than one mathmatical operation is combined in one command.\nExample: var = ((10*30)+(60/30));' \nevaluates as 302\nvar = 10*30+60/30;' \nevalutes as 12",
        "Examples": "\n'Galil DMC Code Example\n:\nvar1\n \n=\n=\n \n1\n+\n2\n:\nvar2\n \n=\n=\n \nvar1\n \n+\n \n1\n:\nMG\n \nvar2\n \n+\n \n2\n \n6.0000\n:\n+ applies to DMC500x0,DMC52xx0,DMC40x0,DMC42x0,DMC41x3,DMC30010,DMC21x3,DMC18x6,DMC18x2,RIO47xxx\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "<",
        "Usage": [
            {
                "Example": "variable = (value1 < value2)",
                "Explanation": "Performs an operation between two values or evaluated statements"
            }
        ],
        "Operands": {},
        "Description": "\"Less than\" comparator for testing if one value is less than another. Comparators are used in mathematical expressions, IFs, and in conditional jumps. The\nresult is a boolean.\nComparators in DMC Code\nSymbol\nComparator\n<\nLess than\n>\nGreater than\n=\nEqual to\n<=\nLess than or equal to\n>=\nGreater than or equal to\n<>\nNot equal to",
        "Arguments": {
            "Argument": {
                "0": "n0",
                "1": "n1"
            },
            "Min": {
                "0": "-2,147,483,648",
                "1": "-2,147,483,648"
            },
            "Max": {
                "0": "2,147,483,647",
                "1": "2,147,483,647"
            },
            "Default": {
                "0": "N/A",
                "1": "N/A"
            },
            "Resolution": {
                "0": "1/65,536",
                "1": "1/65,536"
            },
            "Description": {
                "0": "Value to test",
                "1": "Value to test"
            },
            "Notes": {
                "0": "nan",
                "1": "nan"
            }
        },
        "Remarks": "\nA comparator is not a command and is not valid individually. Instead, the above expression would be used as part of a jump (JP,JS), IF expression, or\nassignment. See examples below.\nIf n\n0\n < n\n1\n, the expression will evaluate to 1.0000. If the comparision is false, it will evaluate to 0.0000.\nEvaluation occurs left to right. Use parenthesis for operator precedence.",
        "Examples": "\n'Galil DMC Code Example\n:\nbool\n=\n=\n \n(\n(\n1\n<\n2\n)\n)\n:\nMG\n \nbool\n \n1.0000\n:\nbool\n=\n=\n \n(\n(\n1\n<\n0\n)\n)\n:\nMG\n \nbool\n \n0.0000\n:\n'Galil DMC Code Example\nREM Example to find the largest \nREM value in an array\nREM\nREM ***************************\nREM Create an array and fill it\nlen\n=\n=\n \n5\nDM\n \narray\n[\n[\nlen\n]\n]\narray\n[\n[\n0\n]\n]\n=\n=\n \n5\narray\n[\n[\n1\n]\n]\n=\n=\n \n100.0001\narray\n[\n[\n2\n]\n]\n=\n=\n \n42\narray\n[\n[\n3\n]\n]\n=\n=\n \n3.14\narray\n[\n[\n4\n]\n]\n=\n=\n \n100\nJS\n \n#max\n;\n' call max subroutine\nMG\n \n\"Max value is \"\n,\n \nmax\nEN\nREM \nREM ****************************\nREM Find max element in array\n#max\ni\n=\n=\n \n0\nmax\n \n=\n=\n \n-\n2147483648\n;\n' start at min\n#max_h\nIF\n \n(\n(\narray\n[\n[\ni\n]\n]\n \n>\n \nmax\n)\n)\n \nmax\n \n=\n=\n \narray\n[\n[\ni\n]\n]\nENDIF\ni\n=\n=\n \ni\n+\n1\nJP\n \n#max_h\n,\n \n(\n(\ni\n \n<\n \nlen\n)\n)\nEN\nREM\nREM ****************************\nREM Program output\nREM :XQ\nREM :\nREM Max value is 100.0001 "
    },
    {
        "Command": "\u00a92017 Galil Motion Control. Corrections, Feedback: ",
        "Usage": [],
        "Operands": {},
        "Description": "",
        "Arguments": [],
        "Remarks": "",
        "Examples": ""
    },
    {
        "Command": "<=",
        "Usage": [
            {
                "Example": "variable = (value1 <= value2)",
                "Explanation": "Performs an operation between two values or evaluated statements"
            }
        ],
        "Operands": {},
        "Description": "\"Less than or Equal to\" comparator for testing if one value is less than or equal to another. Comparators are used in mathematical expressions, IFs, and in\nconditional jumps. The result is a boolean.\nComparators in DMC Code\nSymbol\nComparator\n<\nLess than\n>\nGreater than\n=\nEqual to\n<=\nLess than or equal to\n>=\nGreater than or equal to\n<>\nNot equal to",
        "Arguments": {
            "Argument": {
                "0": "n0",
                "1": "n1"
            },
            "Min": {
                "0": "-2,147,483,648",
                "1": "-2,147,483,648"
            },
            "Max": {
                "0": "2,147,483,647",
                "1": "2,147,483,647"
            },
            "Default": {
                "0": "N/A",
                "1": "N/A"
            },
            "Resolution": {
                "0": "1/65,536",
                "1": "1/65,536"
            },
            "Description": {
                "0": "Value to test",
                "1": "Value to test"
            },
            "Notes": {
                "0": "nan",
                "1": "nan"
            }
        },
        "Remarks": "\nA comparator is not a command and is not valid individually. Instead, the above expression would be used as part of a jump (JP,JS), IF expression, or\nassignment. See examples below.\nIf n\n0\n <= \nn\n1\n, the expression will evaluate to 1.0000. If the comparision is false, it will evaluate to 0.0000.\nEvaluation occurs left to right. Use parenthesis for operator precedence.",
        "Examples": "\n'Galil DMC Code Example\n:\nbool\n=\n=\n \n(\n(\n1\n \n<=\n \n2\n)\n)\n:\nMG\n \nbool\n \n1.0000\n:\nbool\n=\n=\n \n(\n(\n2\n \n<=\n \n2\n)\n)\n:\nMG\n \nbool\n \n1.0000\n:\nbool\n=\n=\n \n(\n(\n3\n \n<=\n \n2\n)\n)\n:\nMG\n \nbool\n \n0.0000\n:\n'Galil DMC Code Example\nmax\n=\n=\n \n2.05\nmin\n=\n=\n \n1.47\nvalue\n \n=\n=\n \n0.025\nJS\n \n#check\nvalue\n \n=\n=\n \n1.471\nJS\n \n#check\nEN\nREM\nREM *******************************\nREM Determine if in range\n#check\ninrange\n= \n= \n0\nIF\n \n(\n(\n(\n(\nvalue\n \n>=\n \nmin\n)\n)\n \n&\n \n(\n(\nvalue\n \n<=\n \nmax\n)\n)\n)\n)\n \ninrange\n=\n=\n \n1\nENDIF\nIF\n \n(\n(\ninrange\n)\n)\n \nMG\n \n\"Value \"\n,\nvalue\n,\n\" in range\"\nELSE\n  \nMG\n \n\"Value \"\n,\nvalue\n,\n\" NOT in range\"\nENDIF\nEN\nREM\nREM *******************************\nREM Program output\nREM :XQ\nREM :\nREM  Value 0.0250 NOT in range \nREM  Value 1.4710 in range \n<= applies to DMC500x0,DMC52xx0,DMC40x0,DMC42x0,DMC41x3,DMC30010,DMC21x3,DMC18x6,DMC18x2,RIO47xxx\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "<=",
        "Usage": [],
        "Operands": {},
        "Description": "",
        "Arguments": [],
        "Remarks": "",
        "Examples": ""
    },
    {
        "Command": "<>",
        "Usage": [
            {
                "Example": "variable = (value1 <> value2)",
                "Explanation": "Performs an operation between two values or evaluated statements"
            }
        ],
        "Operands": {},
        "Description": "\"Not Equal to\" comparator for testing if one value is not equal to another. Comparators are used in mathematical expressions, IFs, and in conditional\njumps. The result is a boolean.\nComparators in DMC Code\nSymbol\nComparator\n<\nLess than\n>\nGreater than\n=\nEqual to\n<=\nLess than or equal to\n>=\nGreater than or equal to\n<>\nNot equal to",
        "Arguments": {
            "Argument": {
                "0": "n0",
                "1": "n1"
            },
            "Min": {
                "0": "-2,147,483,648",
                "1": "-2,147,483,648"
            },
            "Max": {
                "0": "2,147,483,647",
                "1": "2,147,483,647"
            },
            "Default": {
                "0": "N/A",
                "1": "N/A"
            },
            "Resolution": {
                "0": "1/65,536",
                "1": "1/65,536"
            },
            "Description": {
                "0": "Value to test",
                "1": "Value to test"
            },
            "Notes": {
                "0": "nan",
                "1": "nan"
            }
        },
        "Remarks": "\nA comparator is not a command and is not valid individually. Instead, the above expression would be used as part of a jump (JP,JS), IF expression, or\nassignment. See examples below.\nIf n\n0\n <> \nn\n1\n, the expression will evaluate to 1.0000. If the comparision is false, it will evaluate to 0.0000.\nEvaluation occurs left to right. Use parenthesis for operator precedence.",
        "Examples": "\n'Galil DMC Code Example\n:\nbool\n=\n=\n \n(\n(\n1\n \n<>\n \n2\n)\n)\n:\nMG\n \nbool\n \n1.0000\n:\nbool\n=\n=\n \n(\n(\n2\n \n<>\n \n2\n)\n)\n:\nMG\n \nbool\n \n0.0000 \n'Galil DMC Code Example\nREM Lock out code until\nREM a particular digital\nREM input pattern is detected\n#AUTO\n#AUTO\nJS \n#lock\n;\n'block until pattern\nREM\nREM\nREM Rest of code here\nREM\nREM\nEN\nREM\nREM *************************\n#lock\nJP\n \n#lock\n,\n \n(\n(\n_TI0\n \n<>\n \n170\n)\n)\nEN\n<> applies to DMC500x0,DMC52xx0,DMC40x0,DMC42x0,DMC41x3,DMC30010,DMC21x3,DMC18x6,DMC18x2,RIO47xxx\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "=",
        "Usage": [
            {
                "Example": "variable = (value1 = value2)",
                "Explanation": "Performs an operation between two values or evaluated statements"
            }
        ],
        "Operands": {},
        "Description": "\"Equal to\" comparator for testing if one value is equal to another. Comparators are used in mathematical expressions, IFs, and in conditional jumps. The\nresult is a boolean.\nComparators in DMC Code\nSymbol\nComparator\n<\nLess than\n>\nGreater than\n=\nEqual to\n<=\nLess than or equal to\n>=\nGreater than or equal to\n<>\nNot equal to",
        "Arguments": {
            "Argument": {
                "0": "n0",
                "1": "n1"
            },
            "Min": {
                "0": "-2,147,483,648",
                "1": "-2,147,483,648"
            },
            "Max": {
                "0": "2,147,483,647",
                "1": "2,147,483,647"
            },
            "Default": {
                "0": "N/A",
                "1": "N/A"
            },
            "Resolution": {
                "0": "1/65,536",
                "1": "1/65,536"
            },
            "Description": {
                "0": "Value to test",
                "1": "Value to test"
            },
            "Notes": {
                "0": "nan",
                "1": "nan"
            }
        },
        "Remarks": "\nA comparator is not a command and is not valid individually. Instead, the above expression would be used as part of a jump (JP,JS), IF expression, or\nassignment. See examples below.\nIf n\n0\n = n\n1\n, the expression will evaluate to 1.0000. If the comparision is false, it will evaluate to 0.0000.\nEvaluation occurs left to right. Use parenthesis for operator precedence.",
        "Examples": "\n'Galil DMC Code Example\n:\nbool\n=\n=\n \n(\n(\n1\n=\n0\n)\n)\n:\nMG\n \nbool\n \n0.0000\n:\nbool\n=\n=\n \n(\n(\n3.14\n=\n3.14\n)\n)\n:\nMG\n \nbool\n \n1.0000\n:\n'Galil DMC Code Example\nREM Checks for a digital\nREM input pattern and\nREM sets a bit if matched\n#loop\nIF\n \n(\n(\n_TI0\n \n=\n \n170\n)\n)\n \nSB\n \n1\nELSE\n \nCB\n \n1\nENDIF\nJP \n#loop\n= applies to DMC500x0,DMC52xx0,DMC40x0,DMC42x0,DMC41x3,DMC30010,DMC21x3,DMC18x6,DMC18x2,RIO47xxx\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "=",
        "Usage": [],
        "Operands": {},
        "Description": "The = operator is the assignment operator for the controller. The assignment operator is used for three reasons:\n(1) \nto define and initialize a variable (x = 0) before it is used\n(2) \nto assign a new value to a variable (x = 5)\n(3) \nto print a variable or array element (x= which is equivalent to MG x). MG is the preferred method of printing.",
        "Arguments": {
            "'Galil DMC Code Example\r:x= 5\r:x= ?\r5.0000\r:MG x\r5.0000\r'define and initialize x to 5\r'print x two different ways": {}
        },
        "Remarks": "\nNone",
        "Examples": "\n'Galil DMC Code Example\n:\nx\n= \n= \n5\n:\nx\n= \n= \n?\n?\n \n5.0000\n:\nMG\n \nx\n \n5.0000\n'define and initialize x to 5\n'print x two different ways \n= applies to DMC500x0,DMC52xx0,DMC40x0,DMC42x0,DMC41x3,DMC30010,DMC21x3,RIO47xxx,DMC18x6,DMC18x2\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": ">",
        "Usage": [
            {
                "Example": "variable = (value1 > value2)",
                "Explanation": "Performs an operation between two values or evaluated statements"
            }
        ],
        "Operands": {},
        "Description": "\"Greater than\" comparator for testing if one value is greater than another. Comparators are used in mathematical expressions, IFs, and in conditional\njumps. The result is a boolean.\nComparators in DMC Code\nSymbol\nComparator\n<\nLess than\n>\nGreater than\n=\nEqual to\n<=\nLess than or equal to\n>=\nGreater than or equal to\n<>\nNot equal to",
        "Arguments": {
            "Argument": {
                "0": "n0",
                "1": "n1"
            },
            "Min": {
                "0": "-2,147,483,648",
                "1": "-2,147,483,648"
            },
            "Max": {
                "0": "2,147,483,647",
                "1": "2,147,483,647"
            },
            "Default": {
                "0": "N/A",
                "1": "N/A"
            },
            "Resolution": {
                "0": "1/65,536",
                "1": "1/65,536"
            },
            "Description": {
                "0": "Value to test",
                "1": "Value to test"
            },
            "Notes": {
                "0": "nan",
                "1": "nan"
            }
        },
        "Remarks": "\nA comparator is not a command and is not valid individually. Instead, the above expression would be used as part of a jump (JP,JS), IF expression, or\nassignment. See examples below.\nIf n\n0\n > n\n1\n, the expression will evaluate to 1.0000. If the comparision is false, it will evaluate to 0.0000.\nEvaluation occurs left to right. Use parenthesis for operator precedence.",
        "Examples": "\n'Galil DMC Code Example\n:\nbool\n=\n=\n \n(\n(\n1\n>\n2\n)\n)\n:\nMG\n \nbool\n \n0.0000\n:\nbool\n=\n=\n \n(\n(\n1\n>\n0\n)\n)\n:\nMG\n \nbool\n \n1.0000\n:\n'Galil DMC Code Example\nREM Example to find the largest \nREM value in an array\nREM\nREM ***************************\nREM Create an array and fill it\nlen\n=\n=\n \n5\nDM\n \narray\n[\n[\nlen\n]\n]\narray\n[\n[\n0\n]\n]\n=\n=\n \n5\narray\n[\n[\n1\n]\n]\n=\n=\n \n100.0001\narray\n[\n[\n2\n]\n]\n=\n=\n \n42\narray\n[\n[\n3\n]\n]\n=\n=\n \n3.14\narray\n[\n[\n4\n]\n]\n=\n=\n \n100\nJS\n \n#max\n;\n' call max subroutine\nMG\n \n\"Max value is \"\n,\n \nmax\nEN\nREM \nREM ****************************\nREM Find max element in array\n#max\ni\n=\n=\n \n0\nmax\n \n=\n=\n \n-\n2147483648\n;\n' start at min\n#max_h\nIF\n \n(\n(\narray\n[\n[\ni\n]\n]\n \n>\n \nmax\n)\n)\n \nmax\n \n=\n=\n \narray\n[\n[\ni\n]\n]\nENDIF\ni\n=\n=\n \ni\n+\n1\nJP\n \n#max_h\n,\n \n(\n(\ni\n \n<\n \nlen\n)\n)\nEN\nREM\nREM ****************************\nREM Program output\nREM :XQ\nREM :\nREM Max value is 100.0001 "
    },
    {
        "Command": "\u00a92017 Galil Motion Control. Corrections, Feedback: ",
        "Usage": [],
        "Operands": {},
        "Description": "",
        "Arguments": [],
        "Remarks": "",
        "Examples": ""
    },
    {
        "Command": ">=",
        "Usage": [
            {
                "Example": "variable = (value1 >= value2)",
                "Explanation": "Performs an operation between two values or evaluated statements"
            }
        ],
        "Operands": {},
        "Description": "\"Greater than or Equal to\" comparator for testing if one value is greater than or equal to another. Comparators are used in mathematical expressions, IFs,\nand in conditional jumps. The result is a boolean.\nComparators in DMC Code\nSymbol\nComparator\n<\nLess than\n>\nGreater than\n=\nEqual to\n<=\nLess than or equal to\n>=\nGreater than or equal to\n<>\nNot equal to",
        "Arguments": {
            "Argument": {
                "0": "n0",
                "1": "n1"
            },
            "Min": {
                "0": "-2,147,483,648",
                "1": "-2,147,483,648"
            },
            "Max": {
                "0": "2,147,483,647",
                "1": "2,147,483,647"
            },
            "Default": {
                "0": "N/A",
                "1": "N/A"
            },
            "Resolution": {
                "0": "1/65,536",
                "1": "1/65,536"
            },
            "Description": {
                "0": "Value to test",
                "1": "Value to test"
            },
            "Notes": {
                "0": "nan",
                "1": "nan"
            }
        },
        "Remarks": "\nA comparator is not a command and is not valid individually. Instead, the above expression would be used as part of a jump (JP,JS), IF expression, or\nassignment. See examples below.\nIf n\n0\n >= \nn\n1\n, the expression will evaluate to 1.0000. If the comparision is false, it will evaluate to 0.0000.\nEvaluation occurs left to right. Use parenthesis for operator precedence.",
        "Examples": "\n'Galil DMC Code Example\n:\nbool\n=\n=\n \n(\n(\n1\n \n>=\n \n2\n)\n)\n:\nMG\n \nbool\n \n0.0000\n:\nbool\n=\n=\n \n(\n(\n2\n \n>=\n \n2\n)\n)\n:\nMG\n \nbool\n \n1.0000\n:\nbool\n=\n=\n \n(\n(\n3\n \n>=\n \n2\n)\n)\n:\nMG\n \nbool\n \n1.0000\n:\n'Galil DMC Code Example\nmax\n=\n=\n \n2.05\nmin\n=\n=\n \n1.47\nvalue\n \n=\n=\n \n0.025\nJS\n \n#check\nvalue\n \n=\n=\n \n1.471\nJS\n \n#check\nEN\nREM\nREM *******************************\nREM Determine if in range\n#check\ninrange\n= \n= \n0\nIF\n \n(\n(\n(\n(\nvalue\n \n>=\n \nmin\n)\n)\n \n&\n \n(\n(\nvalue\n \n<=\n \nmax\n)\n)\n)\n)\n \ninrange\n=\n=\n \n1\nENDIF\nIF\n \n(\n(\ninrange\n)\n)\n \nMG\n \n\"Value \"\n,\nvalue\n,\n\" in range\"\nELSE\n  \nMG\n \n\"Value \"\n,\nvalue\n,\n\" NOT in range\"\nENDIF\nEN\nREM\nREM *******************************\nREM Program output\nREM :XQ\nREM :\nREM  Value 0.0250 NOT in range \nREM  Value 1.4710 in range \n>= applies to DMC500x0,DMC52xx0,DMC40x0,DMC42x0,DMC41x3,DMC30010,DMC21x3,DMC18x6,DMC18x2,RIO47xxx\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": ">=",
        "Usage": [],
        "Operands": {},
        "Description": "",
        "Arguments": [],
        "Remarks": "",
        "Examples": ""
    },
    {
        "Command": "AB",
        "Usage": [
            {
                "Example": "AB n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_AB"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "The AB command is a command to issue an abort to controller operation.\nAB (Abort) stops motion instantly without a controlled deceleration. If there is a program operating, AB can also be specified to abort the program and all\nrunning threads. The command, AB, will shut off the motors for any axis in which the off on error function is enabled (see command \"OE\").",
        "Arguments": {
            "Argument": {
                "0": "n",
                "1": "nan"
            },
            "Value": {
                "0": "0",
                "1": "1"
            },
            "Description": {
                "0": "Abort motion and the program operation",
                "1": "Abort motion only"
            },
            "Notes": {
                "0": "Default if omitted",
                "1": "nan"
            }
        },
        "Remarks": "\n_AB gives state of Abort Input, 1 inactive and 0 active.\nAB aborts motion on all axes in motion and cannot stop individual axes.",
        "Examples": "\n'Galil DMC Code Example\n:\nAB\n;\n'     Stops motion\n:\nOE\n*\n*\n=\n=\n \n1\n;\n' Enable off on error on axes\n:\nAB\n;\n'     Shuts off motor command and stops motion \n'Galil DMC Code Example\n#a\n;\n'         Label - Start of program\nJG\n \n20000\n;\n'   Specify jog speed on A-axis\nBG\n \nA\nA\n;\n'       Begin jog on A-axis\nWT\n \n5000\n;\n'    Wait 5000 msec\nAB\n \n1\n;\n'       Stop motion without aborting program\nWT\n \n5000\n;\n'    Wait 5000 milliseconds\nSH \n;\n'         Servo Here\nJP\n \n#a\n;\n'      Jump to Label A\nEN\n;\n'         End of the routine\n'Remember to use the parameter 1 following AB if you only want the motion to be aborted\n'Otherwise, your application program will also be aborted. \nAB applies to DMC500x0,DMC52xx0,DMC40x0,DMC42x0,DMC41x3,DMC30010,DMC21x3,DMC18x6,DMC18x2,RIO47xxx\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "AC",
        "Usage": [
            {
                "Example": "ACm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "AC n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_ACm"
            ],
            "Explanation": "Operand holds the value last set by the command"
        },
        "Description": "The Acceleration command (AC) sets the linear acceleration rate of the motors for independent moves, such as PR, PA, and JG moves. The parameters\nwill be rounded down to the nearest factor of 1024 and have units of counts per second squared.",
        "Arguments": {
            "Argument": {
                "0": "m",
                "1": "nan",
                "2": "n"
            },
            "Min": {
                "0": "A",
                "1": "M",
                "2": "1,024"
            },
            "Max": {
                "0": "H",
                "1": "N",
                "2": "1,073,740,800"
            },
            "Default": {
                "0": "N/A",
                "1": "N/A",
                "2": "256,000"
            },
            "Resolution": {
                "0": "Axis",
                "1": "Axis",
                "2": "1,024"
            },
            "Description": {
                "0": "Axis to assign value",
                "1": "Virtual axis to assign\rvalue",
                "2": "Acceleration rate"
            },
            "Notes": {
                "0": "nan",
                "1": "nan",
                "2": "At TM 1000. Resolution and Min depend on TM, see\rremarks."
            }
        },
        "Remarks": "\nThe DC command is used to designate deceleration\nSpecify realistic acceleration rates based on physical system parameters such as:\nmotor torque rating\nloads\namplifier current rating\nSpecifying an excessive acceleration will cause a large following error during acceleration and the motor will not follow the commanded profile\nThe acceleration feedforward command (FA) will help minimize the error for aggressive accelerations\nResolution\nThe Min and Resolution depend on the sampling period of the control loop (TM). The equation to calculate these values is:\nResolution = Min = 1024*(1000/TM)^2\nexample:\nWith TM 500 the minimum AC setting and resolution is 4096 counts/second^2\nresolution = 1024*(1000/500)^2 = 4096",
        "Examples": "\n'Galil DMC Code Example\nREM Set A-axis acceleration to 150000, B-axis to 200000 counts/sec2, the C axis to 300000 counts/sec2, and the D-axis to 400000 count/sec2.\nAC\n \n150000\n,\n200000\n,\n300000\n,\n400000\na\n=\n=\n \n_AC\nB\nB\n;\n' Assigns the B acceleration to the variable a \nAC applies to DMC40x0,DMC42x0,DMC41x3,DMC21x3,DMC18x6,DMC18x2,DMC30010,DMC500x0,DMC52xx0\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "AD",
        "Usage": [
            {
                "Example": "ADm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "AD n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {},
        "Description": "Trippoint to block command execution until a given distance is traversed. This is a profiled trippoint which means it depends on the motion profiler and not\nthe actual motor encoder. AD can only be used when there is commanded motion on the axis.",
        "Arguments": {
            "Argument": {
                "0": "m",
                "1": "n"
            },
            "Min": {
                "0": "A",
                "1": "0"
            },
            "Max": {
                "0": "H",
                "1": "2,147,483,647"
            },
            "Default": {
                "0": "N/A",
                "1": "N/A"
            },
            "Resolution": {
                "0": "Axis",
                "1": "1"
            },
            "Description": {
                "0": "Axis to assign value",
                "1": "Distance of motion"
            },
            "Notes": {
                "0": "nan",
                "1": "Cannot specify more than 1 argument at a time"
            }
        },
        "Remarks": "\nAD will hold up the execution of the following command until one of the following conditions have been met\nThe commanded motor position crosses the specified relative distance from the start of the move\nThe motion profiling on the axis is complete\nIf in jog (JG) mode, the commanded motion is in the direction which moves away from the specified position\nNot valid for a slave during ECAM or Gearing, use MF and MR\nIf the direction of motion is reversed when in PT mode, the starting position for AD is reinitialized to the position at which the motor is reversed\nThe AD command is accurate to the number of counts that occur in 2*TM msec\nAD command will be affected when the motion smoothing time constant, IT, is not 1. See IT command for further information\nAD measures incremental distance from start of move on one axis",
        "Examples": "\n'Galil DMC Code Example\n#a\nDP\n \n0\n,\n0\n;\n'                  Zero position\nPR\n \n10000\n,\n20000\n;\n'          Specify position relative moves\nBG\n \n;\n'                     Begin motion\nAD\n \n5000\n;\n'                 After A reaches 5000\nMG\n \n\"Halfway to A\"\n;\nTP\n \nA\nA\n;\n'  Send message\nAD\n \n,\n10000\n;\n'               After B reaches 10000\nMG\n \n\"Halfway to B\"\n;\nTP\n \nB\nB\n;\n'  Send message\nEN\n;\n'                      End Program \nAD applies to DMC40x0,DMC42x0,DMC41x3,DMC21x3,DMC18x6,DMC18x2,DMC30010,DMC500x0,DMC52xx0\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "AF",
        "Usage": [
            {
                "Example": "AFm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "AF n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_AFm"
            ],
            "Explanation": "Operand holds the value last set by the command"
        },
        "Description": "The AF command configures analog feedback mode for the PID filter.\nThe controller ADC can be used as position feedback for the axis control law. The analog input used for feedback is fixed and uses the input that\ncorresponds with the axis letter. For example, Analog input 1 is used for the A axis.\nSinusoidal feedback encoders are also configured by the AF command.",
        "Arguments": {
            "Argument": {
                "0": "m",
                "1": "n",
                "2": "nan"
            },
            "Min": {
                "0": "A",
                "1": "0",
                "2": "5"
            },
            "Max": {
                "0": "H",
                "1": "1",
                "2": "12"
            },
            "Default": {
                "0": "N/A",
                "1": "0",
                "2": "0"
            },
            "Resolution": {
                "0": "Axis",
                "1": "1",
                "2": "1"
            },
            "Description": {
                "0": "Axis to assign value",
                "1": "Use the controller ADC as servo feedback",
                "2": "Sinusoidal encoder input used with 2^n interpolation\rcounts per encoder cycle"
            },
            "Notes": {
                "0": "nan",
                "1": "1= analog, 0= digital\rfeedback",
                "2": "ICM-42100 required to use\rsine feedback"
            }
        },
        "Remarks": "\nBelow is the feedback in counts decoded by the controller hardware when reading in analog feedback for certain analog input ranges.\n12 Bit ADC\n16 Bit ADC\n+/-5 V, +/-10 V\n-2048 to 2047 counts\n-32768 to 32767 counts\n0-5 V, 0-10 V\n0 to 4095 counts\n0 to 65535 counts\nThe analog voltage range is set using the AQ command. AQ must be set prior to setting AF\nThe analog feedback is decoded by a 12-bit A/D converter. An upgrade option is available for 16-bits.\nICM-42100 required to use sine feedback\nDifferential encoder inputs must be used when using digital encoders with the ICM-42100. Consult the factory for single-ended use.\nWhen using Sin/Cos encoders (AF5-12)\nThe encoder must be connected to the controller prior to issuing the AF command.\nTP will provide position resolution of 2\n(_AFm)\n counts per cycle. One cycle is four quadrature counts.\nFor example, if an encoder shows a change in TP of 8000 counts with AF0. The same distance at AF 5 would be give by 8000/4 * 2\n5\n =\n64000",
        "Examples": "\n'Galil DMC Code Example\nAF\n \n1\n;\n'          Analog feedback on A axis\nv1\n=\n=\n \n_AF\nA\nA\n;\n'      Assign feedback type to variable\nKP\n \n1\n;\n'          Assigns PID's for motor using analog feedback on A-axis   \nKD\n \n10\n;\n'\nKI\n \n0.5\n;\n' \n'Galil DMC Code Example\nAF\n \n12\n;\n'         Sets sine/consine feedback to 2^12= 4096 counts/period\nAF\n \n8\n;\n'          Sets sine/cosine feedback to 2^8= 256 counts/period \nAF applies to DMC500x0,DMC40x0,DMC42x0,DMC41x3,DMC30010,DMC21x3,RIO47xxx,DMC18x6,DMC18x2\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "AG",
        "Usage": [
            {
                "Example": "AGm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "AG n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_AGm"
            ],
            "Explanation": "Operand holds the value last set by the command"
        },
        "Description": "The AG command sets the amplifier current/voltage gain for the internal amplifier. \nNote: some Galil internal amplifiers have fixed gains. \nPlease reference the\nmanual or data-sheet for more details.",
        "Arguments": {
            "Argument": {
                "0": "m",
                "1": "n"
            },
            "Min": {
                "0": "A",
                "1": "0"
            },
            "Max": {
                "0": "H",
                "1": "3"
            },
            "Default": {
                "0": "N/A",
                "1": "1"
            },
            "Resolution": {
                "0": "Axis",
                "1": "1"
            },
            "Description": {
                "0": "Axis to assign value",
                "1": "Gain setting"
            },
            "Notes": {
                "0": "nan",
                "1": "See table in Remarks for gain settings"
            }
        },
        "Remarks": "\nGain settings by Amplifier (Amps/Volt)\nGain Setting, n=\n0\n1\n2\n3\nAMP-43040\n0.4\n0.7\n1\nN/A\nAMP-43240\n0.5\n1\n2\nN/A\nAMP-43540\n0.4\n0.8\n1.6\nN/A\nAMP-43740\n0.8\n1.6\n3.2\nN/A\nGain settings by Amplifier (Amps per phase)\nGain Setting, n=\n0\n1\n2\n3\nSDM-44140\n0.5\n1\n2\n3\nSDM-44040\n0.5\n0.75\n1\n1.4\nThe axis must be in the motor off state (MO) before setting AG\nThe MT command must be issued prior to the AG command to set the proper range",
        "Examples": "\n'Galil DMC Code Example\nST\n \n;\n'      Stop any motion\nAM\n \n;\n'      Wait for motion to decel and stop\nMO\n \n;\n'      Turn motor off\nMT\n \n1\n;\n'     Set the A axis as a servo\nAG\n \n2\n;\n'     Sets the highest amplifier gain for A axis on servo amplifier\nBN\n;\n'      Save AG setting to EEPROM \nAG applies to DMC500x0,DMC40x0,DMC41x3,DMC30010,DMC21x3\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "AI",
        "Usage": [
            {
                "Example": "AI n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {},
        "Description": "The AI command is a trippoint used in motion programs to wait until after a specified input has changed state. This command can be configured such that\nthe controller will wait until the input goes high or the input goes low.",
        "Arguments": [],
        "Remarks": "\nThe AI command actually halts execution until specified input is at desired logic level. Use the conditional Jump command (JP) or input interrupt (II) if\nyou do not want the program sequence to halt.\nAI functions only on local input points. See Example below for network based digital inputs.",
        "Examples": "\n'Galil DMC Code Example\n#a\n;\n'         Begin Program\nAI\n \n8\n;\n'       Wait until input 8 is high\nSP\n \n10000\n;\n'   Speed is 10000 counts/sec\nAC\n \n20000\n;\n'   Acceleration is 20000 counts/sec2\nPR\n \n400\n;\n'     Specify position\nBG \nA\nA\n;\n'        Begin motion\nEN\n;\n'         End Program \n'Galil DMC Code Example\nREM When using a remote I/O device (e.g. the RIO), the following provides\nREM a similar function as AI. Assume that the remote device is already\nREM configured on handle C (see IH)\n'code before\nJS\n \n#remote\n;\n' this call blocks and waits for the remote logic to return\n'code after\nEN\n'***** The example subroutine *****\n#remote\nWT \n10\n;\n' wait a reasonable interval so we don't flood the network\nJP \n#remote\n,\n(\n(\n@IN\n[\n[\n3001\n]\n]\n \n=\n \n1\n)\n)\n;\n'loop while input 1 on the remote device is high\nEN\n;\n' return to calling code.\nAI applies to DMC500x0,DMC52xx0,DMC40x0,DMC42x0,DMC41x3,DMC30010,DMC21x3,DMC18x6,DMC18x2,RIO47xxx\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "AL",
        "Usage": [
            {
                "Example": "AL mm",
                "Explanation": "Argument is an axis mask"
            }
        ],
        "Operands": {
            "Operands": [
                "_ALm"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "The AL command enables the latch function (high speed main or auxiliary position capture) of the controller. When the position latch is armed, the main\nor auxiliary encoder position will be captured upon a low going signal from the specified digital input.",
        "Arguments": {
            "Argument": {
                "0": "mm",
                "1": "mm",
                "2": "mm"
            },
            "Min": {
                "0": "A",
                "1": "SA",
                "2": "TA"
            },
            "Max": {
                "0": "ABCDEFGH",
                "1": "SASBSCSDSESFSGSH",
                "2": "TATBTCTDTETFTGTH"
            },
            "Default": {
                "0": "N/A",
                "1": "N/A",
                "2": "N/A"
            },
            "Resolution": {
                "0": "Multi-Axis\rMask",
                "1": "Multi-Axis\rMask",
                "2": "Multi-Axis\rMask"
            },
            "Description": {
                "0": "Encoder to latch",
                "1": "Encoder to latch",
                "2": "Index input to\rtrigger latch"
            },
            "Notes": {
                "0": "Latch main encoder",
                "1": "Latch aux encoder",
                "2": "Main encoder is latched from the index pulse\rinstead of a digital input"
            }
        },
        "Remarks": "\nLatch input by Axis\nAxis\nLatch Input\nA\nInput 1\nB\nInput 2\nC\nInput 3\nD\nInput 4\nE\nInput 9\nF\nInput 10\nG\nInput 11\nH\nInput 12\nThe command RL returns the latched position\n_ALm contains the state of the specified latch. 0 = not armed, 1 = armed\nThe CN command can be used to change the polarity of the latch function\nThe latch function is available on incremental quadrature encoder inputs only. For other position capture methods contact Galil.",
        "Examples": "\n'Galil DMC Code Example\n#start\nAL\n \nA\nA\n;\n'              Arm A-axis latch\nJG\n \n50000\n;\n'          Set up jog at 50000 counts/sec\nBG\n \nA\nA\n;\n'              Begin the move\n#loop\n;\n'             Loop until latch has occurred\nJP\n \n#loop\n,\n(\n(\n_AL\nA\nA\n=\n1\n)\n)\nRL\n \nA\nA\n;\n'              Transmit the latched position\nEN\n;\n'                End of program \n'Galil DMC Code Example\nREM Homing routine using the AL command to detect the Motor's index position\n#start\nAL\n \nTA\nTA\n;\n'              Arm A-axis latch. Latch will trigger off the index pulse\nJG\n \n50000\n;\n'           Set up jog at 50000 counts/sec\nBG\n \nA\nA\n;\n'               Begin the move\n#loop\n;\n'              Loop until latch has occurred\nJP\n \n#loop\n,\n(\n(\n_AL\nA\nA\n=\n1\n)\n)\nST \nA\nA\n;\n'                Stop the jog\nAM \nA\nA\nPA\nA\nA\n= \n= \n_RL\nA\nA\n;\n'           Set up a move to return to the latched position\nBG \nA\nA\nAM \nA\nA\nWT \n100\n;\n'              Allow for settling.\nREM Checking that KI has eliminated error (TE) would be more thorough\nDP \n0\n;\n'                Zero position\nMG\n \n\"A Homed\"\n;\n'       Report status\nEN\n;\n'                 End of program \n'Galil DMC Code Example\nREM manual find index using latch off of index pulse using variable axes\n#index\n'settings\n~a\n~a\n= \n= \n0\n;\n'axis number\ns1spd\n= \n= \n10000\n;\n'stage 1 speed\ns2spd\n= \n= \n1000\n;\n'stage 2 speed"
    },
    {
        "Command": "JG",
        "Usage": [],
        "Operands": {},
        "Description": "",
        "Arguments": {
            "EN": {},
            "Unnamed: 0": {}
        },
        "Remarks": "",
        "Examples": ""
    },
    {
        "Command": "AM",
        "Usage": [
            {
                "Example": "AM mm",
                "Explanation": "Argument is an axis mask"
            }
        ],
        "Operands": {},
        "Description": "The AM command is a trippoint used to control the timing of events. This command will hold up execution of the following commands until the current\nmove on the specified axis or axes is completed. Any combination of axes or a motion sequence may be specified with the AM command.\nFor example, AM AB waits for motion on both the A and B axis to be complete. AM with no parameter specifies that motion on all axes to be complete.",
        "Arguments": [],
        "Remarks": "\nAM is a very important command for controlling the timing between multiple move sequences.\nFor example, if the A-axis is in the middle of a position relative move (PR) you cannot make a position absolute move (PAA, BGA) until the first\nmove is complete. Use AMA to halt the program sequence until the first profiled motion is complete.\nAM tests for profile completion only. The actual motor may still be moving. To halt the program sequence until the actual physical motion has\ncompleted, use the MC command.\nTo test motion complete without halting the program sequence, use the operand _BGn, which will be zero when profiled motion is complete\n(see BG command).",
        "Examples": "\n'Galil DMC Code Example\n#move\n;\n                 \n'Program MOVE\nPR\n \n5000\n,\n5000\n,\n5000\n,\n5000\n;\n'Position relative moves\nBG\n \nA\nA\n;\n                  \n'Start the A-axis\nAM\n \nA\nA\n;\n                  \n'After the move is complete on A,\nBG\n \nB\nB\n;\n                  \n'Start the B-axis\nAM\n \nB\nB\n;\n                  \n'After the move is complete on B,\nBG\n \nC\nC\n;\n                  \n'Start the C-axis\nAM\n \nC\nC\n;\n                  \n'After the move is complete on C\nBG\n \nD\nD\n;\n                  \n'Start the D-axis\nAM\n \nD\nD\n;\n                  \n'After the move is complete on D\nEN\n;\n                    \n'End of Program \nAM applies to DMC40x0,DMC42x0,DMC41x3,DMC21x3,DMC18x6,DMC18x2,DMC30010,DMC500x0,DMC52xx0\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "AO",
        "Usage": [
            {
                "Example": "AO n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {},
        "Description": "The AO command sets the analog outputs on the Galil or for a Modbus Slave.",
        "Arguments": {
            "Argument": {
                "0": "n0",
                "1": "n1"
            },
            "Min": {
                "0": "1,000",
                "1": "-9.9998"
            },
            "Max": {
                "0": "8,999",
                "1": "9.9998"
            },
            "Default": {
                "0": "N/A",
                "1": "N/A"
            },
            "Resolution": {
                "0": "1",
                "1": "20/65,536"
            },
            "Description": {
                "0": "Set Analog Output on Modbus\rSlave",
                "1": "Analog Output Voltage"
            },
            "Notes": {
                "0": "See \"Using AO with a Modbus Slave\" in\rRemarks",
                "1": "nan"
            }
        },
        "Remarks": "\nn\n1\n-9.9998\n9.9998\nN/A\n20/65,536\nAnalog Output Voltage\nRemarks\nUsing AO with a Modbus Slave\nRIO as Modbus Slave\n3rd Party Modbus Slave Device\nn\n0\n is the I/O number calculated using the following equations:\nn\n0\n = (HandleNum*1000) + ((Module-1)*4) + (Bitnum-1)\nHandleNum is the handle specifier from A to H.\nHandle must be assigned to port 502 for Modbus comms (See IH)\nModule is the position of the module in the rack from 1 to 16.\nBitNum is the I/O point in the module from 1 to 4",
        "Examples": "\n'Galil DMC Code Example\n:\nAO\n \n3005\n,\n3.2\n;\n'          Outputs 3.2 Volts on Channel 5 of the Device connected to Handle C \nAO applies to DMC500x0,DMC52xx0,DMC40x0,DMC42x0,DMC41x3,DMC30010,DMC21x3,RIO47xxx,RIO574x0\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "AP",
        "Usage": [
            {
                "Example": "APm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "AP n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {},
        "Description": "The AP command will hold up the execution of the following command until the actual motor position crosses the specified position. This trippoint does not\nrely on the profiler, but on actual encoder position.",
        "Arguments": {
            "Argument": {
                "0": "m",
                "1": "n"
            },
            "Min": {
                "0": "A",
                "1": "-2,147,483,648"
            },
            "Max": {
                "0": "H",
                "1": "2,147,483,647"
            },
            "Default": {
                "0": "N/A",
                "1": "N/A"
            },
            "Resolution": {
                "0": "Axis",
                "1": "1"
            },
            "Description": {
                "0": "Axis to assign value",
                "1": "Position trippoint value"
            },
            "Notes": {
                "0": "nan",
                "1": "Only one axis may be specified at a time."
            }
        },
        "Remarks": "\nFor AP command to clear, one of the following conditions have been met:\nThe actual motor position crosses the specified absolute position.\nThe motion profiling on the axis is complete.\nThe commanded motion is in the direction which moves away from the specified position.\nThe units of the command are quadrature counts.\nWhen using a stepper motor, the AP trippoint condition is satisfied when the stepper position (TD) has crossed the specified position.\nFor further information see Chapter 6 of the User Manual \"Stepper Motor Operation\".\nNot valid for a slave during ECAM or Gearing - use MF and MR.\nThe motion profiler must be active before the AP command is used.\nAP is accurate to the number of counts that occur in 2*TM msec\nAP tests for absolute position. \nUse the AD command to measure incremental distances.",
        "Examples": "\n'Galil DMC Code Example\n#test\n;\n' Program B\nDP \n0\n;\n' Define zero\nJG\n \n1000\n;\n' Jog mode (speed of 1000 counts/sec)\nBG\n \nA\nA\n;\n' Begin move\nAP\n \n2000\n;\n' After passing the position 2000\nv1\n= \n= \n_TP\nA\nA\n;\n' Assign V1 A position\nMG\n \n\"Position is\"\n,\n \nv1\n=\n;\n' Print Message\nST \n;\n' Stop\nEN\n;\n' End of Program \nAP applies to DMC40x0,DMC42x0,DMC41x3,DMC21x3,DMC18x6,DMC18x2,DMC30010,DMC500x0,DMC52xx0\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "AQ",
        "Usage": [
            {
                "Example": "AQ n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_AQ1",
                "_AQ2",
                "_AQ3",
                "_AQ4",
                "_AQ5",
                "_AQ6",
                "_AQ7",
                "_AQ8"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "The AQ command is used to set the behavior of the analog inputs. This command will set the analog range and operation for the specified input.",
        "Arguments": {
            "Argument": {
                "0": "n0",
                "1": "n1",
                "2": "nan"
            },
            "Min": {
                "0": "1",
                "1": "1",
                "2": "-4"
            },
            "Max": {
                "0": "8",
                "1": "4",
                "2": "-1"
            },
            "Default": {
                "0": "N/A",
                "1": "2",
                "2": "N/A"
            },
            "Resolution": {
                "0": "1",
                "1": "1",
                "2": "1"
            },
            "Description": {
                "0": "Analog input channel",
                "1": "Analog range setting",
                "2": "Specify analog input is differential"
            },
            "Notes": {
                "0": "nan",
                "1": "See Table Below",
                "2": "See Remarks"
            }
        },
        "Remarks": "\nAQ is a configuration command which must be set at the begining of application code.\nThe usage of this command depends on the type of analog inputs present on the particular RIO model, check the ID command to determine the\nhardware configuration.\nConfigurable Analog Input Settings\nArgument\nValue\nDescription\nNotes\nn\n1\n1\n-5 to +5 VDC\n2\n-10 to +10 VDC\nDefault\n3\n0 to 5 VDC\n4\n0 to10 VDC\nDefault resolution for analog inputs is 12bits. 16 bit is optional.\nOperands _AQ1 through _AQ8 return the setting for the specified input\nSetting a negative n\n1\n for inputs 1,3,5 or 7, configures those inputs as the differential input relative to input 2,4,6 and 8 respectively.\nDifferential Input Mapping (-n\n1\n)\nInput (n\n0\n)\nCompliment (n\n0\n + 1)\n1\n2\n3\n4\n5\n6\n7\n8\nPosition Range when in Analog Feedback by AQ\nArgument\nValue\nAnalog Range\nPosition Range (12 bit)\nPosition Range (16 bit)\nn\n1\n1\n+5 to -5 VDC\n-2048 to 2047\n-32,768 to 32767\n2\n+10 to -10 VDC\n-2048 to 2047\n-32,768 to 32767\n3\n0 to 5 VDC\n0 to 4095\n0 to 65535\n4\n0 to10 VDC\n0 to 4095\n0 to 65535",
        "Examples": "\n'Galil DMC Code Example\n:\nAQ \n2\n,\n3\n;\n'      Specify analog input 2 as 0-5V\n:\nAQ \n1\n,\n-\n3\n;\n'     Specify analog input 1 as 0-5V and the differential input to analog input 2\n:\nMG \n_AQ2\n \n3.0000 \nAQ applies to DMC500x0,DMC40x0,DMC42x0,DMC41x3,DMC30010,DMC21x3,RIO47xxx,DMC52xx0,RIO574x0\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "AR",
        "Usage": [
            {
                "Example": "ARm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "AR n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {},
        "Description": "The After Relative (AR) command is a trippoint used to control the timing of events. This command will hold up the execution of the following command\nuntil one of the following conditions have been met: \n1. \nThe commanded motor position crosses the specified relative distance from either the start of the move or the last AR or AD command. \n2. \nThe motion profiling on the axis is complete.\n3. \nIf in jog (JG) mode, the commanded motion is in the direction which moves away from the specified position.",
        "Arguments": {
            "Argument": {
                "0": "m",
                "1": "n"
            },
            "Min": {
                "0": "A",
                "1": "-2,147,483,648"
            },
            "Max": {
                "0": "H",
                "1": "2,147,483,647"
            },
            "Default": {
                "0": "N/A",
                "1": "N/A"
            },
            "Resolution": {
                "0": "Axis",
                "1": "1"
            },
            "Description": {
                "0": "Axis to assign value",
                "1": "Relative position for trippoint"
            },
            "Notes": {
                "0": "nan",
                "1": "Only one axis may be specified at a time."
            }
        },
        "Remarks": "\nThe units of the command are quadrature counts.\nWhen using a stepper motor, this condition is satisfied when the stepper position (as determined by the output buffer) has crossed the specified\nRelative Position.\nFor further information see Chapter 6 of the User Manual \"Stepper Motor Operation\".\nIf the direction of the motion is reversed when in position trackig mode (see PT command), the starting point for the trippoint is reinitialized to the\npoint at which the motion reversed.\nThe motion profiler must be active before the AR command is issued.\nNot valid for a slave during ECAM or Gearing - use MF and MR.\nNote: AR will be affected when the motion smoothing time constant, IT, is not 1. See IT command for further information.\nAP is accurate to the number of counts that occur in 2*TM msec\nAR is used to specify incremental distance from last AR or AD command.\nUse AR if multiple position trippoints are needed in a single motion sequence.",
        "Examples": "\n'Galil DMC Code Example\n#a\n;\n'              Begin Program\nDP\n \n0\nJG\n \n50000\n;\n'        Specify speed\nBG\n \nA\nA\n;\n'            Begin motion\n#b\n;\n'              Label\nAR\n \n25000\n;\n'        After passing 25000 counts of relative distance on A-axis\nMG\n \n\"Passed\"\n;\nTP \nA\nA\n;\n' Send message on A-axis\nJP\n \n#b\n;\n'           Jump to Label #B\nEN\n;\n'              End Program \nAR applies to DMC40x0,DMC42x0,DMC41x3,DMC21x3,DMC18x6,DMC18x2,DMC30010,DMC500x0,DMC52xx0\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "AS",
        "Usage": [
            {
                "Example": "AS mm",
                "Explanation": "Argument is an axis mask"
            }
        ],
        "Operands": {},
        "Description": "The AS command is a trippoint that occurs when the generated motion profile has reached the specified speed. This command will hold up execution of\nthe following command until the commanded speed has been reached. The AS command will operate after either accelerating or decelerating.",
        "Arguments": {
            "'Galil DMC Code Example\r#speed;'        Program\rPR 100000;'     Specify position\rSP 10000;'      Specify speed\rBG A;'          Begin A\rAS A;'          After speed is reached\rMG \"At Speed\";' Print Message\rEN;'            End programm": {}
        },
        "Remarks": "\nIf the speed is not reached, the trippoint will be triggered after the speed begins diverging from the AS value.\n'The AS command applies to a trapezoidal velocity profile only with linear acceleration. AS used with Smoothing profiling will be inaccurate.",
        "Examples": "\n'Galil DMC Code Example\n#speed\n;\n'        Program\nPR\n \n100000\n;\n'     Specify position\nSP\n \n10000\n;\n'      Specify speed\nBG\n \nA\nA\n;\n'          Begin A\nAS\n \nA\nA\n;\n'          After speed is reached\nMG\n \n\"At Speed\"\n;\n' Print Message\nEN\n;\n'            End programm \nAS applies to DMC40x0,DMC42x0,DMC41x3,DMC21x3,DMC18x6,DMC18x2,DMC30010,DMC500x0,DMC52xx0\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "AT",
        "Usage": [
            {
                "Example": "AT n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {},
        "Description": "The AT command is a trippoint which is used to hold up execution of the next command until after the specified time has elapsed. The time is measured\nwith respect to a defined reference time. AT 0 establishes the initial reference. AT n specifies n msec from the reference. AT -n specifies n msec from the\nreference and establishes a new reference after the elapsed time period.\nAT n,1 specifies n samples from the reference. This is useful when TM is lowered and faster application loop times are required.",
        "Arguments": [],
        "Remarks": "\nn\n0\n = 0 sets the reference time for AT to the current time.\nn\n0\n > 0 specifies the wait time as the absolute value of n\n0\n from the reference time\nn\n0\n < 0 specified the wait time as the absolute value of n\n0\n from the reference time, and resets the reference time when the trippoint is complete to the\ncurrent time.\nAT -n\n0\n is equivalent to AT n\n0\n; AT (old reference +n\n0\n)",
        "Examples": "\n'Galil DMC Code Example\n'The following commands are sent sequentially\nAT\n \n0\n;\n' Establishes reference time 0 as current time\nAT\n \n50\n;\n' Waits 50 msec from reference 0\nAT\n \n100\n;\n' Waits 100 msec from reference 0\nAT\n \n-\n150\n;\n' Waits 150 msec from reference 0 and sets new reference at 150\nAT\n \n80\n;\n' Waits 80 msec from new reference (total elapsed time is 230 msec) \n'Galil DMC Code Example\n' jog propotional to analog input example with AT in ms\n'AT -n\n#main0\nAT \n0\n;\n'                set time reference for AT command\nJG \n0\n;\nBG \nA\nA\n;\n'            start Jog mode\ngain\n= \n= \n1\n#atloop\n \njgspd\n= \n= \ngain\n*\n@AN\n[\n[\n1\n]\n]\n \nJG\n \njgspd\n \nAT \n-\n100\n;\n'           wait 100 ms from last time reference (last AT-n or AT0)\nREM same functionality would be:\nREM AT -100,0\nREM -or-\nREM AT 100,0;AT0\nJP \n#atloop\n'Galil DMC Code Example\n' jog propotional to analog input example with AT in samples\n' AT n,1\n#main1\nAT \n0\n;\n'                set time reference for AT command\nJG \n0\n;\nBG \nA\nA\n;\n'            start Jog mode\ngain\n= \n= \n1\n#atloop\n \njgspd\n= \n= \ngain\n*\n@AN\n[\n[\n1\n]\n]\n \nJG\n \njgspd\n \nAT\n \n-\n100\n,\n1\n;\n'         wait 100 samples from last time reference (AT0)\nJP \n#atloop\nAT applies to DMC500x0,DMC52xx0,DMC40x0,DMC42x0,DMC41x3,DMC30010,DMC21x3,DMC18x6,DMC18x2,RIO47xxx\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "AU",
        "Usage": [
            {
                "Example": "AUm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "AU n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_AUm"
            ],
            "Explanation": "Operand holds the value last set by the command"
        },
        "Description": "The AU command sets the amplifier current loop gain for internal amplifiers.\nFor Galil Trap amplifiers, the current loop is available in one of two settings. AU also sets the switching mode where available, Chopper vs. Inverter.\nFor Galil Sine amplifiers, the optimal current loop gain setting is determined by the bus voltage supplied to the amplifier and the phase to phase inductance\nof the motor. The table in the Arguments section provides ideal AU settings for common bus voltages and phase to phase inductance.",
        "Arguments": {
            "Argument": {
                "0": "m",
                "1": "n"
            },
            "Min": {
                "0": "A",
                "1": "see Notes"
            },
            "Max": {
                "0": "H",
                "1": "see Notes"
            },
            "Default": {
                "0": "N/A",
                "1": "0"
            },
            "Resolution": {
                "0": "Axis",
                "1": "see Notes"
            },
            "Description": {
                "0": "Axis to assign value",
                "1": "Set amplifier current loop gain\rsetting"
            },
            "Notes": {
                "0": "nan",
                "1": "See table below for setting for your amplifier\rmodel"
            }
        },
        "Remarks": "\nThe AU settings for Galil sine drives are only recommended values for the given bus voltages. For other bus voltages and their recommended settings,\ncontact Galil.\nHigh Current Loop\nUse the higher current loop gain (AU 1 or 1.5) when the phase to phase inductance of the motor is > 5mH with a 24VDC supply, or if the inductance\nis > 10mH with a 48VDC supply.\nChopper Mode\nThe chopper mode is in contrast to the normal inverter mode in which the amplifier sends PWM power to the motor of +/-Vs.\nIn chopper mode, the amplifier sends a 0 to +VS PWM to the motor when moving in the forward direction, and a 0 to -VS PWM to the motor\nwhen moving in the negative direction.\nChopper mode should be used in 2 different scenarios\n1 - The inductance of the motor is 200uH to 500uH\n2 - The application requires a continuous operation at >= 4 Amps of continuous torque at a duty cycle of >= 50%.",
        "Examples": "\n'Galil DMC Code Example\n'settings for trap amps\n:\nAU \n1\n,\n0\n;\n' Sets X-axis to higher loop gain and Y-axis to normal loop gain\n:\nAU\nB\nB\n= \n= \n?\n?\n;\n' Query Y-axis current loop gain\n \n0 \n:\nMG \n_AU\nA\nA\n;\n' Query A axis current loop gain\n \n1 \n'Galil DMC Code Example\n'setting for sine amps\n'BLM inductance = 2.6mH"
    },
    {
        "Command": "AU ",
        "Usage": [],
        "Operands": {},
        "Description": "",
        "Arguments": [],
        "Remarks": "",
        "Examples": ""
    },
    {
        "Command": "AV",
        "Usage": [
            {
                "Example": "AV n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_AVS",
                "_AVT"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "The AV command is used to hold up execution of the next command during coordinated moves such as VP,CR or LI. This trippoint occurs when the path\ndistance of a sequence reaches the specified value. The distance is measured from the start of a coordinated move sequence or from the last AV\ncommand.",
        "Arguments": {
            "Argument": {
                "0": "n0",
                "1": "n1"
            },
            "Min": {
                "0": "0",
                "1": "0"
            },
            "Max": {
                "0": "2,147,483,647",
                "1": "2,147,483,647"
            },
            "Default": {
                "0": "0",
                "1": "0"
            },
            "Resolution": {
                "0": "1",
                "1": "1"
            },
            "Description": {
                "0": "Vector distance to be executed in the S coordinate system",
                "1": "Vector distance to be executed in the T coordinate system"
            },
            "Notes": {
                "0": "nan",
                "1": "nan"
            }
        },
        "Remarks": "\nThe units of the command are quadrature counts.\n_AVS contains the vector distance from the start of the sequence in the S coordinate system\n_AVT contains the vector distance from the start of the sequence in the T coordinate system.",
        "Examples": "\n'Galil DMC Code Example\n#move\n;\n'        Label\nDP\n \n0\n,\n0\nCA \nT\nT\n;\n'          Specify the T coordinate system\nLM \nAB\nAB\n;\n'         Linear move for A,B\nLI\n \n1000\n,\n2000\n;\n' Specify distance\nLI\n \n2000\n,\n3000\n;\n' Specify distance\nLE\nBG \nT\nT\n;\n'          Begin motion in the T coordinate system\nAV\n \n,\n500\n;\n'      After path distance = 500,\nMG\n \n\"Path>500\"\nTP \nAB\nAB\n;\n'         Print position of A and B axes\nEN\n;\n'           End Program\n'Vector Distance is calculated as the square root of the sum of the \n'squared distance for each axis in the linear or vector mode. \nAV applies to DMC40x0,DMC42x0,DMC41x3,DMC21x3,DMC18x6,DMC18x2,DMC30010,DMC500x0,DMC52xx0\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "BA",
        "Usage": [
            {
                "Example": "BA mm",
                "Explanation": "Argument is an axis mask"
            }
        ],
        "Operands": {
            "Operands": [
                "_BAm"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "BA is used to configure the controller for sinusoidal operation.\nGalil Sine Drive Use\nFor axes equipped with a Galil sine drive, BA is used to configure the axis for sinusoidal operation. In addition to BA, BM and BX or BZ must be used to\ninitialize the drive commutation. When using a Galil sine drive, one axis of control is required for one axis of drive. This is in contrast to the paired behavior\nbelow.\nThird-Party Sine Drives Requiring Dual Analog Inputs (Rare)\nIn rare cases, some third-party sinusoidal drives require two analog signals to perform commutation. In this case, the BA command configures the\ncontroller axes for sinusoidal commutation and reconfigures the controller to reflect the actual number of motors that can be controlled. In this\nconfiguration, each axis requires 2 motor command signals. The second motor command signals will always be associated with the highest axis on the\ncontroller. For example a 3 axis controller with A and C configured for sinusoidal commutation will require 5 command outputs (a 5 axis controller), where\nthe second outputs for A and C will be the D and E axes respectively.",
        "Arguments": {
            "Argument": {
                "0": "mm",
                "1": "nan"
            },
            "Min": {
                "0": "A",
                "1": "N"
            },
            "Max": {
                "0": "ABCDEFGH",
                "1": "N"
            },
            "Default": {
                "0": "N/A",
                "1": "N/A"
            },
            "Resolution": {
                "0": "Multi-Axis\rMask",
                "1": "Multi-Axis\rMask"
            },
            "Description": {
                "0": "Axes to initialize for sine amps",
                "1": "Disable sine initialization for all\raxes."
            },
            "Notes": {
                "0": "mm = \"\" removes all axes configured for sine\rcommutation",
                "1": "nan"
            }
        },
        "Remarks": "\nGalil Sine Drive Use\n_BAm will contain a 1 if the BA command has been issued for the speciifed axis, or a 0 if it has not.\nThird-Party Sine Drives Requiring Dual Analog Inputs (Rare)\nIf more than one dual DAC setup is going to be used, both axes must be specified in the same BA command.\n_BAm indicates the axis number of the auxiliary DAC used for the second phase of the selected sinusoidal axis. The axis numbers start with zero for\nthe A axis DAC. If the motor is configured as standard servo or stepper motor, _BAn contains 0.",
        "Examples": "\n'Galil DMC Code Example\nBA\n \nA\nA\n;\n'        Configure axis A for sine amp\nBM\n \n200\n;\n'      Length of electrical cycle in counts--required setting for commutation\nBZ\n \n3\n<\n1000\n;\n'   Commutate motor with BZ method using 3V and timeout after 1000 msec\nSH\n \nA\nA\n;\n'        Enable motor, ready for commands\nEN\n'Galil DMC Code Example\n'this exmaple is exclusively for Third-Party Sine Drives \n'that require Dual Analog Inputs which is rare\n'\n'controller revision string will show DMC4040\nBA \nAB\nAB\nMG \n_BA\nA\nA\n;\n'  will return 2.0000\nMG \n_BA\nB\nB\n;\n'  will return 3.0000\n'Controller revision string will show DMC4020 \nBA applies to DMC500x0,DMC40x0,DMC41x3,DMC30010,DMC21x3,DMC18x6,DMC18x2\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "BB",
        "Usage": [
            {
                "Example": "BBm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "BB n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_BBm"
            ],
            "Explanation": "Operand holds the value last set by the command"
        },
        "Description": "The BB function describes the position offset between the Hall transition point and theta = 0, for a sinusoidally commutated motor. This is used when\ndoing hall initialization of a sine commutated drive.",
        "Arguments": {
            "Argument": {
                "0": "m",
                "1": "n"
            },
            "Min": {
                "0": "A",
                "1": "-359.98"
            },
            "Max": {
                "0": "H",
                "1": "359.98"
            },
            "Default": {
                "0": "N/A",
                "1": "0"
            },
            "Resolution": {
                "0": "Axis",
                "1": "1/32"
            },
            "Description": {
                "0": "Axis to assign value",
                "1": "Phase offset of hall sensors"
            },
            "Notes": {
                "0": "nan",
                "1": "nan"
            }
        },
        "Remarks": "\nThis command must be saved in non-volatile memory to be effective upon reset.",
        "Examples": "\n'Galil DMC Code Example\nBB \n,\n30\n,\n,\n60\n;\n' The offsets for the Y and W axes are 30  and 60  respectively \n'Galil DMC Code Example\nBB\n \n30\n;\n' set offset of 30 degrees for A axis \nBB applies to DMC500x0,DMC40x0,DMC30010,DMC21x3,DMC18x6,DMC18x2\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "BC",
        "Usage": [
            {
                "Example": "BC mm",
                "Explanation": "Argument is an axis mask"
            }
        ],
        "Operands": {
            "Operands": [
                "_BCm"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "The BC command is used to initialize a motor for sine commutation using hall sensors.\nThe function BC monitors the status of the Hall sensors of a sinusoidally commutated motor, and resets the commutation phase upon detecting the first\nhall sensor. This procedure replaces the estimated commutation phase value with a more precise value determined by the hall sensors.",
        "Arguments": {
            "Argument": {
                "0": "mm"
            },
            "Min": {
                "0": "A"
            },
            "Max": {
                "0": "ABCDEFGH"
            },
            "Default": {
                "0": "ABCDEFGH"
            },
            "Resolution": {
                "0": "Multi-Axis Mask"
            },
            "Description": {
                "0": "Axes to initialize with hall commutation"
            },
            "Notes": {
                "0": "nan"
            }
        },
        "Remarks": "\nThe BC command is one of several ways to initialize a Galil sine drive. The table below lists the various methods:\nCommutation of a Galil Sine Drive\nCommand\nDescription\nBC/BI\nUses hall sensors to commutate until a hall transition is encountered. Drive then commutates sinusoidally.\nBX\nUses an algorithm to determine phase angle with minimal motion.\nBZ\nDrives the motor to a known magnetic phase. Drive then commutates sinusoidally.\nSteps for BC sine initialization\n1\n. \nSpecify the axis/axes for initialization with the BA command\n2\n. \nSpecify the number of encoder counts per magnetic phase of the motor with the BM command (see command for examples)\n3\n. \nIssue BI to select the inputs to use as hall inputs.\n4\n. \nServo the motor and verify it holds position\n1\n. \nIf the motor will not servo, verify encoder is functional. If it is, then re-verify hall wiring\n5\n. \nIssue the BC command, then issue a small jog until a hall transition occurs.\n6\n. \nThe motor is now fully commutated based off of the hall sensor feedback.\n7\n. \n(Optional) Use the BB command to correct for hall offsets from true magnetic 0 of the motor.\nOperand Usage\n_BCm contains the state of the Hall sensor inputs. This value should be between 1 and 6. 0 and 7 are invalid hall states.",
        "Examples": "\n'Galil DMC Code Example\nBA \nA\nA\n;\n'      Enable sine drive\nBM\nA\nA\n= \n= \n2000\n;\n' Set brushless modulus to 2000 cnts\nBI\nA\nA\n= \n= \n4\n;\n'    Hall inputs on IN4,5,and 6\nMG \n_BC\nA\nA\n;\n'   Read hall state\nEN\n'Galil DMC Code Example\nREM Example for use with internal sine amp\n#ex\nBA \nA\nA\nBM\nA\nA\n= \n= \n2000\nBI\nA\nA\n= \n= \n-\n1\n;\n'  use hall sensor inputs on the Galil\nBC \nA\nA\n;\n'     enable brushless calibration\nbc\n= \n= \n_BC\nA\nA\n;\n' store hall state\nSH \nA\nA\n;\n'     enable amplifier\nJG\nA\nA\n= \n= \n500\nBG \nA\nA\n;\n'     begin jog\n#hall\n;\nJP \n#hall\n,\n_BC\nA\nA\n=\nbc\n;\n'wait for a hall transition\nST \nA\nA\nMG \n\"Commutation Complete\"\nEN\nBC applies to DMC500x0,DMC40x0,DMC41x3,DMC30010,DMC21x3,DMC18x6,DMC18x2\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "BD",
        "Usage": [
            {
                "Example": "BDm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "BD n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_BDm"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "The BD command sets the commutation phase of a sinusoidally commutated motor manually. When using hall effect sensors, a more accurate value for\nthis parameter can be set by using the command, BC. This command should not be used except when the user is creating a specialized phase initialization\nprocedure.",
        "Arguments": {
            "Argument": {
                "0": "m",
                "1": "n"
            },
            "Min": {
                "0": "A",
                "1": "0"
            },
            "Max": {
                "0": "H",
                "1": "360"
            },
            "Default": {
                "0": "N/A",
                "1": "6"
            },
            "Resolution": {
                "0": "Axis",
                "1": "1/32"
            },
            "Description": {
                "0": "Axis to assign value",
                "1": "Brushless motor angle in degrees"
            },
            "Notes": {
                "0": "nan",
                "1": "nan"
            }
        },
        "Remarks": "\nUsing BD to set a brushless degree overrides the current brushless degrees set by the BZ/BX/BI initialization routines.\nOnce initialized, BD is updated by the firmware to the current brushless degree value.\nn = ? queries the current brushless degrees\n_BDm contains the commutation phase of the specified axis.",
        "Examples": "\n'Galil DMC Code Example\nBD\nA\nA\n= \n= \n100\n;\n'     Set Brushless degrees for A axis to 100\nMG \n_BD\nA\nA\n;\n'      Report the brushless degrees for A axis \nBD applies to DMC500x0,DMC40x0,DMC41x3,DMC30010,DMC21x3,DMC18x6,DMC18x2\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "BG",
        "Usage": [
            {
                "Example": "BG mm",
                "Explanation": "Argument is an axis mask"
            }
        ],
        "Operands": {
            "Operands": [
                "_BGm"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "The BG command starts a motion on the specified axis or sequence.",
        "Arguments": {
            "Argument": {
                "0": "mm",
                "1": "nan",
                "2": "nan"
            },
            "Min": {
                "0": "A",
                "1": "S",
                "2": "M"
            },
            "Max": {
                "0": "ABCDEFGH",
                "1": "T",
                "2": "N"
            },
            "Default": {
                "0": "ABCDEFGH",
                "1": "N/A",
                "2": "N/A"
            },
            "Resolution": {
                "0": "Multi-Axis\rMask",
                "1": "Multi-Axis\rMask",
                "2": "Multi-Axis\rMask"
            },
            "Description": {
                "0": "Axes to begin motion",
                "1": "Vector plane axes to\rbegin motion",
                "2": "Virtual axis to begin\rmotion"
            },
            "Notes": {
                "0": "Any combination of axes is acceptable. BG with no\rarguments begins motion on all axes",
                "1": "Any combination of axes is acceptable",
                "2": "Any combination of axes is acceptable"
            }
        },
        "Remarks": "\nAny combination of Axes, Vector Planes, and Virtual Axes may be mixed to begin motion\nA BG command cannot be executed for any axis in which motion has not completed\nSlaving to a master in gearing mode is an exception. Gearing does not require the axis to profile a motion and therefore Independent moves\nmay be superimposed on top of gearing.\nUse the AM trippoint to wait for motion complete between moves from embedded code.\nFrom host code, use one of the following methods to determine motion is complete\nPoll MG_BGm\nUse the data record (DR/QR)\nUse interrupts (EI), if available\nOperands\n_BGm contains a '0' if motion complete on the specified axis or coordinate system, otherwise contains a '1'\n_BGm can be used from host programs to determine if motion is complete by polling the axes of interest",
        "Examples": "\n'Galil DMC Code Example\nPR\n \n2000\n,\n3000\n,\n,\n5000\n;\n'  Set up for a relative move\nBG\n \n;\n'                 Start the A,B and D motors moving \n'Galil DMC Code Example\nHM\n \n;\n'   Set up for the homing\nBG\n \nA\nA\n;\n'  Start only the A-axis moving \n'Galil DMC Code Example\nJG\n \n1000\n,\n4000\n;\n'   Set up for jog\nBG\n \nB\nB\n;\n'           Start only the B-axis moving \n'Galil DMC Code Example\nbstate\n=\n=\n \n_BG\nB\nB\n;\n'   Assign a 1 to bstate if the B-axis is performing a move \n'Galil DMC Code Example\nVM\n \nAB\nAB\n;\n'         Vector Mode\nVP\n \n1000\n,\n2000\n;\n'  Specify vector position\nVS\n \n20000\n;\n'      Specify vector velocity\nBG\n \nS\nS\n;\n'          Begin coordinated sequence\nVP\n \n4000\n,\n-\n1000\n;\n' Specify vector position\nVE\n;\n'            Vector End \nBG applies to DMC40x0,DMC41x3,DMC30010,DMC21x3,DMC18x6,DMC18x2,DMC42x0,DMC500x0,DMC52xx0\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "BI",
        "Usage": [
            {
                "Example": "BIm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "BI n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_BIm"
            ],
            "Explanation": "Operand holds the value last set by the command"
        },
        "Description": "The BI command is used to define the inputs which are used when Hall sensors have been wired for sinusoidally commutated motors. See the BC\ncommand for more information about initialization of sine amplifiers via hall inputs",
        "Arguments": {
            "Argument": {
                "0": "m",
                "1": "n",
                "2": "nan",
                "3": "nan"
            },
            "Min": {
                "0": "A",
                "1": "-1",
                "2": "17",
                "3": "81"
            },
            "Max": {
                "0": "H",
                "1": "16",
                "2": "46",
                "3": "94"
            },
            "Default": {
                "0": "N/A",
                "1": "0",
                "2": "N/A",
                "3": "N/A"
            },
            "Resolution": {
                "0": "Axis",
                "1": "1",
                "2": "1",
                "3": "1"
            },
            "Description": {
                "0": "Axis to assign value",
                "1": "Select starting General\rinput for hall sensor use",
                "2": "Select starting extended\rinput for hall sensor use",
                "3": "Select starting auxiliary\rencoder input for hall\rsensor use."
            },
            "Notes": {
                "0": "nan",
                "1": "n = -1 uses dedicated hall inputs. n = 0 clears\rconfiguration. Inputs 9-16 only valid for 5-8 axis\rcontroller",
                "2": "See Remarks",
                "3": "nan"
            }
        },
        "Remarks": "\nThe inputs can be the general use inputs, the auxiliary encoder inputs, or the extended I/O inputs. The Hall sensors of each axis must be connected\nto consecutive input lines,\nFor example: BI 3 indicates that inputs 3,4 and 5 are used for halls sensors.\nWhen using extended IO, the bits must be configured as inputs by the CO command for proper operation\nThe Hall A, Hall B and Hall C inputs on the Encoder connector may be specified by setting the BI command to -1.\nWith the AMP-43540 or the AMP-43640, for a motor wired to work with the AMP-43020/43040, the following wiring to the general inputs is used for\ncommutating the halls with the BI n command.\n@IN[n] = Hall B\n@IN[n+1] = Hall C\n@IN[n+2] = Hall A",
        "Examples": "\n'Galil DMC Code Example\nBI \n,\n \n5\n;\n'  The Hall sensor of the Y axis are on inputs 5, 6 and 7. \n'Galil DMC Code Example\nREM Example for use with AMP-43540\n#ex\nBA \nA\nA\nBM\nA\nA\n= \n= \n2000\nBI\nA\nA\n= \n= \n-\n1\n;\n'  use hall sensor inputs on the Galil\nBC \nA\nA\n;\n'     enable brushless calibration\nbc\n= \n= \n_BC\nA\nA\n;\n' store hall state\nJG\nA\nA\n= \n= \n500\nSH \nA\nA\n;\n'     enable servo\nBG \nA\nA\n;\n'     begin jog\n#hall\n;\nJP \n#hall\n,\n_BC\nA\nA\n=\nbc\n;\n'wait for a hall transition\nST \nA\nA\nMG \n\"Commutation Complete\"\nEN\nBI applies to DMC500x0,DMC40x0,DMC41x3,DMC30010,DMC21x3,DMC18x6,DMC18x2\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "BK",
        "Usage": [
            {
                "Example": "BK n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_BK"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "The BK command causes the controller to pause execution of the given thread at the given program line number. When that line is reached, program\nexecution halts before the line is executed, while all other threads continue running. After a breakpoint is encountered, a new breakpoint can be armed (to\ncontinue execution to the new breakpoint) or BK will resume program execution. The SL command can be used to single step from the breakpoint.",
        "Arguments": {
            "Argument": {
                "0": "n0",
                "1": "n0",
                "2": "n1"
            },
            "Min": {
                "0": "0",
                "1": "0",
                "2": "0"
            },
            "Max": {
                "0": "3,999",
                "1": "1,999",
                "2": "7"
            },
            "Default": {
                "0": "N/A",
                "1": "N/A",
                "2": "0"
            },
            "Resolution": {
                "0": "1",
                "1": "1",
                "2": "1"
            },
            "Description": {
                "0": "Line number to set\rbreakpoint",
                "1": "Line number to set\rbreakpoint",
                "2": "Thread number to set\rbreakpoint"
            },
            "Notes": {
                "0": "Firmware Rev 1.2a and later. n = null resumes\rexecution",
                "1": "n = null resumes execution",
                "2": "If n omitted, default value used."
            }
        },
        "Remarks": "\nOnly one breakpoint may be armed at any time.\nBK can be armed before or during thread execution.\nOperand Usage\n_BK will tell whether a breakpoint has been armed, whether it has been encountered, and the program line number of the breakpoint:\n= -LineNumber: \nbreakpoint armed\n= LineNumber: \nbreakpoint encountered\n= -2147483648: \nbreakpoint not armed",
        "Examples": "\n'Galil DMC Code Example\n:\nBK\n \n3\n;\n'    Pause at line 3 (the 4th line) in thread 0\n:\nBK\n \n5\n;\n'    Continue to line 5\n:\nSL\n;\n'      Execute the next line\n:\nSL\n \n3\n;\n'    Execute the next 3 lines\n:\nBK\n;\n'      Resume normal execution \nBK applies to DMC500x0,DMC52xx0,DMC40x0,DMC42x0,DMC41x3,DMC30010,DMC21x3,DMC18x6,DMC18x2,RIO47xxx\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "BL",
        "Usage": [
            {
                "Example": "BLm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "BL n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_BLm"
            ],
            "Explanation": "Operand holds the value last set by the command"
        },
        "Description": "The BL command sets the reverse software limit. If this limit is exceeded during motion, motion on that axis will decelerate to a stop. Reverse motion\nbeyond this limit is not permitted.",
        "Arguments": {
            "Argument": {
                "0": "m",
                "1": "n"
            },
            "Min": {
                "0": "A",
                "1": "-2,147,483,648"
            },
            "Max": {
                "0": "H",
                "1": "2,147,483,647"
            },
            "Default": {
                "0": "N/A",
                "1": "-2,147,483,648"
            },
            "Resolution": {
                "0": "Axis",
                "1": "1"
            },
            "Description": {
                "0": "Axis to assign value",
                "1": "Position for reverse soft limit"
            },
            "Notes": {
                "0": "nan",
                "1": "nan"
            }
        },
        "Remarks": "\nThe reverse limit is activated at the position n-1. n = -2147483648 effectively disables the reverse soft limit\nThe software limit is specified in counts for a servo system or in microsteps for a stepper system.\nWhen the reverse software limit is activated, the automatic subroutine #LIMSWI will be executed if it is included in the program.\nIf motion is commanded when the axis is already passed the BL value, the axis will profile a small move before the software limit is again detected.\nThis is typically encountered when commanding motion in loops, such as a jog loop.\nIn these scenarios it is recommended to use the #LIMSWI routine to stop the loop when the BL limit has been exceeded.",
        "Examples": "\n'Galil DMC Code Example\n#test\n;\n'  Test Program\nAC\n \n1000000\n;\n' Acceleration Rate\nDC\n \n1000000\n;\n' Deceleration Rate\nBL\n \n-\n15000\n;\n' Set Reverse Limit\nJG\n  \n-\n5000\n;\n' Jog Reverse\nBG \nA\nA\n;\n'    Begin Motion\nAM \nA\nA\n;\n'    After Motion (limit occurred)\nTP \nA\nA\n;\n'    Tell Position\nEN\n;\n'     End Program\n'\n'Galil Controllers also provide hardware limits. \nBL applies to DMC40x0,DMC42x0,DMC41x3,DMC21x3,DMC18x6,DMC18x2,DMC30010,DMC500x0,DMC52xx0\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "BM",
        "Usage": [
            {
                "Example": "BMm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "BM n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_BMm"
            ],
            "Explanation": "Operand holds the value last set by the command"
        },
        "Description": "The BM command defines the length of the magnetic cycle in encoder counts.",
        "Arguments": {
            "Argument": {
                "0": "m",
                "1": "n"
            },
            "Min": {
                "0": "A",
                "1": "1"
            },
            "Max": {
                "0": "H",
                "1": "10,000,000"
            },
            "Default": {
                "0": "N/A",
                "1": "2,000"
            },
            "Resolution": {
                "0": "Axis",
                "1": "1/65,536"
            },
            "Description": {
                "0": "Axis to assign value",
                "1": "Encoder counts per magnetic cycle"
            },
            "Notes": {
                "0": "nan",
                "1": "nan"
            }
        },
        "Remarks": "\nFor rotary motors, the magnectic cycle (BM value) is calculated by:\nBM = encoder counts per revolution / # of pole pairs\nThe issuance of BM is required for commutation using one of the following methods:\nBX\nBZ\nBI/BC",
        "Examples": "\n'Galil DMC Code Example\nREM Using Galil's BLM motor specifications as an example\ncts\n=\n=\n \n4000\n;\n'       4000 encoder counts per revolution\npole\n=\n=\n \n2\n;\n'         2 pole pairs (4 poles total)\nBA\n \nA\nA\nBM\nA\nA\n=\n=\n \ncts\n/\npole\n;\n'   Calculation of BM\nBZ\nA\nA\n=\n=\n \n3.5\n;\n'        Commutate using BZ method and 3.5V\nSH\n \nA\nA\nMG\n \n\"Commutation complete.\"\nEN\n'Galil DMC Code Example\nBM\n \n,\n60000\n;\n'      Set brushless modulo for B axis to be 60000\nBM\nC\nC\n= \n= \n100000\n/\n3\n;\n'   Set brushless modulo for C axis to be 100000/3 (33333.333)\nBM\n \n,\n,\n,\n?\n?\n;\n'        Interrogate the Brushless Module for the D axis\n'example calculating brushless modulus using calculated integers\ncts\n= \n= \n4096\n;\n'     Counts per rev\npp\n= \n= \n3\n;\n'         Pole pairs\nBM\nA\nA\n= \n= \ncts\n/\npp\n'Changing the BM parameter causes an instant change in the commutation phase. \nBM applies to DMC500x0,DMC40x0,DMC41x3,DMC30010,DMC21x3,DMC18x6,DMC18x2\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "BN",
        "Usage": [
            {
                "Example": "BN",
                "Explanation": "Command takes no arguments"
            }
        ],
        "Operands": {
            "Operands": [
                "_BN"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "The BN command saves certain board parameters in non-volatile EEPROM memory. Once written to the memory, all parameters which can be burned will\npersist through a software reset (RS command), hardware reset (reset button) or power cycle. This command typically takes 1 second to execute and\nmust not be interrupted. The controller returns a colon (:) when the Burn is complete. All parameters which have been burned into memory can be\nrestored to their factory defaults through a master reset.\nThis command reference will denote comands that can and cannot be burned with BN with the following usage icons.\nBurnable with BN icon\nNot burnable with BN icon",
        "Arguments": [],
        "Remarks": "\nIssuing this command will pause the output of the Data Record until the command is completed.\nThe following table shows the commands that have their parameters saved with the BN command:\nParameters saved during burn\nAC\nBR\nEO\nIK\nMO\nOT\nTM\nAF\nBW\nER\nIL\nMT\nOV\nTR\nAG\nCB\nFA\nIT\nMU\nPF\nVA\nAQ\nCE\nFL\nKD\nNB\nPL\nVD\nBA\nCN\nFV\nKI\nNF\nPW\nVF\nBB\nCO\nGA\nKP\nNZ\nSB\nVS\nBI\nCW\nGM\nKS\nOA\nSM\nYA\nBL\nDC\nGR\nLC\nOE\nSP\nYB\nBM\nDH\nHV\nLD\nOF\nTK\nYC\nBO\nDV\nIA\nLZ\nOP\nTL\nOperand Usage\n_BN contains the serial number of the processor board.",
        "Examples": "\n'Galil DMC Code Example\nSB \n1\n;\n'   Set bit 1\nCB \n2\n;\n'   Clear bit 2\nCW \n1\n;\n'   Set data adjustment bit\nBN\n;\n' Burn all parameter states \nBN applies to DMC500x0,DMC40x0,DMC42x0,DMC41x3,DMC30010,DMC21x3,RIO47xxx,DMC18x6,DMC18x2,RIO574x0,DMC52xx0\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "BO",
        "Usage": [
            {
                "Example": "BOm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "BO n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_BOm"
            ],
            "Explanation": "Operand holds the value last set by the command"
        },
        "Description": "The BO command sets a fixed offset on the command signal for sinusoidally commutated motors. This may be used to offset any bias in the amplifier, or\ncan be used for phase initialization.",
        "Arguments": {
            "Argument": {
                "0": "m",
                "1": "n"
            },
            "Min": {
                "0": "A",
                "1": "-5"
            },
            "Max": {
                "0": "H",
                "1": "5"
            },
            "Default": {
                "0": "N/A",
                "1": "0"
            },
            "Resolution": {
                "0": "Axis",
                "1": "20/65,536"
            },
            "Description": {
                "0": "Axis to assign value",
                "1": "Offset applied to DAC output in volts"
            },
            "Notes": {
                "0": "nan",
                "1": "nan"
            }
        },
        "Remarks": "\nInternal Sine Drive\nWhen using an internal Galil sine drive, each axis has two DACs (Digital to Analog Converter). BO sets the first DAC offset. BQ sets the second.\nExternal Sine Drive\nWhen using a third party, external sine drive, each motor axis requires two control axes. Therefore, for 4 axes of external sine control, an 8 axis\ncontroller is required.\nIn this configuration, BO sets the offset for both DACs. Each member of a pair of axes has its own BO value.\nWhen measuring DAC output voltage, to assure that the output voltage equals the BO parameters, set the PID and OF parameters to zero.",
        "Examples": "\n'Galil DMC Code Example\n'Assume a two axis controller\nBA\n \nA\nA\n;\n' BA allows the control of an external sine drive with the use of two axis. This is now a one axis controller.\n' Axis B is used as the secondary DAC for axis A commutation.\n'\nBO\n \n-\n2\n,\n1\n;\n' Generates the DAC voltage -2 on the first DAC A, and 1 on the second DAC B of a sinusoidally commutated drive. \n'Galil DMC Code Example\n'Assume internal Sine drive\nBO\n \n1\n \n;\n'set A axis first DAC to 1v offset\nBQ\n \n2\n \n;\n'set the A axis second DAC to 2v offset \nBO applies to DMC500x0,DMC40x0,DMC41x3,DMC30010,DMC21x3,DMC18x6,DMC18x2\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "BP",
        "Usage": [
            {
                "Example": "BP",
                "Explanation": "Command takes no arguments"
            }
        ],
        "Operands": {},
        "Description": "The BP command saves the application program in non-volatile EEPROM memory. This command may take several seconds to execute and must not be\ninterrupted. The controller returns a : when the Burn is complete.",
        "Arguments": [],
        "Remarks": "\nIssuing this command will pause the output of the Data Record until the command is completed.\nLegacy Software Note: This command may cause the Galil software to issue the following warning \"A time-out occurred while waiting for a response\nfrom the controller\". This warning is normal and is designed to warn the user when the controller does not respond to a command within the timeout\nperiod.\nThe timeout can be changed in the Galil software but this warning does not affect the operation of the controller or software.",
        "Examples": "\n'Galil DMC Code Example\n:\nBP\n;\n'    Burn in program to controller\n:\n'       Get colon response when done \nBP applies to DMC500x0,DMC52xx0,DMC40x0,DMC42x0,DMC41x3,DMC30010,DMC21x3,DMC18x6,DMC18x2,RIO47xxx\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "BQ",
        "Usage": [
            {
                "Example": "BQm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "BQ n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_BQm"
            ],
            "Explanation": "Operand holds the value last set by the command"
        },
        "Description": "The BQ command sets a fixed offset on the command signal for sinusoidally commutated motors when using an internal Galil sine drive. This may be used\nto offset any bias in the amplifier, or can be used for phase initialization.",
        "Arguments": {
            "Argument": {
                "0": "m",
                "1": "n"
            },
            "Min": {
                "0": "A",
                "1": "-5"
            },
            "Max": {
                "0": "H",
                "1": "5"
            },
            "Default": {
                "0": "N/A",
                "1": "0"
            },
            "Resolution": {
                "0": "Axis",
                "1": "20/65,536"
            },
            "Description": {
                "0": "Axis to assign value",
                "1": "Offset applied to DAC output in volts."
            },
            "Notes": {
                "0": "nan",
                "1": "nan"
            }
        },
        "Remarks": "\nWhen using an internal Galil sine drive, each axis has two DACs (Digital to Analog Converter). BO sets the first DAC offset. BQ sets the second.",
        "Examples": "\n'Galil DMC Code Example\n'Assume internal Sine drive\nBO\n \n1\n;\n'   set A axis first DAC to 1v offset\nBQ\n \n2\n;\n'   set the A axis second DAC to 2v offset \nBQ applies to DMC500x0,DMC40x0,DMC41x3,DMC30010\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "BR",
        "Usage": [
            {
                "Example": "BRm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "BR n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_BRm"
            ],
            "Explanation": "Operand holds the value last set by the command"
        },
        "Description": "The BR command configures the motor configuration and type for an axis.\nThe BR command is used with internal Galil amplifiers to enable which axes will be set as brush-type servos or to configure the firmware to use external\ndrives instead of the internal channel.",
        "Arguments": {
            "Argument": {
                "0": "m",
                "1": "Argument",
                "2": "n",
                "3": "nan",
                "4": "nan"
            },
            "Min": {
                "0": "A",
                "1": "Value",
                "2": "-1",
                "3": "0",
                "4": "1"
            },
            "Max": {
                "0": "H",
                "1": "Description",
                "2": "Configured for external drive",
                "3": "Configured for Brushless servo",
                "4": "Configured for Brush-type servo"
            },
            "Default": {
                "0": "N/A",
                "1": "Notes",
                "2": "Use for external drives with internal sine amps -D3640, -D3540 and -D3520",
                "3": "Default",
                "4": "Use for axes with external drives on -D3040 and -D3020 to avoid hall errors"
            },
            "Resolution": {
                "0": "Axis",
                "1": "nan",
                "2": "nan",
                "3": "nan",
                "4": "nan"
            },
            "Description": {
                "0": "Axis to assign value",
                "1": "nan",
                "2": "nan",
                "3": "nan",
                "4": "nan"
            },
            "Notes": {
                "0": "nan",
                "1": "nan",
                "2": "nan",
                "3": "nan",
                "4": "nan"
            }
        },
        "Remarks": "\nIf an axis has Off-On-Error(OE) set to 1, an amplifier error will occur on an axis if there are no halls and BR is set to 0. Set BR to 1 to avoid an amplifier\nerror state.\nThe hall error bits cannot cause #AMPERR events if an axis is configured as brush-type.\nWith BR1, the hall inputs are available for general use via the QH command.\nNote: If the controller has been previously configured with the BA command for sinusoidal commutation with a Galil internal amplifier, the command\n\"BA N\" must be issued prior to setting the axis to brushed mode.",
        "Examples": "\n'Galil DMC Code Example\nBR\n \n1\n,\n0\n,\n0\n;\n'     Sets X-axis to brush-type, Y and Z to brushless \n'Galil DMC Code Example\nBR\n \n1\n;\n'       Set to brush type, ignore hall errors\nBR\n \n-\n1\n;\n'      Set to external amp \nBR applies to DMC500x0,DMC40x0,DMC41x3,DMC30010,DMC21x3\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "BT",
        "Usage": [
            {
                "Example": "BT mm",
                "Explanation": "Argument is an axis mask"
            }
        ],
        "Operands": {
            "Operands": [
                "_BTm"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "The BT command begins PVT motion on the specified axes. All axes specified will begin at the same time. For more details on PVT mode see the user\nmanual.",
        "Arguments": {
            "Min": {
                "0": "A"
            },
            "Max": {
                "0": "ABCDEFGH"
            },
            "Default": {
                "0": "ABCDEFGH"
            },
            "Resolution": {
                "0": "Multi-Axis Mask"
            },
            "Description": {
                "0": "Axes to begin PVT motion"
            },
            "Notes": {
                "0": "nan"
            }
        },
        "Remarks": "\nFor more details on PVT mode see the user manual.\n_BTm contains the number of PV segments that have executed.",
        "Examples": "\n'Galil DMC Code Example\n:\nMG\n \n_BT\nA\nA\n;\n'           Query number of PVT segments executed\n0.0000 \n:\nPV\nA\nA\n=\n=\n \n100\n,\n200\n,\n100\n;\n'  Command X axis to move 100 counts reaching an ending speed of 200c/s in 100 samples\n:\nPV\nA\nA\n=\n=\n \n100\n,\n0\n,\n100\n;\n'    Command X axis to move another 100 counts reaching an ending speed of 0c/s in 100 samples\n:\nPV\nA\nA\n=\n=\n \n,\n,\n0\n;\n'          Command X axis to exit PVT mode\n:\nBT\n \nA\nA\n;\n'              Begin PVT mode\n:\nMG\n \n_BT\nA\nA\n;\n'           Query number of PVT segments executed\n3.0000\n:\nBT applies to DMC40x0,DMC42x0,DMC41x3,DMC30010,DMC500x0,DMC52xx0\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "BV",
        "Usage": [
            {
                "Example": "BV",
                "Explanation": "Command takes no arguments"
            }
        ],
        "Operands": {
            "Operands": [
                "_BV"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "The BV command saves the controller variables and arrays in non-volatile EEPROM memory. This command typically takes up to 2 seconds to execute\nand must not be interrupted. The controller returns a : when the Burn is complete.",
        "Arguments": {
            "'Galil DMC Code Example\r:BV;'  burn in variables\r:'     colon response returned": {}
        },
        "Remarks": "\n_BV returns the number of controller axes.\nThis command will store the ECAM table values in non-volatile EEPROM memory.\nThis command may cause the Galil software to timeout. This warning is normal and is designed to warn the user when the controller does not respond\nto a command within the timeout period. This occurs because this command takes more time than the default timeout period. The timeout can be\nchanged in the Galil software. This warning does not affect the operation of the board or software.\nIssuing this command will pause the output of the Data Record until the command is completed.",
        "Examples": "\n'Galil DMC Code Example\n:\nBV\n;\n'  burn in variables\n:\n'     colon response returned \nBV applies to DMC500x0,DMC52xx0,DMC40x0,DMC42x0,DMC41x3,DMC30010,DMC21x3,DMC18x6,DMC18x2,RIO47xxx\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "BW",
        "Usage": [
            {
                "Example": "BWm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "BW n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_BWm"
            ],
            "Explanation": "Operand holds the value last set by the command"
        },
        "Description": "The BW command sets the delay between when the brake is turned on and when the amp is turned off. When the controller goes into a motor-off (MO)\nstate, this is the time (in samples) between when the brake digital output changes state and when the amp enable digital output changes state. The brake\nis actuated immediately upon MO and the delay is to account for the time it takes for the brake to engage mechanically once it is energized electrically. The\nbrake is released immediately upon SH.\nBrake Wait Timing\nBrake Wait Timing Diagram",
        "Arguments": [],
        "Remarks": "\nThe Brake Wait does not apply when the motor is shut off due to OE1 (Off on Error). In this case (position error exceeded or Abort triggered) the\nmotor off and brake output will be applied simultaneously.\nSB,CB and OP have no effect on outputs mapped to BW. In order to toggle brake outputs without engaging the servo (e.g. for maintenance), set\nBWm=0 and then use SB and CB as necessary.\nOutputs 1-8 are used for Axes A-H, where output 1 is the brake for axis A and output 2 is the brake for axis B and so on.",
        "Examples": "\n'Galil DMC Code Example\nBW\n \n100\n;\n' Set brake delay to 100 ms (TM1000) for the A axis \nBW applies to DMC40x0,DMC42x0,DMC41x3,DMC30010,DMC500x0,DMC52xx0\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "BX",
        "Usage": [
            {
                "Example": "BXm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "BX n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_BXm"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "The BX command uses a method to initialize an axis with limited movement of the hardware. The BX uses a limited motion algorithm to determine the\nproper location of the motor within the magnetic cycle. It is expected to move no greater than 10 degrees of the magnetic cycle. The last stage of the BX\ncommand will lock the motor into the nearest 15 degree increment.",
        "Arguments": {
            "_BXm": {},
            "Operand has special meaning, see Remarks": {}
        },
        "Remarks": "\n_BXm contains 0 if axis m is not a Galil sine amp axis, contains 1 if axis m is an uninitialized sine amp axis, and contains 3 if axis m is an initialized sine\namp axis\nAn axis with a Galil sine amp powers up in MO state and SH will generate an error for that axis until it is initialized.\nWhile the BX command is executing, communication to and from the controller will be halted. This may result in a timeout if the BX command is sent\nfrom the host*. Embedded code execution will also pause during BX operation.\nThe long timeout (-l) for GalilTools 1.5.0 has been increased to prevent a timeout while using the BX command.\nIf the BX command failes to initialize an axis, it will return an error code of 160. TC1 will return \"160 BX Command Failure\".\nIssuing this command will pause the output of the Data Record until the command is completed.\nBX initialization is valid with the following internal amplifiers:\nAMP-43540\nAMP-43520\nAMP-43640\nThere are several methods to initialize a motor with the Galil sine amplifier. They are listed below:\nCommutation of a Galil Sine Drive\nCommand\nDescription\nBC/BI\nUses hall sensors to commutate until a hall transition is encountered. Drive then commutates sinusoidally.\nBX\nUses an algorithm to determine phase angle with minimal motion.\nBZ\nDrives the motor to a known magnetic phase. Drive then commutates sinusoidally.\nBX Initialization Steps\n1\n. \nSet axes enabled for sine amp with the BA command\n2\n. \nSet motor modulo with the BM command.\n3\n. \nSet OE1 for motor runaway.\n4\n. \nIssue BX1 to test at smaller voltage\n1\n. \nIf error code 160 occurs, try a larger voltage. If motion is occuring, then check that the encoder is working. Ensure that the timeout time is\nlong enough for BX (BX<o). If increasing 'o' doesn't help, invert the encoder direction with CE.\n5\n. \nIf BX is successful, issue SH. Ensure the motor holds position.\n6\n. \nAttempt a jog. If the motor jogs, then the initialization is complete.\n1\n. \nIf the motor shuts off due to position error, retry BX. Invert the encoder direction with CE if that hasn't been attempted.",
        "Examples": "\n'Galil DMC Code Example\nREM Simple Example\nBA \nA\nA\nBM\nA\nA\n= \n= \n2000\nBX\nA\nA\n= \n= \n-\n3\n#bxa\n;\nJP \n#bxa\n,\n_BX\nA\nA\n<>\n3\nENDIF\n'Galil DMC Code Example\nREM Detailed Example\n#com\n~a\n~a\n= \n= \n0\n;\n'0 = A axis, 1 = B axis  . . .."
    },
    {
        "Command": "~a",
        "Usage": [],
        "Operands": {},
        "Description": "",
        "Arguments": [],
        "Remarks": "",
        "Examples": ""
    },
    {
        "Command": "BZ",
        "Usage": [
            {
                "Example": "BZm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "BZ n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_BZm"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "The BZ command is used to initialize axes which use sinusoidal commutation. To do this, the command drives the motor to two different magnetic\npositions and sets the magnetic position.",
        "Arguments": {
            "Unnamed: 0": {
                "0": "nan",
                "1": "Operands"
            },
            "BZm= n": {
                "0": "BZ n ...",
                "1": "_BZm"
            },
            "Arguments specified with a single axis mask and an assignment (=)": {
                "0": "Arguments specified with an implicit, comma-separated order",
                "1": "Operand has special meaning, see Remarks"
            }
        },
        "Remarks": "",
        "Examples": ""
    },
    {
        "Command": ". ",
        "Usage": [],
        "Operands": {},
        "Description": "",
        "Arguments": {
            "EN": {}
        },
        "Remarks": "",
        "Examples": "\n'Galil DMC Code Example\nREM Initialize A axis for internal sine commutation.\nBA\n \nA\nA\n;\n'          Configure axis A for sine amp\nBM\nA\nA\n \n=\n=\n \n2000\n;\n'    Length of electrical cycle in counts--required setting for commutation\nOE\nA\nA\n \n=\n=\n \n1\n;\n'       Enable off-on-error for A axis.\nER\nA\nA\n=\n=\n \n_BM\nA\nA\n;\n'     Set error limit to brushless modulus.\nBZ\n \n<\n200\n>\n100\n;\n'   Set first and second hold times to 100 and 200 ms respectively.\nBZ\nA\nA\n \n=\n=\n \n3\n;\n'       Initialize the motor with 3V motor command.\nSH\n \nA\nA\n;\n'          Enable motor, ready for commands\nBZ\n \n>\n200\n;\n'       Change first hold time to 200 ms\nBZ\n \n<\n400\n;\n'       Change second hold time to 400 ms\nEN\n'Galil DMC Code Example\nREM Initialize A axis for internal sine commutation.\nBA\n \nA\nA\n;\n'          Configure axis A for sine amp\nBM\nA\nA\n \n=\n=\n \n2000\n;\n'    Length of electrical cycle in counts--required setting for commutation\nOE\nA\nA\n \n=\n=\n \n1\n;\n'       Enable off-on-error for A axis.\nER\nA\nA\n=\n=\n \n_BM\nA\nA\n;\n'     Set error limit to brushless modulus.\nBZ\n \n<\n200\n;\n'       Set second hold time to 200 samples.\nBZ\nA\nA\n \n=\n=\n \n3\n;\n'       Initialize the motor with 3V motor command.\nSH\n \nA\nA\n;\n'          Enable motor, ready for commands\nEN\n'Galil DMC Code Example\nBZ \n,\n \n-\n3\n;\n' Drive B axis to electrical zero with 3 volt signal, and end with motor enabled. \n'Galil DMC Code Example\n:\nBZ\n \n2\n;\n'  Drive A axis to electrical zero with 2V torque, and end with Motor off. \nBZ applies to DMC500x0,DMC40x0,DMC41x3,DMC30010,DMC21x3,DMC18x6,DMC18x2\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "CA",
        "Usage": [
            {
                "Example": "CA mm",
                "Explanation": "Argument is an axis mask"
            }
        ],
        "Operands": {
            "Operands": [
                "_CAm"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "The CA command specifies the coordinate system to apply proceeding vector commands. The following commands apply to the active coordinate\nsystem as set by the CA command:\nCR\nES\nLE\nLI\nLM\nTN\nVE\nVM\nVP",
        "Arguments": {
            "TN": {},
            "VE": {},
            "VM": {},
            "VP": {},
            "Unnamed: 0": {}
        },
        "Remarks": "\nCA ? returns a 0 if the S coordinate system is active and a 1 if the T coordinate system is active.\n_CA contains a 0 if the S coordinate system is active and a 1 if the T coordinate system is active.",
        "Examples": "\n'Galil DMC Code Example\nCA \nT\nT\n;\n' Specify T coordinate system\nVM \nAB\nAB\n;\n' Specify vector motion in the A and B plane\nVS\nT\nT\n=\n=\n \n10000\n;\n' Specify vector speed\nCR\n \n1000\n,\n0\n,\n360\n;\n' Generate circle with radius of 1000 counts, start at 0 degrees and complete one circle in counterclockwise direction.\nVE\n;\n' End Sequence\nBG \nT\nT\n;\n' Start motion of T coordinate system \nCA applies to DMC40x0,DMC42x0,DMC41x3,DMC21x3,DMC18x6,DMC18x2,DMC500x0,DMC52xx0\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "CB",
        "Usage": [
            {
                "Example": "CB n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {},
        "Description": "The CB command clears a particular digital output. The SB and CB (Clear Bit) instructions can be used to control the state of output lines.",
        "Arguments": {
            "Argument": {
                "0": "n",
                "1": "n",
                "2": "n"
            },
            "Min": {
                "0": "1",
                "1": "17",
                "2": "1,000"
            },
            "Max": {
                "0": "16",
                "1": "48",
                "2": "8,999"
            },
            "Default": {
                "0": "N/A",
                "1": "N/A",
                "2": "N/A"
            },
            "Resolution": {
                "0": "1",
                "1": "1",
                "2": "1"
            },
            "Description": {
                "0": "General output bit to be cleared",
                "1": "Extended I/O output bit to be\rcleared",
                "2": "Clear Modbus slave bit"
            },
            "Notes": {
                "0": "Max value is 8 for 1-4 axis controllers",
                "1": "I/O must be configured for outputs, see CO\rcommand",
                "2": "See \"CB via Modbus Slave\" in Remarks"
            }
        },
        "Remarks": "\nThe state of the output can be read with the @OUT[] command\nUsing CB with a Modbus Slave\nn = (SlaveAddress*10000) + (HandleNum*1000) + ((Module-1)*4) + (Bitnum-1)\nSlave Address is used when the ModBus device has slave devices connected to it and specified as Addresses 0 to 255. Please note that the use\nof slave devices for modbus are very rare and this number will usually be 0.\nHandleNum is the handle specifier where A is 1, B is 2 and so on.\nModule is the position of the module in the rack from 1 to 16.\nBitNum is the I/O point in the module from 1 to 4",
        "Examples": "\n'Galil DMC Code Example\n#main\nSB\n \n5\n;\n'     Set digital output 5\nSB\n \n1\n;\n'     Set digital output 1\nCB\n \n5\n;\n'     Clear digital output 5\nCB\n \n1\n;\n'     Clear digital output 1\nEN\n'Galil DMC Code Example\n#modbus\nREM connect to modubs slave at IP address 192.168.1.50\nIH\nH\nH\n= \n= \n192\n,\n168\n,\n1\n,\n50\n<\n502\n>\n2\nWT \n100\nSB\n \n8001\n;\n'set bit 1 on modbus slave\nWT\n \n10\nCB\n \n8003\n;\n'clear bit 3 on modbus slave\nEN\n'Galil DMC Code Example\n:\nSB\n \n18\n;\n'     Set digital output 18\n:\nSB\n \n21\n;\n'     Set digital output 21\n:\nCB\n \n18\n;\n'     Clear digital output 18\n:\nCB\n \n21\n;\n'     Clear digital output 21 \nFor detailed information on connecting to a Modbus slave, see:\nhttp://www.galil.com/news/dmc-programming-io-control/setting-rio-pocket-plc-or-generic-modbus-slave-extended-io\nCB applies to DMC500x0,DMC40x0,DMC42x0,DMC41x3,DMC30010,DMC21x3,RIO47xxx,DMC18x6,DMC18x2,RIO574x0,DMC52xx0\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "CC",
        "Usage": [
            {
                "Example": "CC n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {},
        "Description": "The CC command configures baud rate, handshake, mode, and echo for the AUX SERIAL PORT, referred to as Port 2. This command must be given\nbefore using the MG, or CI commands with Port 2.",
        "Arguments": {
            "'Galil DMC Code Example\r:CC 9600,0,1,0;' 9600 baud, no handshake, enable, echo off.\r:'         Typical setting with TERM-P or TERM-H.": {}
        },
        "Remarks": "\nThe Aux port is not an interpreted port. It cannot receive Galil commands directly. Instead, use CI, #COMINT, and the P2 operands to handle received\ndata.",
        "Examples": "\n'Galil DMC Code Example\n:\nCC\n \n9600\n,\n0\n,\n1\n,\n0\n;\n' 9600 baud, no handshake, enable, echo off.\n:\n'         Typical setting with TERM-P or TERM-H. \nCC applies to DMC500x0,DMC40x0,DMC42x0,DMC41x3\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "CD",
        "Usage": [
            {
                "Example": "CDm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "CD n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {},
        "Description": "The CD command specifies the incremental position on contour axes. This command is used only in the Contour Mode (CM). The incremental position will\nbe executed over the time period specified by the command DT (ranging from 2 to 256 servo updates)",
        "Arguments": {
            "Argument": {
                "0": "m",
                "1": "n",
                "2": "t",
                "3": "nan",
                "4": "nan"
            },
            "Min": {
                "0": "A",
                "1": "-32,768",
                "2": "1",
                "3": "0",
                "4": "-1"
            },
            "Max": {
                "0": "H",
                "1": "32,767",
                "2": "8",
                "3": "0",
                "4": "-1"
            },
            "Default": {
                "0": "N/A",
                "1": "0",
                "2": "0",
                "3": "0",
                "4": "0"
            },
            "Resolution": {
                "0": "Axis",
                "1": "1",
                "2": "1",
                "3": "0",
                "4": "0"
            },
            "Description": {
                "0": "Axis to assign\rvalue",
                "1": "Contour position\rsegment",
                "2": "Time override\roption",
                "3": "Time override\roption",
                "4": "Time override\roption"
            },
            "Notes": {
                "0": "nan",
                "1": "Incremental position move",
                "2": "t = 1-8 specifies 2^n samples for the given interval.",
                "3": "t=0 with n=0 disables Contour mode. See Remarks",
                "4": "Pauses contour buffer at the segment with t=-1. Reissue DT\rto re-engage contour mode."
            }
        },
        "Remarks": "\nThe units of the command are in encoder counts.\nThe \n=\n operator can be used to override the global DT time by transmitting the time in a CD with the position data.\nn=t=0 terminates Contour mode similar to VE or LE for vector mode and linear interpolation mode.\nExample. CMBC is terminated with CD 0,0=0.\nThe user must have a space after CD in order to terminate the Contour Mode correctly.\nThe command CD0=0 (no space) will assign a variable CD0 the value of 0 rather than terminate Contour mode.",
        "Examples": "\n'Galil DMC Code Example\n#contour\n;\n'                Program Label\nCM \nAB\nAB\n;\n'                    Enter Contour Mode\nDT\n \n4\n;\n'                    Set time interval\nCD\n \n1000\n,\n2000\n;\n'            Specify data\nCD\n \n2000\n,\n4000\n;\n'            Next data\nCD\n \n0\n,\n0\n=\n0\n;\n'                End of Contour Buffer\n#wait\n;\n'                   Wait for all segments to process (buffer to empty)\nWT\n \n16\n,\n1\n;\n'                 wait for 1 DT time segment (2^4)\nJP \n#wait\n,\n(\n(\n_CM\n<>\n511\n)\n)\nEN\n;\n'                      End Program \n'Galil DMC Code Example\n#contour\n;\n'                Program Label\nCM \nA\nA\n;\n'                    Enter Contour Mode\nDT\n \n4\n;\n'                    Set time interval\nCD\n \n1000\n;\n'                Specify data\nCD\n \n2000\n;\n'               Next data\nCD\n \n0\n=\n0\n;\n'                End of Contour Buffer\n#wait\n;\n'                   Wait for all segments to process (buffer to empty)\nWT\n \n16\n,\n1\n;\n'                 wait for 1 DT time segment (2^4)\nJP \n#wait\n,\n(\n(\n_CM\n<>\n31\n)\n)\nEN\n;\n'                      End Program \nCD applies to DMC40x0,DMC42x0,DMC41x3,DMC21x3,DMC18x6,DMC18x2,DMC30010,DMC500x0,DMC52xx0\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "CE",
        "Usage": [
            {
                "Example": "CEm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "CE n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_CEm"
            ],
            "Explanation": "Operand holds the value last set by the command"
        },
        "Description": "The CE command configures the encoder to quadrature type or pulse and direction type. It also allows inverting the polarity of the encoders which\nreverses the direction of the feedback. The configuration applies independently to the main axes encoders and the auxiliary encoders.",
        "Arguments": {
            "Argument": {
                "0": "m",
                "1": "n"
            },
            "Min": {
                "0": "A",
                "1": "0"
            },
            "Max": {
                "0": "H",
                "1": "15"
            },
            "Default": {
                "0": "N/A",
                "1": "0"
            },
            "Resolution": {
                "0": "Axis",
                "1": "1"
            },
            "Description": {
                "0": "Axis to assign\rvalue",
                "1": "Encoder\rconfiguration\rsetting"
            },
            "Notes": {
                "0": "nan",
                "1": "n is the sum of 2 integers M and N which configure main and\rauxiliary encoders. See table below for configuration description."
            }
        },
        "Remarks": "\nWhen using a servo motor, changing the CE type can cause the motor to run away.\nWhen the MT command is configured for a stepper motor, the auxiliary encoder (used to count stepper pulses) will be forced to pulse and direction.\nWhen using pulse and direction encoders, the pulse signal is connected to CHA and the direction signal is connected to CHB.",
        "Examples": "\n'Galil DMC Code Example\n:\nCE\n \n0\n,\n \n3\n,\n \n6\n,\n \n2\n;\n' Configure encoders\n:\nCE\n \n?\n?\n,\n?\n?\n,\n?\n?\n,\n?\n?\n;\n'     Interrogate configuration\n0,3,6,2 \n:\nv\n \n=\n=\n \n_CE\nB\nB\n;\n'       Assign configuration to a variable\n:\nv\n \n=\n=\n \n?\n?\n \n3 \n:\nCE applies to DMC500x0,DMC40x0,DMC42x0,DMC41x3,DMC30010,DMC21x3,DMC18x6,DMC18x2\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "CF",
        "Usage": [
            {
                "Example": "CF mm",
                "Explanation": "Argument is an axis mask"
            }
        ],
        "Operands": {
            "Operands": [
                "_CF"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "The CF command sets the port for unsolicited messages. The CF command directs the controller to send unsolicited responses to the Main or Aux Serial\nPort (If equipped), or to an Ethernet handle. An unsolicited message is data generated by the controller which is not in response to a command sent by\nthe host.",
        "Arguments": {
            "Argument": {
                "0": "m",
                "1": "nan",
                "2": "nan"
            },
            "Min": {
                "0": "A",
                "1": "I",
                "2": "S"
            },
            "Max": {
                "0": "H",
                "1": "I",
                "2": "T"
            },
            "Default": {
                "0": "S",
                "1": "S",
                "2": "S"
            },
            "Resolution": {
                "0": "Handle",
                "1": "Handle",
                "2": "Handle"
            },
            "Description": {
                "0": "Ethernet Handle to assign as unsolicited\rmessage port",
                "1": "Set the port that sent the command as the\runsolicited message port",
                "2": "Set serial port as unsolicited message port"
            },
            "Notes": {
                "0": "See Remarks",
                "1": "Not valid in program",
                "2": "m=S is Main serial port. m=T is\rAux Serial port"
            }
        },
        "Remarks": "",
        "Examples": " of application code commands that will generate unsolicited messages follow.\n'Galil DMC Code Example\nMG \n\"Hello\"\n;\n'      A message (MG)\nTC \n1\n;\n'            A command that returns a response\nTP \n;\n'             \"\nRP \nA\nA\n;\n'            \"\nvar\n= \n= \n?\n?\n;\n'          A variable interogation\nvar\n= \n= \n;\n'           \"\nthisIsAnError\n;\n'  A dmc error will generate an error message \nEthernet Handle as Unsolicited Message Port\nWhen communicating over Ethernet, two Ethernet handles should be used:\n1.) The first handle should be used for command-and-response traffic. This is the primary handle that the host uses to communicate to the\ncontroller.\n2.) The second handle should be used for unsolicited traffic. This is the primary handle that the controller uses to asynchronously communicate\nto the host. Use CF to point unsolicited traffic to this handle.\nIt is NOT recommended to use one Ethernet handle for both command-and-response, and unsolicited messages."
    },
    {
        "Command": "CI",
        "Usage": [
            {
                "Example": "CI n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {},
        "Description": "The CI command configures program interrupts based on input of characters over the communication port.\nThe command configures a program interrupt based on characters received on communications port 2, the AUX serial port. An interrupt causes program\nflow to jump to the #COMINT subroutine. If multiple program threads are used, the #COMINT subroutine runs in thread 0 and the remaining threads\ncontinue to run without interruption. The characters received can be accessed via the operands P2CH, P2ST, P2NM, P2CD.",
        "Arguments": {
            "'Galil DMC Code Example\r:CI 1;'     Interrupt when the  key is received on port 2\r:CI 2;'     Interrupt on a single character received on Port 2\r:": {}
        },
        "Remarks": "\nFor more, see Operator Data Entry Mode in the user manual.",
        "Examples": "\n'Galil DMC Code Example\n:\nCI\n \n1\n;\n'     Interrupt when the \n key is received on port 2\n:\nCI\n \n2\n;\n'     Interrupt on a single character received on Port 2\n:\nCI applies to DMC500x0,DMC40x0,DMC42x0,DMC41x3,DMC30010,DMC21x3,RIO47xxx\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "CM",
        "Usage": [
            {
                "Example": "CM mm",
                "Explanation": "Argument is an axis mask"
            }
        ],
        "Operands": {
            "Operands": [
                "_CM"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "Contour Mode is initiated by the instruction CM. This mode allows the generation of an arbitrary motion trajectory with any of the axes. The CD command\nspecifies the position interval between subsequent contour segments. The DT command specifies the time interval between subsequent contour\nsegments.",
        "Arguments": {
            "Argument": {
                "0": "mm"
            },
            "Min": {
                "0": "A"
            },
            "Max": {
                "0": "ABCDEFGH"
            },
            "Default": {
                "0": "N/A"
            },
            "Resolution": {
                "0": "Multi-Axis Mask"
            },
            "Description": {
                "0": "Axes to initialize to Contour mode"
            },
            "Notes": {
                "0": "Disabled by default"
            }
        },
        "Remarks": "\nCM? Returns the number of available contour seqments (0 means the buffer is full).\n_CM contains the number of available contour segments (0 means the buffer is full).\nIssuing the CM command will clear the contour buffer when contour mode is not running.",
        "Examples": "\n'Galil DMC Code Example\n#cont0\n;\n'                 Define label #cont0\nCM\n \nABCD\nABCD\n;\n'                Specify Contour Mode Axes ABCD\nDT\n \n4\n;\n'                   Specify time increment for contour (2^4 servo loops, 16ms at TM1000)\nCD\n \n200\n,\n350\n,\n-\n150\n,\n500\n;\n'    Specify incremental positions on A,B,C and D axes\n'                        A-axis moves 200 counts B-axis moves 350 counts C-\n'                        axis moves -150 counts D-axis moves 500 counts\n'\nCD\n \n100\n,\n200\n,\n300\n,\n400\n;\n'     Next position data\nCD\n \n0\n,\n0\n,\n0\n,\n0\n=\n0\n;\n'           Special syntax to terminate Contour mode  \n#wait\n;\nJP \n#wait\n,\n_CM\n<>\n511\n;\n' Spin on #Wait label until buffer is empty\n'                        End of Contour Buffer/Sequence\nEN\n;\n'                     End program\n'\n'\n#cont1\n;\n'                  Define label #cont1\nCM\n \nABC\nABC\n;\n'                  Specify Contour Mode\nDT\n \n8\n;\n'                    Specify time increment for contour (2^8 servo loops, 256ms at TM1000)\nCD\n \n100\n,\n100\n,\n100\n;\n'          New position data\nCD\n \n100\n,\n100\n,\n100\n;\n'          New position data\nCD\n \n0\n,\n0\n,\n0\n \n=\n-\n1\n;\n'            Pause contour buffer set DT to resume\nCD\n \n100\n,\n100\n,\n100\n;\n'          New position data\nCD\n \n100\n,\n100\n,\n100\n;\n'          New position data\nCD\n \n0\n,\n0\n,\n0\n,\n0\n=\n0\n;\n'            Special syntax to terminate Contour mode  \n#wait2\n;\nJP \n#wait2\n,\n_CM\n<>\n511\n;\n'Spin on #wait2 label until buffer is empty\n'End of Contour Buffer/Sequence\nEN\nCM applies to DMC40x0,DMC42x0,DMC41x3,DMC21x3,DMC18x6,DMC18x2,DMC30010,DMC500x0,DMC52xx0\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "CN",
        "Usage": [
            {
                "Example": "CN n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_CN0",
                "_CN1",
                "_CN2",
                "_CN3",
                "_CN4"
            ],
            "Explanation": "Operand holds the value last set by the command"
        },
        "Description": "The CN command configures the polarity of the limit switches, home switches, latch inputs, the selective abort function, and the program termination\nbehavior of the abort input.",
        "Arguments": {
            "_CN4": {},
            "Unnamed: 0": {}
        },
        "Remarks": "\nn\n0\n is useful for testing the operation of the #LIMSWI automatic subroutine. See example below.",
        "Examples": "\n'Galil DMC Code Example\nCN\n \n1\n,\n1\n;\n'   Sets limit and home switches to active high\nCN\n \n,\n,\n \n-\n1\n;\n' Sets input latch active low \n'Galil DMC Code Example\nREM n0 is useful for testing the operation of the #LIMSWI automatic subroutine\n#test\nCN\n \n-\n1\n;\n'     Switches are active low\nJG\nA\nA\n=\n=\n \n100\nBG\n \nA\nA\n;\n'      Start a slow jog move\nWT \n1000\nCN\n \n1\n;\n'      Cause a limit fault by inverting the limit polarity\nEN\n'\n#LIMSWI\n#LIMSWI\n;\n'   Automatic sub will automatically launch on limit detection\nMG\n \n\"Limit Switch Routine\"\nWT \n100\nCN\n \n-\n1\n;\n'     Return to correct polarity\nRE\nCN applies to DMC40x0,DMC42x0,DMC41x3,DMC21x3,DMC18x6,DMC18x2,DMC30010,DMC500x0,DMC52xx0\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "CO",
        "Usage": [
            {
                "Example": "CO n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_CO"
            ],
            "Explanation": "Operand holds the value last set by the command"
        },
        "Description": "The CO command configures which banks are inputs and which are outputs on the extended I/O. The extended I/O points of the controller can be\nconfigured in banks of 8.\nThe extended I/O is denoted as bits 17-48 and banks 2-5.",
        "Arguments": {
            "Argument": {
                "0": "n"
            },
            "Min": {
                "0": "0"
            },
            "Max": {
                "0": "15"
            },
            "Default": {
                "0": "0"
            },
            "Resolution": {
                "0": "1"
            },
            "Description": {
                "0": "Bitmask to configure extended IO as\rinputs or outputs"
            },
            "Notes": {
                "0": "Bit=1 is outputs. Bit=0 is inputs. See\rTable below"
            }
        },
        "Remarks": "\nNone",
        "Examples": "\n'Galil DMC Code Example\nCO\n \n15\n;\n' Configure all points as outputs\nCO\n \n0\n;\n'  Configure all points as inputs\nCO\n \n1\n;\n' Configures bank 2 as outputs on extended I/O \nCO applies to DMC500x0,DMC40x0,DMC42x0,DMC21x3,DMC18x6,DMC18x2\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "CP",
        "Usage": [
            {
                "Example": "CPm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "CP n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_CPm"
            ],
            "Explanation": "Operand holds the value last set by the command"
        },
        "Description": "The CP command sets the deadband within which the motor is shut off. After a move is complete (_BGn = 0) and the absolute value of the position error\nTE becomes less than the dead band CP, the motor is turned off. SH must be issued before further motion can be commanded. CT can be used to\nincrement the integrator limit to ensure that the motor reaches the dead band.",
        "Arguments": {
            "Argument": {
                "0": "m",
                "1": "n"
            },
            "Min": {
                "0": "A",
                "1": "-1"
            },
            "Max": {
                "0": "H",
                "1": "32,767"
            },
            "Default": {
                "0": "N/A",
                "1": "-1"
            },
            "Resolution": {
                "0": "Axis",
                "1": "1"
            },
            "Description": {
                "0": "Axis to assign value",
                "1": "Set the position deadband for motor off."
            },
            "Notes": {
                "0": "nan",
                "1": "n=-1 disables the feature"
            }
        },
        "Remarks": "\nValid for -NAN or -CER firmware",
        "Examples": "\n'Galil DMC Code Example\n:\n^R^V\nDMC1842 Rev 1.0n-CM-F\n:\n^R^S\n:\nED\n0 #L\n1 MG _RPX, _TEX, _ILX, _MOX\n2 WT100\n3 JP#L\n4\n:\nIL \n0\n:\nCP \n100\n:\nKI \n0.01\n:\nPR \n1000\n:\nBG\n:\nXQ\n:\n0.0000 19.0000 0.0000 0.0000\n934.0000 669.0000 0.0000 0.0000\n1000.0000 684.0000 2.0406 0.0000\n1000.0000 656.0000 4.6783 0.0000\n1000.0000 429.0000 7.2166 0.0000\n1000.0000 340.0000 9.8544 0.0000\n1000.0000 83.0000 9.9982 1.0000\n1000.0000 82.0000 9.9982 1.0000 \nCP applies to CER,NAN\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "CR",
        "Usage": [
            {
                "Example": "CR n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {},
        "Description": "When using the vector mode (VM), the CR command specifies a 2-dimensional arc segment. The VE command must be used to denote the end of the\nmotion sequence after all CR and VP segments are specified. The BG (Begin Sequence) command is used to start the motion sequence. Parameters for\nradius, starting angle and traverse angle must all be entered for each CR command.",
        "Arguments": [],
        "Remarks": "\nThe product of n\n0\n * n\n2\n must be less than 450,000,000\nA positive n\n2\n denotes counterclockwise traverse, -n\n2\n denotes clockwise.\nn\n0\n units are in quadrature counts.\nn\n1\n and n\n2\n have units of degrees.",
        "Examples": "\n'Galil DMC Code Example\n'A starting position of zero degrees denotes that the radius lies along\n'a vector following the positive X axis, on a 2D Cartesian space:\nVM \nAB\nAB\nCR\n \n1000\n,\n0\n,\n270\nVE\nBG \nS\nS\nEN\n'The 2-d map out the position output can be seen below "
    },
    {
        "Command": "VM ",
        "Usage": [],
        "Operands": {},
        "Description": "",
        "Arguments": {
            "'Galil DMC Code Example\r'Generate a sine wave output on the A axis\rVM AN;'           Specify vector motion in the A and N plane\rVS 1000;'        Specify vector speed\rCR 1000,0,360;'  Generate sine wave with amplitude of 1000 counts\r'                start at 0 degrees and complete one cycle\rCR 1000,0,360<40000;' Generate same sine wave with same amplitude\r'                but run at faster speed (higher frequency)\r'\rVE;'             End Sequence\rBG S;'            Start motion": {}
        },
        "Remarks": "",
        "Examples": ""
    },
    {
        "Command": "CS",
        "Usage": [
            {
                "Example": "CS mm",
                "Explanation": "Argument is an axis mask"
            }
        ],
        "Operands": {
            "Operands": [
                "_CSm"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "The CS command will remove VP, CR or LI commands stored in a motion sequence for a coordinated axis. After a sequence has been executed, the CS\ncommand is not necessary to put in a new sequence. This command is useful when you have incorrectly specified VP, CR or LI commands.",
        "Arguments": {
            "Argument": {
                "0": "m"
            },
            "Min": {
                "0": "S"
            },
            "Max": {
                "0": "T"
            },
            "Default": {
                "0": "N/A"
            },
            "Resolution": {
                "0": "Axis"
            },
            "Description": {
                "0": "Coordinate plane specified to clear buffer"
            },
            "Notes": {
                "0": "nan"
            }
        },
        "Remarks": "\n_CSm contains the segment number in the sequence specified by m= S or T.\nThis operand is valid in the Linear mode, LM, and Vector mode, VM.",
        "Examples": "\n'Galil DMC Code Example\n#clear\n;\n' Label\nCA \nT\nT\n;\n' Specify the T coordinate system vector points\nVP\n \n1000\n,\n2000\n;\n' Vector Position\nVP\n \n4000\n,\n8000\n;\n' Vector Position\nCS \nT\nT\n;\n' Clear vectors specified in T coordinate system\nCA \nS\nS\n;\n' Specify the T coordinate system vector points\nVP\n \n1000\n,\n5000\n;\n' New vector\nVP\n \n8000\n,\n9000\n;\n' New vector\nCS \nS\nS\n;\n' Clear vectors specified in S coordinate system \nCS applies to DMC40x0,DMC42x0,DMC41x3,DMC21x3,DMC18x6,DMC18x2,DMC30010,DMC500x0,DMC52xx0\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "CW",
        "Usage": [
            {
                "Example": "CW n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {},
        "Description": "The CW command will return the copyright information when the argument, n, is 0 or is omitted. Otherwise, the CW command is used as a\ncommunications enhancement for use by the Galil terminal software programs. When turned on, the most significant bit of unsolicited ASCII characters is\nset to 1. Unsolicited ASCII characters are characters that are returned from a program running on the controller (usually from the MG command). This\ncommand does not affect solicited characters, which are characters that are returned as a response to a command sent from a host PC (e.g. TP).",
        "Arguments": [],
        "Remarks": "\nGaliltools automatically sends CW 1 during connection to a controller.\nIf also reading unsolicited data through a non-Galil software (eg. Hyperterminal), issue CW 2\nOperand Usage\n_CW contains the value set for n\n0\n_CW4 contains the value set for n\n1",
        "Examples": "\n'Galil DMC Code Example\nCW \n1\n;\n'     Set CW to Galil Driver mode (MSB set on unsolicited characters)\n'         The CW command can cause garbled (non-ASCII) characters to be returned \n'         by the controller when using third-party software. Use CW2.\nCW \n2\n;\n'     Set CW to third-party device mode (normal ASCII on unsoliticed characters) \nCW applies to DMC500x0,DMC52xx0,DMC40x0,DMC42x0,DMC41x3,DMC30010,DMC21x3,DMC18x6,DMC18x2,RIO47xxx\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "DA",
        "Usage": [
            {
                "Example": "DA n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_DAm"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "The DA command frees the array and/or variable memory space. In this command, more than one array or variable can be specified for memory de-\nallocation. Different arrays and variables are separated by comma when specified in one command.",
        "Arguments": {
            "Argument": {
                "0": "str",
                "1": "nan"
            },
            "Min": {
                "0": "1 char",
                "1": "1 char"
            },
            "Max": {
                "0": "8 chars",
                "1": "8 chars"
            },
            "Default": {
                "0": "N/A",
                "1": "N/A"
            },
            "Resolution": {
                "0": "String",
                "1": "String"
            },
            "Description": {
                "0": "Array name to deallocate",
                "1": "Variable name to deallocate"
            },
            "Notes": {
                "0": "If str = *, deallocate all arrays",
                "1": "If str = *, deallocate all variables"
            }
        },
        "Remarks": "\n_DA contains the total number of arrays available.\nSince this command deallocates the spaces and compacts the array spaces in the memory it is possible that execution of this command may take\nlonger time than a standard command.\nVariables and arrays that are deallocated are not set to zero. A routine that writes zeros to the array and/or variables should be created if this is\ndesired.",
        "Examples": "\n'Galil DMC Code Example\n'Cars' and 'Salesmen' are arrays, and 'Total' is a variable.\nDM\n \ncars\n[\n[\n40\n]\n]\n,\nsalesmen\n[\n[\n50\n]\n]\n;\n'        Dimension 2 arrays\ntotal\n= \n= \n70\n;\n'                        Assign 70 to the variable Total\nDA\n \ncars\n[\n[\n0\n]\n]\n,\nsalesmen\n[\n[\n0\n]\n]\n,\ntotal\n;\n'    Deallocate the 2 arrays & variable\nDA \n*\n[\n[\n0\n]\n]\n;\n'                          Deallocate all arrays\nDA\n \n*\n,\n*\n[\n[\n0\n]\n]\n;\n'                       Deallocate all variables and all arrays \nDA applies to DMC500x0,DMC52xx0,DMC40x0,DMC42x0,DMC41x3,DMC30010,DMC21x3,DMC18x6,DMC18x2,RIO47xxx\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "DB",
        "Usage": [
            {
                "Example": "DBm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "DB n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_DBm"
            ],
            "Explanation": "Operand holds the value last set by the command"
        },
        "Description": "When the absolute value of the error TE is greater than DB, the torque output TT will be set back to normal (reflecting KP, KD, KI, ZP, and ZN). This is\nused to avoid oscillation when holding position.",
        "Arguments": {
            "Argument": {
                "0": "m",
                "1": "n"
            },
            "Min": {
                "0": "A",
                "1": "0"
            },
            "Max": {
                "0": "H",
                "1": "32,767"
            },
            "Default": {
                "0": "N/A",
                "1": "0"
            },
            "Resolution": {
                "0": "Axis",
                "1": "1"
            },
            "Description": {
                "0": "Axis to assign value",
                "1": "Position setpoint for PID deadband"
            },
            "Notes": {
                "0": "nan",
                "1": "nan"
            }
        },
        "Remarks": "\nValid on -NAN, -CER, and -CLS firmware\nDB should be set greater than or equal to DS.",
        "Examples": "\n'Galil DMC Code Example\nDS\nA\nA\n= \n= \n100\n;\n'   set off band on X axis to +/-100 counts\nDB\nA\nA\n= \n= \n200\n;\n'   set on band on X axis to +/-200 counts \nDB applies to CER,CLS,NAN\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "DC",
        "Usage": [
            {
                "Example": "DCm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "DC n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_DCm"
            ],
            "Explanation": "Operand holds the value last set by the command"
        },
        "Description": "The Deceleration command (DC) sets the linear deceleration rate of the motors for independent moves such as PR, PA, and JG moves. The parameters\nwill be rounded down to the nearest factor of 1024 and have units of counts per second squared.",
        "Arguments": {
            "Argument": {
                "0": "m",
                "1": "nan",
                "2": "n"
            },
            "Min": {
                "0": "A",
                "1": "M",
                "2": "1,024"
            },
            "Max": {
                "0": "H",
                "1": "N",
                "2": "1,073,740,800"
            },
            "Default": {
                "0": "N/A",
                "1": "N/A",
                "2": "256,000"
            },
            "Resolution": {
                "0": "Axis",
                "1": "Axis",
                "2": "1,024"
            },
            "Description": {
                "0": "Axis to assign value",
                "1": "Virtual axis to assign value",
                "2": "Deceleration rate"
            },
            "Notes": {
                "0": "nan",
                "1": "nan",
                "2": "At TM 1000. See Remarks for resolution details."
            }
        },
        "Remarks": "\nThe AC command is used to designate acceleration\nSpecify realistic deceleration rates based on physical system parameters such as:\nmotor torque rating\nloads\namplifier current rating\nSpecifying an excessive deceleration will cause a large following error during deceleration and the motor will not follow the commanded profile\nDC may be changed during a move in Jog mode, but not in a PA or PR move\nHowever, directly following an axis stop (ST m or a limit switch, #LIMSWI), the DC value of a PA or PR move may be changed while the axis is\nstill decelerating\nResolution\nThe resolution of the DC command is dependent on the sampling period of the control loop (TM). With the default rate of TM 1000 the resolution is\n1024 counts/second^2. The equation to calculate the resolution of the DC command is:\nresolution = min = 1024*(1000/TM)^2\nExample:\nWith TM 500 the minimum DC setting and resolution is 4096 counts/second^2.\nresolution = 1024*(1000/500)^2 = 4096",
        "Examples": "\n'Galil DMC Code Example\nPR\n \n10000\n;\n' Specify position\nAC\n \n2000000\n;\n' Specify acceleration rate\nDC\n \n1000000\n;\n' Specify deceleration rate\nSP\n \n5000\n;\n' Specify slew speed\nBG \n;\n'     Begin motion \nDC applies to DMC40x0,DMC42x0,DMC41x3,DMC21x3,DMC18x6,DMC18x2,DMC30010,DMC500x0,DMC52xx0\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "DE",
        "Usage": [
            {
                "Example": "DEm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "DE n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_DEm"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "The DE command defines the position of the auxiliary (dual) encoders.\nDual encoders are useful when you need an encoder on the motor and on the load. The encoder on the load is typically the auxiliary encoder and is used\nto verify the true load position. Any error in load position is used to correct the motor position.",
        "Arguments": {
            "Argument": {
                "0": "m",
                "1": "n",
                "2": "nan"
            },
            "Min": {
                "0": "A",
                "1": "-2,147,483,648",
                "2": "-2,147,483,648"
            },
            "Max": {
                "0": "H",
                "1": "2,147,483,647",
                "2": "2,147,483,647"
            },
            "Default": {
                "0": "N/A",
                "1": "0",
                "2": "0"
            },
            "Resolution": {
                "0": "Axis",
                "1": "1",
                "2": "1"
            },
            "Description": {
                "0": "Axis to assign value",
                "1": "Position set for auxiliary encoders",
                "2": "Position set for main encoders"
            },
            "Notes": {
                "0": "nan",
                "1": "For MT 1,-1,1.5,-1.5",
                "2": "For MT 2,-2,2.5,-2.5"
            }
        },
        "Remarks": "\nWhen using stepper motors, the DE command defines the main encoder position.\nThe auxiliary encoders are not available for the stepper axis or for any axis where output compare is active.\nThe operand _DEm, as well as _TDm, holds the current aux encoder position.\nn=? will return the encoder position, as returned by TD.",
        "Examples": "\n'Galil DMC Code Example\nDE\n \n0\n,\n100\n,\n200\n,\n400\n;\n' Set the current auxiliary encoder position to 0,100,200,400 on A,B,C and D axes\nDE\n \n?\n?\n,\n?\n?\n,\n?\n?\n,\n?\n?\n;\n'      Return auxiliary encoder positions\nduala\n=\n=\n \n_DE\nA\nA\n;\n'     Assign auxiliary encoder position of A-axis to the variable duala \nDE applies to DMC500x0,DMC40x0,DMC42x0,DMC41x3,DMC30010,DMC21x3,DMC18x6,DMC18x2\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "DF",
        "Usage": [
            {
                "Example": "DFm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "DF n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_DFm"
            ],
            "Explanation": "Operand holds the value last set by the command"
        },
        "Description": "The DF command allows configuration of BiSS or SSI feedback in Dual Loop mode as the load encoder. For users wishing to operate with SSI or BiSS in\nDual Loop mode (DV), the DF command can be used to configure a load-side serial encoder and a motor-side incremental encoder with DV1.",
        "Arguments": {
            "Argument": {
                "0": "n",
                "1": "nan"
            },
            "Value": {
                "0": "0",
                "1": "1"
            },
            "Description": {
                "0": "Disable feedback swap",
                "1": "Enable feedback swap"
            },
            "Notes": {
                "0": "Default",
                "1": "nan"
            }
        },
        "Remarks": "\nWire the motor's incremental encoder per normal to the DMC-4xxx main encoder inputs. The load SSI encoder should be wired to the axis aux\nencoder lines:\nSSI Signals for DMC-4xxx\nNominal Signal Name\nSignal Reassignment with SSI\nSignal Reassignment with BiSS\nAA+\nClock+\nMA+\nAA-\nClock-\nMA-\nAB+\nData+\nSLO+\nAB-\nData-\nSLO-\nOnce wired, configure the serial encoder as an auxiliary encoder.\nSee SI or SS for configuration information.\nOnce configured for Dual Loop (DV1), DF1 will swap the serial encoder to become the load (Main) encoder. The incremental encoder wired to the main\nencoder inputs becomes the motor (Auxiliary) encoder. TP will now report the serial encoder position, and TD will report the incremental encoder\nposition.",
        "Examples": "\n'Galil DMC Code Example\nMO \nA\nA\n;\n'                 Disable motor on X\nSI\nA\nA\n=\n=\n \n2\n,\n25\n,\n15\n,\n0\n<\n13\n>\n2\n;\n' Setup SSI encoder to fill the Aux encoder register\nDF \n1\n;\n'                 Enable Dual Feedback Swap\nDV \n1\n;\n'                 Enable Dual Loop mode\nSH \nA\nA\n;\n'                 Enable servo with new configuration \nDF applies to DMC500x0,SER\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "DH",
        "Usage": [
            {
                "Example": "DH n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {},
        "Description": "The DH command configures the DHCP or BOOT-P functionality on the controller for Server IP addressing.",
        "Arguments": {
            "Argument": {
                "0": "n",
                "1": "nan"
            },
            "Value": {
                "0": "0",
                "1": "1"
            },
            "Description": {
                "0": "Enable BOOT-P and disable DHCP",
                "1": "Disable BOOT-P and enable DHCP"
            },
            "Notes": {
                "0": "Allows IP assignment through IA command.",
                "1": "Default. Allows IP assignment through DHCP server."
            }
        },
        "Remarks": "\nDH 0 must be set to manually assign and burn in an IP address. With DH 1 set, the IA command will return an error if used to set the IP address.",
        "Examples": "\n'Galil DMC Code Example\nDH\n \n1\n;\n' Sets the DHCP function on.  IA assignment will no longer work.\nDH\n \n0\n;\n' Sets the DHCP function off, and the Boot-P function on. \nDH applies to DMC40x0,DMC42x0,DMC41x3,RIO47xxx,DMC30010,DMC500x0,DMC52xx0\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "DL",
        "Usage": [
            {
                "Example": "DL n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {},
        "Description": "The DL command transfers a data file from the host computer to the controller. Instructions in the file will be accepted as a data stream without line\nnumbers. The file is terminated using <control> Z, <control> Q, <control> D, or \\.",
        "Arguments": {
            "Argument": {
                "0": "n",
                "1": "n",
                "2": "str",
                "3": "s"
            },
            "Min": {
                "0": "0",
                "1": "0",
                "2": "1 char",
                "3": "#"
            },
            "Max": {
                "0": "3,999",
                "1": "1,999",
                "2": "8 chars",
                "3": "#"
            },
            "Default": {
                "0": "0",
                "1": "0",
                "2": "\"\"",
                "3": "N/A"
            },
            "Resolution": {
                "0": "1",
                "1": "1",
                "2": "String",
                "3": "Symbol"
            },
            "Description": {
                "0": "Line number to begin program\rdownload",
                "1": "Line number to begin program\rdownload",
                "2": "Name of label in RAM to begin\rdownload from.",
                "3": "Begins download at end of\rprogram in RAM"
            },
            "Notes": {
                "0": "Firmware Rev 1.2a and later",
                "1": "nan",
                "2": "If str = \"\", download begins at the end of the\rcurrent program in RAM",
                "3": "nan"
            }
        },
        "Remarks": "\nDo not insert spaces before label declarations.\n_DL gives the number of available labels.\nIssuing this command will pause the output of the Data Record until the command is completed.",
        "Examples": "\n'Galil DMC Code Example\n:\nDL\n;\n'      Begin Download\n#A;PR 4000;BGA\nAMA;MG DONE\nEN\n\\\n:\n'End download \nDL applies to DMC500x0,DMC52xx0,DMC40x0,DMC42x0,DMC41x3,DMC30010,DMC21x3,DMC18x6,DMC18x2,RIO47xxx\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "DM",
        "Usage": [
            {
                "Example": "DM n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {},
        "Description": "The DM command defines a single-dimensional array with a name and n total elements. The first element of the defined array starts with element number\n0 and the last element is at n-1.",
        "Arguments": {
            "Argument": {
                "0": "str",
                "1": "n",
                "2": "n"
            },
            "Min": {
                "0": "1 char",
                "1": "1",
                "2": "1"
            },
            "Max": {
                "0": "8 chars",
                "1": "24,000",
                "2": "16,000"
            },
            "Default": {
                "0": "N/A",
                "1": "N/A",
                "2": "N/A"
            },
            "Resolution": {
                "0": "String",
                "1": "1",
                "2": "1"
            },
            "Description": {
                "0": "Name of array to dimension",
                "1": "Number of array elements to assign to dimensioned\rarray",
                "2": "Number of array elements to assign to dimensioned\rarray"
            },
            "Notes": {
                "0": "nan",
                "1": "Firmware Rev 1.2a and\rlater",
                "2": "nan"
            }
        },
        "Remarks": "\nTyping in array name with [-1] element marked reports the number of elements for that array.\nThe first character of str must be alphabetic. The rest can be any alphanumeric characters.\nWhen assigning array elements, the number specified must be less than the current available array space\n_DM contains the available array space.",
        "Examples": "\n'Galil DMC Code Example\nDM\n \npets\n[\n[\n5\n]\n]\n,\ndogs\n[\n[\n2\n]\n]\n,\ncats\n[\n[\n3\n]\n]\n;\n' Define dimension of arrays, Pets with 5 elements, Dogs with 2 elements, Cats with 3 elements\nDM\n \ntests\n[\n[\n1600\n]\n]\n;\n' Define dimension of array Tests with 1600 elements \n'Galil DMC Code Example\n:\nDM \n?\n?\n;\n' firmware revisions prior to Rev 1.2a only have 16000 elements\n24000\n:\nDM\n \nmyarray\n[\n[\n1000\n]\n]\n:\nDM \n?\n?\n23000\n:\n'DMC-4xxx provides length of array with array[-1]\n:\nMG\n \n\"MyArray contains\"\n,\nmyarray\n[\n[\n-\n1\n]\n]\n,\n\" elements\"\nMyArray contains 1000.0000 elements\n:\nDM applies to DMC500x0,DMC52xx0,DMC40x0,DMC42x0,DMC41x3,DMC30010,DMC21x3,DMC18x6,DMC18x2,RIO47xxx\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "DP",
        "Usage": [
            {
                "Example": "DPm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "DP n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_DPm"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "The DP command sets the current motor position and current command positions to a user specified value. The units are in quadrature counts. This\ncommand will set both the TP and RP values.",
        "Arguments": {
            "Argument": {
                "0": "m",
                "1": "nan",
                "2": "n",
                "3": "nan"
            },
            "Min": {
                "0": "A",
                "1": "M",
                "2": "-\r2,147,483,648",
                "3": "-\r2,147,483,648"
            },
            "Max": {
                "0": "H",
                "1": "N",
                "2": "2,147,483,647",
                "3": "2,147,483,647"
            },
            "Default": {
                "0": "N/A",
                "1": "N/A",
                "2": "0",
                "3": "0"
            },
            "Resolution": {
                "0": "Axis",
                "1": "Axis",
                "2": "1",
                "3": "1"
            },
            "Description": {
                "0": "Axis to assign value",
                "1": "Virtual axis to assign value",
                "2": "Value assigned to motor/commanded position (RP and\rTP registers)",
                "3": "Value assigned to step/commanded position (RP and TD\rregisters)"
            },
            "Notes": {
                "0": "nan",
                "1": "nan",
                "2": "For MT 1,-\r1,1.5,-1.5",
                "3": "For MT 2,-\r2,2.5,-2.5"
            }
        },
        "Remarks": "\nThe DP command sets the commanded reference position for axes configured as steppers. The units are in steps.\nExample: \"DP 0\" This will set the registers for TD and RP to zero, but will not effect the TP register value. When equipped with an encoder, use\nthe DE command to set the encoder position for stepper mode.\nThe DP command is useful to redefine the absolute position.\nFor example, you can manually position the motor by hand using the Motor Off command, MO. Turn the servo motors back on with SH and\nthen use DP0 to redefine the new position as your absolute zero.\nThe operand _DPm, as well as _TPm, holds the current main encoder position.\nn=? will return the encoder position, as returned by TP.",
        "Examples": "\n'Galil DMC Code Example\n:\nDP\n \n0\n,\n100\n,\n200\n,\n400\n;\n'   Sets the current position of the A-axis to 0, the B-axis to 100, the C-axis to 200, and the D-axis to 400\n:\nDP\n \n,\n-\n50000\n;\n'         Sets the current position of B-axis to -50000. The A, C and D axes remain unchanged.\n:\nDP\n \n?\n?\n,\n?\n?\n,\n?\n?\n,\n?\n?\n;\n'         Interrogate the position of A, B, C and D axis.\n0, -50000, 200, 400 \n:\nDP\n \n?\n?\n;\n'                Interrogate the position of A axis\n0                 \n:\n'Galil DMC Code Example\n:\nDP\n \n0\n;\n'       Sets the current position of the A-axis to 0\n:\nDP\n \n-\n50000\n;\n'  Sets the current position of A-axis to -50000. \n:\nDP\n \n?\n?\n;\n'       Interrogate the position of A\n-50000 \nDP applies to DMC40x0,DMC42x0,DMC41x3,DMC21x3,DMC18x6,DMC18x2,DMC30010,DMC500x0,DMC52xx0\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "DR",
        "Usage": [
            {
                "Example": "DR n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_DR0",
                "_DR1"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "DR specifies and enables the rate for the controller to output its data record.\nFor ethernet-based controllers, the controller creates a QR record and sends it to the unsolicited UDP Ethernet Handle at the specified rate. See the User\nManual for the data record map.",
        "Arguments": {
            "Argument": {
                "0": "n0",
                "1": "nan",
                "2": "n1"
            },
            "Min": {
                "0": "2",
                "1": "0",
                "2": "0"
            },
            "Max": {
                "0": "30,000",
                "1": "0",
                "2": "7"
            },
            "Default": {
                "0": "0",
                "1": "0",
                "2": "see Notes"
            },
            "Resolution": {
                "0": "2",
                "1": "0",
                "2": "1"
            },
            "Description": {
                "0": "Data update rate specified in samples\rbetween packets.",
                "1": "Turn off data record output",
                "2": "Ethernet handle to output data record\rpacket"
            },
            "Notes": {
                "0": "n = 0 turns off data record output.",
                "1": "nan",
                "2": "0=A,1=B,2=C,3=D,4=E,5=F,6=G,7=H."
            }
        },
        "Remarks": "\nIf a small sample period and a small update rate is used, the controller may become noticeably slower as a result of maintaining a high update rate.\nIf n\n1\n is omitted, then the CF unsolicited message port is used by default.\nThe DR port specified with n\n1\n must be a UDP handle.\n_DR0 contains the data record update rate (n\n0\n).\n_DR1 contains the specified handle (n\n1\n). Will return an integer 0-7 for handles A-H.\nIssuing any of the following commands will pause the output of the data record until the command is complete: BN, BP, BV, BX, BZ, DL, LS, LV, QD,\nQU, UL",
        "Examples": "\n'Galil DMC Code Example\n:\nWH\n \nIHA\n:\nDR \n1000\n,\n0\nG\n\u200b\nx\n\u200b\u200b\u200b\u200b\u200b\n~\n\u200b\u200b\u200b\nP\n\u200b\n_\n\u200b\n`\n\u200b\u200b\u200b\u200b\u200b\n@~\n\u200b\u200b\u200b\nP\n\u200b\n_\n\u200b\nH\n\u200b\u200b\u200b\u200b\u200b\n`~\n\u200b\u200b\u200b\nP\n\u200b\n_\n\u200b\n0\n\u200b\u200b\u200b\u200b\u200b\n~\n\u200b\u200b\u200b\nP\n\u200b\n:\nDR \n0\n'Note:  The data record is in a binary, non-printable format \n'(the output above is normal when printing to the terminal) \nDR applies to DMC40x0,DMC42x0,DMC41x3,DMC21x3,RIO47xxx,DMC18x6,DMC30010,DMC500x0,DMC52xx0\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "DS",
        "Usage": [
            {
                "Example": "DSm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "DS n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_DSm"
            ],
            "Explanation": "Operand holds the value last set by the command"
        },
        "Description": "When the absolute value of the error TE is less than DS, the torque output TT will be set to the offset OF (the contributions of KP, KD, KI, ZP, and ZN are\nset to zero). This is used to avoid oscillation when holding position.",
        "Arguments": {
            "Argument": {
                "0": "m",
                "1": "n"
            },
            "Min": {
                "0": "A",
                "1": "0"
            },
            "Max": {
                "0": "H",
                "1": "32,767"
            },
            "Default": {
                "0": "N/A",
                "1": "0"
            },
            "Resolution": {
                "0": "Axis",
                "1": "1"
            },
            "Description": {
                "0": "Axis to assign value",
                "1": "Position range for PID deadband"
            },
            "Notes": {
                "0": "nan",
                "1": "nan"
            }
        },
        "Remarks": "\nCommand valid for -NAN, -CER, and -CLS firmware\nDB should be set greater than or equal to DS.",
        "Examples": "\n'Galil DMC Code Example\nDS\nA\nA\n= \n= \n100\n;\n'   set off band on X axis to +/-100 counts\nDB\nA\nA\n= \n= \n200\n;\n'   set on band on X axis to +/-200 counts \nDS applies to CER,CLS,NAN\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "DT",
        "Usage": [
            {
                "Example": "DT n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {},
        "Description": "The DT command sets the time interval for Contour Mode. The time interval is 2\nN\n samples. With TM 1000, there are 1024 samples per second.\nSending the DT command once will set the time interval for all contour data until a new DT command (or CDm=n) is sent.",
        "Arguments": {
            "'Galil DMC Code Example\r:DT 4;'              Specifies time interval to be 16 msec (TM1000)\r:DT 7;'              Specifies time interval to be 128 msec\r:": {}
        },
        "Remarks": "\nBy default the sample period is 1 msec (set by the TM command); with n=1, the time interval would be 2 msec\nn = -1 allows a pre-load of the contour buffer or to asynchronously pause the contour buffer. DT-1 during contour mode will pause the contour\nbuffer (and commanded movement).\nA positive DT will resume contour mode from paused position of buffer.\nDT can be overridden with the =t parameter within a CD segment.",
        "Examples": "\n'Galil DMC Code Example\n:\nDT\n \n4\n;\n'              Specifies time interval to be 16 msec (TM1000)\n:\nDT\n \n7\n;\n'              Specifies time interval to be 128 msec\n:\n'Galil DMC Code Example\nREM basic contour example\n#cont0\n;\n'                Define label #Cont0\nCM\n \nABCD\nABCD\n;\n'               Specify Contour Mode\nDT\n \n4\n;\n'                  Specify time increment for contour\nCD\n \n200\n,\n350\n,\n-\n150\n,\n500\n;\n'   Specify incremental positions on A,B,C and C axes\n'                       A-axis moves 200 counts B-axis moves 350 counts C-\n'                       axis moves -150 counts C-axis moves 500 counts\nCD\n \n100\n,\n200\n,\n300\n,\n400\n \n;\n'   New position data\nCD\n \n0\n,\n0\n,\n0\n,\n0\n=\n0\n;\n'          End of Contour Buffer/Sequence\n#wait\n;\n'                 Wait for all segments to process (buffer to empty)\nWT\n \n16\n,\n1\n;\n'               wait for 1 DT time segment (2^4)\nJP \n#wait\n,\n(\n(\n_CM\n<>\n511\n)\n)\nEN\n;\n'                    End program \n'Galil DMC Code Example\nREM contour example for pre-loading of contour buffer\n#cont1\n;\n'                Define label #Cont1\nCM\n \nAB\nAB\n;\n'                 Specify Contour Mode\nDT\n \n-\n1\n;\n'                 Pause Contour Mode to allow pre-load of buffer\nCD\n \n100\n,\n200\n;\n'            Countour Data pre-loaded in buffer\nCD\n \n400\n,\n200\n;\n'            Countour Data pre-loaded in buffer\nCD\n \n200\n,\n100\n;\n'            Countour Data pre-loaded in buffer\nCD\n \n300\n,\n50\n;\n'             Countour Data pre-loaded in buffer\nAI\n \n-\n1\n;\n'                 Wait for Analog input 1 to go low\nDT\n \n8\n;\n'                  Set positive DT to start contour mode\nCD\n \n0\n,\n0\n,\n0\n,\n0\n=\n0\n;\n'          End of Contour Buffer/Sequence\n#wait\n;\n'                 Wait for all segments to process (buffer to empty)\nWT\n \n16\n,\n1\n;\n'               wait for 1 DT time segment (2^4)\nJP \n#wait\n,\n(\n(\n_CM\n<>\n511\n)\n)\nEN\n;\n'                    End program \n'Galil DMC Code Example\nREM contour example for pre-loading of contour buffer\n#cont1\n;\n'                Define label #Cont1\nCM\n \nA\nA\n;\n'                  Specify Contour Mode\nDT\n \n-\n1\n;\n'                 Pause Contour Mode to allow pre-load of buffer\nCD\n \n100\n;\n'                Countour Data pre-loaded in buffer\nCD\n \n400\n;\n'                Countour Data pre-loaded in buffer\nCD\n \n200\n;\n'                Countour Data pre-loaded in buffer\nCD\n \n300\n;\n'                Countour Data pre-loaded in buffer\nAI\n \n-\n1\n;\n'                 Wait for Analog input 1 to go low\nDT\n \n8\n;\n'                  Set positive DT to start contour mode\nCD\n \n0\n=\n0\n;\n'                End of Contour Buffer/Sequence\n#wait\n;\n'                 Wait for all segments to process (buffer to empty)\nWT\n \n16\n,\n1\n;\n'               wait for 1 DT time segment (2^4)\nJP \n#wait\n,\n(\n(\n_CM\n<>\n31\n)\n)\nEN\n;\n'                    End program "
    },
    {
        "Command": "\u00a92017 Galil Motion Control. Corrections, Feedback: ",
        "Usage": [],
        "Operands": {},
        "Description": "",
        "Arguments": [],
        "Remarks": "",
        "Examples": ""
    },
    {
        "Command": "DV",
        "Usage": [
            {
                "Example": "DVm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "DV n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_DVm"
            ],
            "Explanation": "Operand holds the value last set by the command"
        },
        "Description": "The DV function changes the operation of the PID filter to work off of dual encoders. DV enabled causes the KD (derivative) term to operate on the dual\nencoder instead of the main encoder. This results in improved stability in the cases where there is a backlash between the motor and the main encoder,\nand where the dual encoder is mounted on the motor.",
        "Arguments": {
            "Argument": {
                "0": "m",
                "1": "n"
            },
            "Min": {
                "0": "A",
                "1": "0"
            },
            "Max": {
                "0": "H",
                "1": "1"
            },
            "Default": {
                "0": "N/A",
                "1": "0"
            },
            "Resolution": {
                "0": "Axis",
                "1": "1"
            },
            "Description": {
                "0": "Axis to assign value",
                "1": "State of dual loop mode"
            },
            "Notes": {
                "0": "nan",
                "1": "n = 0 disables Dual loop. n = 1 enables Dual loop"
            }
        },
        "Remarks": "\nThe DV command is useful in backlash and resonance compensation.\nDV must be set properly for commutation to be successful with internal sine drives.\nWhen DVm=0, the firmware will use the main encoder for sine drive commutation.\nWhen DVm=1, the firmware will use the aux encoder for sine drive commutation.\nCorrecting for Positive Feedback\nWith motor off (MO) check the motor encoder with TD and load encoder with TP. Manually move the motor/load and reissue the TD and TP\ncommands to confirm both encoders count in the same direction.\nIf the encoders count in opposing directions, change the polarity of one encoder using the CE command or by changing the wiring. Consult user\nmanual.\nIf positive feedback still persists, switch the motor polarity or reverse the direction of both encoders.\nOff on error (OE) and error limits (ER) can be used to shut down the motor in the event of a runaway.\nUsing DV with Large motor/load encoder ratio\nWhen using Dual Loop mode with a large motor:load ratio and/or running at high velocities where low position error at speed is required, FV should be\nused to compensate for the derivative contribution from the higher resolution motor encoder.\nThe estimated FV setting required to compensate for \nthe derivative contribution can be calculated by the equation:\nFV = (KD/4)*(motor/load)\nmotor/load = effective motor to load ratio\nFor example: KD = 200, motor encoder changes 5000 counts per 1000 counts of load encoder (motor/load = 5/1)\nFV = (200/4)*(5/1) = 250",
        "Examples": "\n'Galil DMC Code Example\nDV\n \n1\n,\n1\n,\n1\n,\n1\n;\n' Enables dual loop on all axes\nDV\n \n0\n;\n' Disables DV on A axis\nDV \n,\n,\n1\n,\n1\n;\n' Enables dual loop on C axis and D axis.  Other axes remain unchanged.\nDV\n \n1\n,\n0\n,\n1\n,\n0\n;\n' Enables dual loop on A and C axis.  Disables dual loop on B and D axis.\nMG \n_DV\nA\nA\n;\n' Returns state of dual velocity mode for A axis \nDV applies to DMC500x0,DMC40x0,DMC42x0,DMC41x3,DMC30010,DMC21x3,DMC18x6\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "EA",
        "Usage": [
            {
                "Example": "EA mm",
                "Explanation": "Argument is an axis mask"
            }
        ],
        "Operands": {},
        "Description": "The EA command selects the master axis for the electronic cam mode. Any axis may be chosen.",
        "Arguments": {
            "Argument": {
                "0": "m",
                "1": "nan"
            },
            "Min": {
                "0": "A",
                "1": "M"
            },
            "Max": {
                "0": "H",
                "1": "N"
            },
            "Default": {
                "0": "N/A",
                "1": "N/A"
            },
            "Resolution": {
                "0": "Axis",
                "1": "Axis"
            },
            "Description": {
                "0": "Axis to assign as ECAM master",
                "1": "Virtual axis to assign as ECAM master"
            },
            "Notes": {
                "0": "nan",
                "1": "N is default"
            }
        },
        "Remarks": "\nThe ECAM mode runs off of the master's main encoder (TP) even when the axis is running in stepper mode.\nWhen using the M or N imaginary axes, the commanded position is used.",
        "Examples": "\n'Galil DMC Code Example\nREM example using A axis as ECAM master and B axis as ECAM slave\n#camone\nmaster\n= \n= \n400\nslave\n= \n= \n8192\nEB \n0\n;\n \n'Disable ECAM Mode\nEA\n \nA\nA\n;\n \n'Set Master Axis as A\nEM\n \nmaster\n,\nslave\nEP\n \nmaster\n/\n4\n,\n0\nET\n[\n[\n0\n]\n]\n= \n= \n,\n0\nET\n[\n[\n1\n]\n]\n= \n= \n,\n2048\nET\n[\n[\n2\n]\n]\n= \n= \n,\n4096\nET\n[\n[\n3\n]\n]\n= \n= \n,\n6144\nET\n[\n[\n4\n]\n]\n= \n= \n,\n8192\nDP \n0\n,\n0\nSH \nAB\nAB\n'NOTE - (EP Value)*(# of Cam Points) must be >= to Master Modulus\nJG \n100\n;\nBG \nA\nA\nEB \n1\nEG \n,\n0\n;\n \n'Start ECAM profile\nEN\nEA applies to DMC40x0,DMC42x0,DMC41x3,DMC21x3,DMC18x6,DMC18x2,DMC30010,DMC500x0,DMC52xx0\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "EB",
        "Usage": [
            {
                "Example": "EB n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_EB"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "The EB function enables or disables the cam mode. In this mode, the starting position of the master axis is specified within the cycle.",
        "Arguments": {
            "Argument": {
                "0": "n",
                "1": "nan"
            },
            "Value": {
                "0": "0",
                "1": "1"
            },
            "Description": {
                "0": "Stop ECAM mode",
                "1": "Start ECAM mode"
            },
            "Notes": {
                "0": "Default",
                "1": "nan"
            }
        },
        "Remarks": "\nWhen the EB command is given, the master axis position is modularized.\n_EB holds the enabled state, 1 or 0",
        "Examples": "\n'Galil DMC Code Example\nEB \n1\n;\n'  Starts ECAM mode\nEB \n0\n;\n' Stops ECAM mode\nvar\n \n=\n=\n \n_EB\n;\n' Return status of cam mode \nEB applies to DMC40x0,DMC42x0,DMC41x3,DMC21x3,DMC18x6,DMC18x2,DMC30010,DMC500x0,DMC52xx0\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "EC",
        "Usage": [
            {
                "Example": "EC n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_EC"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "The EC function sets the index into the ECAM table. This command is only useful when entering ECAM table values without index values and is most useful\nwhen sending commands in binary. See the command, ET.",
        "Arguments": {
            "Argument": {
                "0": "n"
            },
            "Min": {
                "0": "0"
            },
            "Max": {
                "0": "256"
            },
            "Default": {
                "0": "0"
            },
            "Resolution": {
                "0": "1"
            },
            "Description": {
                "0": "Set the ECAM table index"
            },
            "Notes": {
                "0": "nan"
            }
        },
        "Remarks": "\n_EC contains the current value of the index into the ECAM table.",
        "Examples": "\n'Galil DMC Code Example\nEC \n0\n;\n'  Set ECAM index to 0\nET\n \n200\n,\n400\n;\n' Set first ECAM table entries to 200,400\nET\n \n400\n,\n800\n;\n' Set second ECAM table entries to 400,800\nvar\n= \n= \n_EC\n;\n'    Set the ECAM index value to a variable \nEC applies to DMC40x0,DMC42x0,DMC41x3,DMC21x3,DMC18x6,DMC18x2,DMC30010,DMC500x0,DMC52xx0\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "ED",
        "Usage": [
            {
                "Example": "ED n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_ED",
                "_ED1",
                "_ED4"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "The ED command puts the controller into the Edit subsystem. The ED command is used when using Telnet style interface (not Galil Software). In the Edit\nsubsystem, programs can be created, changed, or destroyed.",
        "Arguments": {
            "Argument": {
                "0": "n",
                "1": "n"
            },
            "Min": {
                "0": "0",
                "1": "0"
            },
            "Max": {
                "0": "3,999",
                "1": "1,999"
            },
            "Default": {
                "0": "see Notes",
                "1": "see Notes"
            },
            "Resolution": {
                "0": "1",
                "1": "1"
            },
            "Description": {
                "0": "Line number to\rbegin editing",
                "1": "Line number to\rbegin editing"
            },
            "Notes": {
                "0": "Firmware Rev 1.2a and later. Default n is the last line of\rprogram space with commands.",
                "1": "Default n is the last line of program space with commands."
            }
        },
        "Remarks": "\nThe commands in the Edit subsystem are the following.\nED Commands\nKey Combination\nFunction\n<ctrl>D\nDeletes a Line\n<ctrl>I\nInserts a line before the current\n<ctrl>P\nDisplays the previous line\n<ctrl>Q\nExits the ED subsystem\nEnter\nSaves a line and moves cursor to next\nOperand Usage\n_ED0 contains the line number of the last line to have an error.\n_ED1 contains the number of the thread where the error occurred (for multitasking).\n_ED0 returns 0 if no error has occurred.\n_ED1 returns -1 if no error has occurred.\nWill return -1 if no error has occurred.\n_ED4 when evaluated in an embedded code thread, this operand will contain the thread id of the calling thread. This is useful for DMC code to\ndetermine which thread it is running in. See example below.",
        "Examples": "\n'Galil DMC Code Example\n:\nED\n#START \nPR 2000 \nBGA \nxx;' bad command line\nEN \n#CMDERR Routine which occurs upon a command error\nV=_ED0\nMG \"An error has occurred\" {n} \nMG \"In line\", V{F3.0} \nST \nZS0 \nEN \nctrl-Q\n:\n'Hint:  Remember to quit the Edit Mode prior to executing or listing a program. \n'Galil DMC Code Example\n'Using _ED4\nXQ \n#id\n,\n1\nXQ \n#id\n,\n2\nXQ \n#id\n,\n3\nXQ \n#id\n,\n4\nXQ \n#id\n,\n5\nXQ \n#id\n,\n6\nXQ \n#id\n,\n7\n#id\nMG \n{Z10.0}\n\"This message is from thread\"\n,\n_ED\n4\nEN\n' Returns...\n' :XQ"
    },
    {
        "Command": "' This message is from thread 2 ",
        "Usage": [],
        "Operands": {},
        "Description": "",
        "Arguments": [],
        "Remarks": "",
        "Examples": ""
    },
    {
        "Command": "EG",
        "Usage": [
            {
                "Example": "EGm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "EG n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_EGm"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "The EG command engages an ECAM slave axis at a specified position of the master. Once a slave motor is engaged, its position is redefined to fit within the\ncycle.",
        "Arguments": {
            "Argument": {
                "0": "m",
                "1": "n"
            },
            "Min": {
                "0": "A",
                "1": "-\r2,147,483,648"
            },
            "Max": {
                "0": "H",
                "1": "2,147,483,647"
            },
            "Default": {
                "0": "N/A",
                "1": "0"
            },
            "Resolution": {
                "0": "Axis",
                "1": "1"
            },
            "Description": {
                "0": "Axis to assign value",
                "1": "Master position to\rengage ECAM slave"
            },
            "Notes": {
                "0": "nan",
                "1": "n = outside of master axis position range causes\rslave to engage immediately."
            }
        },
        "Remarks": "\n_EGm contains ECAM status for specified slave axis. 0 = axis is not engaged, 1 = axis is engaged.\nn = ? \nReturns 1 if specified axis is engaged and 0 if disengaged.\nThis command is not a trippoint. This command will not hold the execution of the program flow. If the execution needs to be held until master position\nis reached, use MF or MR command.",
        "Examples": "\n'Galil DMC Code Example\nEG\n \n700\n,\n1300\n;\n' Engages the A and B axes at the master position 700 and 1300 respectively.\nb\n \n=\n=\n \n_EG\nB\nB\n;\n' Return the status of B axis, 1 if engaged \nEG applies to DMC40x0,DMC42x0,DMC41x3,DMC21x3,DMC18x6,DMC18x2,DMC30010,DMC500x0,DMC52xx0\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "EI",
        "Usage": [
            {
                "Example": "EI n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_EI"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "The EI command is used to enable interrupts on events. EI enables interrupts for the predefined event conditions in the table below. When a condition\n(e.g. Axis A profiled motion complete) occurs after EI is armed, a particular status byte value (e.g. $D0 or 208) is delivered to the host PC along with the\ninterrupt.\nInterrupts are issued as automatically dispatched UDP packets. GalilTools version 1.2.1.0 or newer required for software support.",
        "Arguments": {
            "Argument": {
                "0": "n1",
                "1": "n2",
                "2": "n3"
            },
            "Min": {
                "0": "0",
                "1": "0",
                "2": "-1"
            },
            "Max": {
                "0": "65,535",
                "1": "255",
                "2": "7"
            },
            "Default": {
                "0": "0",
                "1": "0",
                "2": "-1"
            },
            "Resolution": {
                "0": "1",
                "1": "1",
                "2": "1"
            },
            "Description": {
                "0": "16-bit interrupt mask",
                "1": "8-bit input mask",
                "2": "Preconfigured UDP handle\rfor interrupt transmission"
            },
            "Notes": {
                "0": "0 turns off interrupts. See Remarks for bit mask",
                "1": "Used to select the specific digital input trigger. Bit 15\rof n1 must be set for the n2 mask to be used.",
                "2": "-1 disabled, 0-7 indicate Handles A-H, respectively"
            }
        },
        "Remarks": "",
        "Examples": ""
    },
    {
        "Command": "$80 (128)",
        "Usage": [],
        "Operands": {},
        "Description": "",
        "Arguments": {
            "'Interrupt when motion is complete on all axes OR if a limit switch is hit:\r'From the table, enable bits 8 and 10.  n1 = 256 + 1024 = 1280\rEI  1280\r'\r'Interrupt when digital input 3 is low.\r'Enable bit 15 of n1 and bit 2 of n2.\rEI 32768,4": {}
        },
        "Remarks": "",
        "Examples": "\n'Galil DMC Code Example\n'Interrupt when motion is complete on all axes OR if a limit switch is hit:\n'From the table, enable bits 8 and 10.  n1 = 256 + 1024 = 1280\nEI\n  \n1280\n'\n'Interrupt when digital input 3 is low.\n'Enable bit 15 of n1 and bit 2 of n2.\nEI\n \n32768\n,\n4\nEI applies to DMC40x0,DMC42x0,DMC41x3,DMC18x6,DMC18x2,DMC30010,DMC500x0,DMC52xx0\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "ELSE",
        "Usage": [
            {
                "Example": "ELSE n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {},
        "Description": "The ELSE command is an optional part of an IF conditional statement. The ELSE command must occur after an IF command and it has no arguments. It\nallows for the execution of a command only when the argument of the IF command evaluates False. If the argument of the IF command evaluates false,\nthe controller will skip commands until the ELSE command. If the argument for the IF command evaluates true, the controller will execute the commands\nbetween the IF and ELSE command.",
        "Arguments": [],
        "Remarks": "\nNone",
        "Examples": "\n'Galil DMC Code Example\nIF\n \n(\n(\n@IN\n[\n[\n1\n]\n]\n=\n0\n)\n)\n;\n'                 IF conditional statement based on input 1\n \nIF\n \n(\n(\n@IN\n[\n[\n2\n]\n]\n=\n0\n)\n)\n;\n'                2nd IF conditional statement executed if 1st IF conditional true\n  \nMG\n \n\"IN1 AND IN2 ARE ACTIVE\"\n;\n' Message to be executed if 2nd IF conditional is true\n \nELSE\n;\n'                         ELSE command for 2nd IF conditional statement\n  \nMG\n \n\"ONLY IN1 IS ACTIVE\"\n;\n'     Message to be executed if 2nd IF conditional is false\n \nENDIF \n;\n'                        End of 2nd conditional statement\nELSE\n;\n'                          ELSE command for 1st IF conditional statement\n \nIF\n \n(\n(\n@IN\n[\n[\n2\n]\n]\n=\n0\n)\n)\n;\n'             3rd IF conditional statement executed if 1st IF conditional false\n  \nMG\n \n\"ONLY IN2 IS ACTIVE\"\n;\n'  Message to be executed if 3rd IF conditional statement is true\n \nELSE\n;\n'                      ELSE command for 3rd conditional statement\n  \nMG\n \n\"IN1 AND IN2 INACTIVE\"\n;\n'Message to be executed if 3rd IF conditional statement is false\n \nENDIF \n;\n'                     End of 3rd conditional statement\nENDIF \n;\n'                      End of 1st conditional statement \nELSE applies to DMC500x0,DMC52xx0,DMC40x0,DMC42x0,DMC41x3,DMC30010,DMC21x3,DMC18x6,DMC18x2,RIO47xxx\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "EM",
        "Usage": [
            {
                "Example": "EMm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "EM n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_EMm"
            ],
            "Explanation": "Operand holds the value last set by the command"
        },
        "Description": "The EM command defines the change in position over one complete cycle of the master.\nThe field for the master axis is the cycle of the master position. For the slaves, the field defines the net change in one cycle.",
        "Arguments": {
            "Argument": {
                "0": "m",
                "1": "n",
                "2": "nan"
            },
            "Min": {
                "0": "A",
                "1": "2",
                "2": "0"
            },
            "Max": {
                "0": "H",
                "1": "8,388,607",
                "2": "2,147,483,647"
            },
            "Default": {
                "0": "N/A",
                "1": "N/A",
                "2": "N/A"
            },
            "Resolution": {
                "0": "Axis",
                "1": "1",
                "2": "1"
            },
            "Description": {
                "0": "Axis to assign value",
                "1": "Position change over one full ECAM cycle",
                "2": "Position change over one full ECAM cycle"
            },
            "Notes": {
                "0": "nan",
                "1": "For defining master axis",
                "2": "For defining slave axis"
            }
        },
        "Remarks": "\nIf a slave will return to its original position at the end of the cycle, then n=0.\nIf the change is negative, specify the absolute value for n.",
        "Examples": "\n'Galil DMC Code Example\nREM example using A axis main encoder as master B axis main encoder as the slave\n#cam\nREM define A axis encoder as master for ECAM\nEA\n \nA\nA\nREM\nREM EM command options\nREM ----\nREM define slave modulus as 0 (returns to original position)\nREM and define master modulus as 4000\nEM\n \n4000\n,\n0\nREM \nREM another valid EM settings for this configuration\nREM ----\n'EMA= 4000\n;\n' define A axis master modulus as 0\n'EMB= 0\n;\n'    define B axis slave modulus as 0\nREM\nREM ----\nREM define master increment as 1000 counts/table entry\nEP\n \n1000\nET\n[\n[\n0\n]\n]\n=\n=\n \n,\n \n0\nET\n[\n[\n1\n]\n]\n=\n=\n \n,\n \n1000\nET\n[\n[\n2\n]\n]\n=\n=\n \n,\n \n2000\nET\n[\n[\n3\n]\n]\n=\n=\n \n,\n \n1000\nET\n[\n[\n4\n]\n]\n=\n=\n \n,\n \n0\nREM enable ECAM mode\nEB\n \n1\nREM engage when master is at 0 position\nEG\n \n0\n,\n0\nEN\n'Galil DMC Code Example\nEA \nC\nC\n;\n' Select C axis as master for ECAM.\nEM\n \n0\n,\n3000\n,\n2000\n;\n' Define the changes in A and B to be 0 and 3000 respectively.  Define master cycle as 2000.\nv\n \n=\n=\n \n_EM\nA\nA\n;\n' Return cycle of A \nEM applies to DMC40x0,DMC42x0,DMC41x3,DMC21x3,DMC18x6,DMC18x2,DMC30010,DMC500x0,DMC52xx0\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "EN",
        "Usage": [
            {
                "Example": "EN n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {},
        "Description": "The EN command is used to designate the end of a program or subroutine. If a subroutine was called by the JS command, the EN command ends the\nsubroutine and returns program flow to the point just after the JS command.\nA return parameter can be specified to EN from a subroutine to return a value from the subroutine to the calling stack.",
        "Arguments": [],
        "Remarks": "\nThe EN command is used to end the automatic subroutines #MCTIME #COMINT and #CMDERR.\nUse the RE command to end the #POSERR and #LIMSWI subroutines.\nUse the RI command to end the #ININT subroutine",
        "Examples": "\n'Galil DMC Code Example\n#a\n;\n'     Program A\nPR\n \n500\n;\n' Move A axis forward 500 counts\nBG \nA\nA\n;\n'    Begin motion\nAM \nA\nA\n;\n'    Pause the program until the A axis completes the motion\nEN\n;\n'     End of Program \n'Galil DMC Code Example\n#example\n'test program showing restoring trippoints with EN\nXQ \n#err\n,\n1\n;\n'   Execute thread to generate error\nAI \n1\n;\n'        Wait for input 1 to trigger\nMG \n\"hello\"\n;\n'  After input, message out\nEN\n#err\n'dummy thread that runs to cause an error\nXX123\n;\n'      Invalid command\n'causes CMDERR to be called, interrupting thread 0\nEN\n#CMDERR\n#CMDERR\n'error subroutine running on thread 0\ntc\n= \n= \n_TC\n;\n'     Save error code\nEN \n1\n;\n'        End routine, restore AI trippoint. \nEN applies to DMC500x0,DMC52xx0,DMC40x0,DMC42x0,DMC41x3,DMC30010,DMC21x3,DMC18x6,DMC18x2,RIO47xxx\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "ENDIF",
        "Usage": [
            {
                "Example": "ENDIF n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {},
        "Description": "The ENDIF command is used to designate the end of an IF conditional statement. An IF conditional statement is formed by the combination of an IF and\nENDIF command. An ENDIF command must always be executed for every IF command that has been executed. It is recommended that the user not\ninclude jump commands inside IF conditional statements since this causes re-direction of command execution. In this case, the command interpreter may\nnot execute an ENDIF command.",
        "Arguments": [],
        "Remarks": "\nNone",
        "Examples": "\n'Galil DMC Code Example\nIF\n \n(\n(\n@IN\n[\n[\n1\n]\n]\n=\n0\n)\n)\n;\n'                 IF conditional statement based on input 1\n \nIF\n \n(\n(\n@IN\n[\n[\n2\n]\n]\n=\n0\n)\n)\n;\n'                2nd IF conditional statement executed if 1st IF conditional true\n  \nMG\n \n\"IN1 AND IN2 ARE ACTIVE\"\n;\n' Message to be executed if 2nd IF conditional is true\n \nELSE\n;\n'                         ELSE command for 2nd IF conditional statement\n  \nMG\n \n\"ONLY IN1 IS ACTIVE\"\n;\n'     Message to be executed if 2nd IF conditional is false\n \nENDIF \n;\n'                        End of 2nd conditional statement\nELSE\n;\n'                          ELSE command for 1st IF conditional statement\n \nIF\n \n(\n(\n@IN\n[\n[\n2\n]\n]\n=\n0\n)\n)\n;\n'             3rd IF conditional statement executed if 1st IF conditional false\n  \nMG\n \n\"ONLY IN2 IS ACTIVE\"\n;\n'  Message to be executed if 3rd IF conditional statement is true\n \nELSE\n;\n'                      ELSE command for 3rd conditional statement\n  \nMG\n \n\"IN1 AND IN2 INACTIVE\"\n;\n'Message to be executed if 3rd IF conditional statement is false\n \nENDIF \n;\n'                     End of 3rd conditional statement\nENDIF \n;\n'                      End of 1st conditional statement \nENDIF applies to DMC500x0,DMC52xx0,DMC40x0,DMC42x0,DMC41x3,DMC30010,DMC21x3,DMC18x6,DMC18x2,RIO47xxx\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "EO",
        "Usage": [
            {
                "Example": "EO n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_EO"
            ],
            "Explanation": "Operand holds the value last set by the command"
        },
        "Description": "The EO command turns the echo on or off. If the echo is off, characters input over the bus will not be echoed back.",
        "Arguments": {
            "Argument": {
                "0": "n",
                "1": "nan"
            },
            "Value": {
                "0": "0",
                "1": "1"
            },
            "Description": {
                "0": "Echo Off",
                "1": "Echo On"
            },
            "Notes": {
                "0": "nan",
                "1": "Default"
            }
        },
        "Remarks": "\nThis command is defaulted to EO1. Galil software upon connection will set EO0\nThe EO command is accepted over the serial port only.\nThe ethernet port will not echo commands",
        "Examples": "\n'Galil DMC Code Example\nEO\n \n0\n;\n' Turns echo off\nEO\n \n1\n;\n' Turns echo on \nEO applies to DMC500x0,DMC52xx0,DMC40x0,DMC42x0,DMC41x3,DMC30010,DMC21x3,DMC18x6,DMC18x2,RIO47xxx\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "EP",
        "Usage": [
            {
                "Example": "EP n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_EP"
            ],
            "Explanation": "Operand holds the value last set by the command"
        },
        "Description": "The EP command defines the ECAM table intervals and offset. The offset is the master position of the first ECAM table entry. The interval is the difference\nof the master position between 2 consecutive table entries. This command effectively defines the size of the ECAM table. Up to 257 points may be\nspecified.",
        "Arguments": {
            "Argument": {
                "0": "n0",
                "1": "n1"
            },
            "Min": {
                "0": "1",
                "1": "-2,147,483,648"
            },
            "Max": {
                "0": "32,767",
                "1": "2,147,483,647"
            },
            "Default": {
                "0": "256",
                "1": "0"
            },
            "Resolution": {
                "0": "1",
                "1": "1"
            },
            "Description": {
                "0": "Master position interval",
                "1": "ECAM table phase shift"
            },
            "Notes": {
                "0": "Cannot be changed while ECAM is running",
                "1": "Can be modified during ECAM"
            }
        },
        "Remarks": "\n_EP contains the value of the interval n\n0\n.\nThe offset parameter 'n\n1\n' can also be used to instantaneously phase shift the graph of the slave position verses the master position. This can be used\nto make on-the-fly corrections to the slaves.\nSee application note #2502 for more details. \nhttp://www.galil.com/learn/application-notes",
        "Examples": "\n'Galil DMC Code Example\nEP\n \n20\n;\n'           Sets the cam master points to 0,20,40 . . .\nd\n \n=\n=\n  \n_EP\n;\n'        Set the variable d equal to the ECAM internal master interval\nEP \n,\n100\n;\n'          Phase shift all slaves by 100 master counts \nEP applies to DMC40x0,DMC42x0,DMC41x3,DMC21x3,DMC18x6,DMC18x2,DMC30010,DMC500x0,DMC52xx0\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "EQ",
        "Usage": [
            {
                "Example": "EQm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "EQ n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_EQm"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "The EQ command disengages an electronic cam slave axis at the specified master position. Separate points can be specified for each axis. If a value is\nspecified outside of the master's range, the slave will disengage immediately.",
        "Arguments": {
            "Argument": {
                "0": "m",
                "1": "n"
            },
            "Min": {
                "0": "A",
                "1": "-\r2,147,483,648"
            },
            "Max": {
                "0": "H",
                "1": "2,147,483,647"
            },
            "Default": {
                "0": "N/A",
                "1": "N/A"
            },
            "Resolution": {
                "0": "Axis",
                "1": "1"
            },
            "Description": {
                "0": "Axis to assign value",
                "1": "Master position to disengage\rthe slave axis specified."
            },
            "Notes": {
                "0": "nan",
                "1": "If n = outside of master position range,\rdisengage slave axis immediately."
            }
        },
        "Remarks": "\n_EQn contains 1 if engage command issued and axis is waiting to engage, 2 if disengage command issued and axis is waiting to disengage, and 0 if\nECAM engaged or disengaged.\nn = ? \nReturns 1 if engage command issued and axis is waiting to engage, 2 if disengage command issued and axis is waiting to disengage, and 0 if\nECAM engaged or disengaged.\nThis command is not a trippoint. This command will not hold the execution of the program flow.\nIf the execution needs to be held until master position is reached, use MF or MR command.",
        "Examples": "\n'Galil DMC Code Example\nEQ\n \n300\n,\n700\n;\n' Disengages the A and B motors at master positions 300 and 700 respectively. \n'Galil DMC Code Example\nEQ\n \n300\n;\n' Disengages the A motor at master position 300. \nEQ applies to DMC40x0,DMC42x0,DMC41x3,DMC21x3,DMC18x6,DMC18x2,DMC30010,DMC500x0,DMC52xx0\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "ER",
        "Usage": [
            {
                "Example": "ERm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "ER n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_ERm"
            ],
            "Explanation": "Operand holds the value last set by the command"
        },
        "Description": "The ER command sets the magnitude of the position errors for each axis that will trigger an error condition. When the limit is exceeded, the Error output\nwill go low (true) and the controller's red light will be turned on. If the Off On Error (OE1) command is active, the motors will be disabled.",
        "Arguments": {
            "Argument": {
                "0": "m",
                "1": "n"
            },
            "Min": {
                "0": "A",
                "1": "-1"
            },
            "Max": {
                "0": "H",
                "1": "2,147,483,647"
            },
            "Default": {
                "0": "N/A",
                "1": "16,384"
            },
            "Resolution": {
                "0": "Axis",
                "1": "1"
            },
            "Description": {
                "0": "Axis to assign value",
                "1": "Set the position error limit in\rcounts"
            },
            "Notes": {
                "0": "nan",
                "1": "n=0 enables Error output. n=-1 disables Error\routput."
            }
        },
        "Remarks": "\nThe error limit specified by ER should be high enough as not to be reached during normal operation.",
        "Examples": " of exceeding the error limit would be a mechanical jam, or a fault in a system component such as encoder or amplifier\nFor debugging purposes, ER0 and ER-1 can be used to turn the red LED on and off.\nExamples\n'Galil DMC Code Example\n:\nER\n \n200\n,\n300\n,\n400\n,\n600\n;\n' Set the A-axis error limit to 200, the B-axis error limit to 300, the C-axis error limit to 400, and the D-axis error limit to 600.\n:\nER\n \n,\n1000\n;\n' Sets the B-axis error limit to 1000, leave the A-axis error limit unchanged.\n:\nER\n \n?\n?\n,\n?\n?\n,\n?\n?\n,\n?\n?\n;\n' Return A,B,C and D values\n00200,00100,00400,00600 \n:\nER\n \n?\n?\n;\n' Return A value\n00200 \n:\nv1\n= \n= \n_ER\nA\nA\n;\n' Assigns V1 value of ERA\n:\nv1\n= \n= \n;\n' Returns V1\n00200 \nER applies to DMC40x0,DMC42x0,DMC41x3,DMC21x3,DMC18x6,DMC18x2,DMC30010,DMC500x0,DMC52xx0\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "ES",
        "Usage": [
            {
                "Example": "ES n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {},
        "Description": "The ES command divides the resolution of one of the axes in a vector mode (VM). This function allows for the generation of circular motion when encoder\nresolutions differ. It also allows for the generation of an ellipse instead of a circle. The resolution change applies for the purpose of generating the VP and\nCR commands, effectively changing the axis with the higher resolution to match the coarser resolution.",
        "Arguments": [],
        "Remarks": "\nFor VM xy\nWhen n\n0\n > n\n1\n, the resolution of x will be multiplied by n\n0\n/n\n1\nWhen n\n0\n < n\n1\n, the resolution of y will be multiplied by n\n1\n/n\n0\nThe ES command will apply to the selected coordinate system, S or T. To select the coordinate system, use the command CAS or CAT.",
        "Examples": "\n'Galil DMC Code Example\nVM \nAB\nAB\n;\nES\n \n3\n,\n4\n;\n' Divide B resolution by 4/3\nVM \nCA\nCA\n;\nES\n \n2\n,\n3\n;\n' Divide A resolution by 3/2\nVM \nAC\nAC\n;\nES\n \n3\n,\n2\n;\n' Divide A Resolution by 3/2\n'Note:  ES must be issued after VM. \n'Galil DMC Code Example\nVM \nAN\nAN\n;\nES\n \n3\n,\n2\n;\n' Divide A Resolution by 3/2\n'Note:  ES must be issued after VM. \nES applies to DMC40x0,DMC42x0,DMC41x3,DMC21x3,DMC18x6,DMC18x2,DMC30010,DMC500x0,DMC52xx0\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "ET",
        "Usage": [
            {
                "Example": "ET n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {},
        "Description": "The ET command sets the ECAM table entries for the slave axes.. The values of the master axes are not required. The slave entry (n) is the position of the\nslave axes when the master is at the point (m i) + o, where i is the interval and o is the offset as determined by the EP command.",
        "Arguments": {
            "'Galil DMC Code Example\rET[0]= 0,,0;'      Specifies the position of the slave axes A and C to be synchronized with the starting point of th\rET[1]= 1200,,400;' Specifies the position of the slave axes A and C to be synchronized with the second point of the\rEC 0;'              Set the table index value to 0, the first element in the table\rET 0,,0;'          Specifies the position of the slave axes A and C to be synchronized with the starting point of th\rET 1200,,400;'     Specifies the position of the slave axes A and C to be synchronized with the second point of the": {}
        },
        "Remarks": "\n[n\n0\n] can be omitted only if EC has initialized the index count. In this case, each ET command will increment the index counter by 1.\nn=? Returns the slave position for the specified point.",
        "Examples": "\n'Galil DMC Code Example\nET\n[\n[\n0\n]\n]\n=\n=\n \n0\n,\n,\n0\n;\n'      Specifies the position of the slave axes A and C to be synchronized with the starting point of the master.\nET\n[\n[\n1\n]\n]\n=\n=\n \n1200\n,\n,\n400\n;\n' Specifies the position of the slave axes A and C to be synchronized with the second point of the master\nEC\n \n0\n;\n'              Set the table index value to 0, the first element in the table\nET\n \n0\n,\n,\n0\n;\n'          Specifies the position of the slave axes A and C to be synchronized with the starting point of the master.\nET\n \n1200\n,\n,\n400\n;\n'     Specifies the position of the slave axes A and C to be synchronized with the second point of the master \nET applies to DMC40x0,DMC42x0,DMC41x3,DMC21x3,DMC18x6,DMC18x2,DMC30010,DMC500x0,DMC52xx0\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "EW",
        "Usage": [
            {
                "Example": "EW n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_EW0",
                "_EW1",
                "_EW2",
                "_EW3"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "The EW command allows widening the length of one or two ECAM segments beyond the width specified by EP. For ECAM tables with one or two long\nlinear sections, this allows placing more points in the curved sections of the table. There are only two widened segments, and if used they are common for\nall ECAM axes.",
        "Arguments": {
            "Argument": {
                "0": "n0",
                "1": "n1",
                "2": "n2",
                "3": "n3"
            },
            "Min": {
                "0": "1",
                "1": "1",
                "2": "3",
                "3": "1"
            },
            "Max": {
                "0": "255",
                "1": "2,147,483,647",
                "2": "255",
                "3": "2,147,483,647"
            },
            "Default": {
                "0": "-1",
                "1": "0",
                "2": "-1",
                "3": "0"
            },
            "Resolution": {
                "0": "1",
                "1": "1",
                "2": "1",
                "3": "1"
            },
            "Description": {
                "0": "Index of first widened segment",
                "1": "Length of first widened\rsegment",
                "2": "Index of second widened\rsegment",
                "3": "Length of second widened\rsegment"
            },
            "Notes": {
                "0": "If n0 = -1, no segment is widened",
                "1": "In master counts",
                "2": "If n2 = -1, no segment is widened. n2 must\rbe > n0",
                "3": "In master counts"
            }
        },
        "Remarks": "\nRemember that the widened segment lengths must be taken into account when determining the modulus (EM) for the master.\nThe second widened segment cannot be used unless the first widened segment is also being used.\nThe segments chosen should not be the first or last segments, or consecutive segments.\nOperand Usage\n_EW0 contains n\n0\n, the index of the first widened segment.\n_EW1 contains n\n1\n, the length of the first widened segment.\n_EW2 contains n\n2\n, the index of the second widened segment\n_EW3 contains n\n3\n, the length of the second widened segment.",
        "Examples": "\n'Galil DMC Code Example\nEW\n \n41\n=\n688\n;\n'            Widen segment 41 to 688 master counts\nEW\n \n41\n=\n688\n,\n \n124\n=\n688\n;\n'   Widen segments 41 and 124 to 688 master counts \nEW applies to DMC40x0,DMC42x0,DMC41x3,DMC21x3,DMC18x6,DMC18x2,DMC30010,DMC500x0,DMC52xx0\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "EY",
        "Usage": [
            {
                "Example": "EY n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_EY"
            ],
            "Explanation": "Operand holds the value last set by the command"
        },
        "Description": "The EY command sets or gets the ECAM cycle count. This is the number of times that the ECAM axes have exceeded their modulus as defined by the EM\ncommand. EY will increment by one each time the master exceeds its modulus in the positive direction, and EY will decrement by one each time the\nmaster exceeds its modulus in the negative direction.",
        "Arguments": {
            "Argument": {
                "0": "n"
            },
            "Min": {
                "0": "-2,147,483,648"
            },
            "Max": {
                "0": "2,147,483,647"
            },
            "Default": {
                "0": "0"
            },
            "Resolution": {
                "0": "1"
            },
            "Description": {
                "0": "Current ECAM cycle count"
            },
            "Notes": {
                "0": "nan"
            }
        },
        "Remarks": "\n_EY returns the current cycle count\nEY can be used to calculate the absolute position of an axis with the following equation:\nAbsolute position = EY * EM + TP",
        "Examples": "\n'Galil DMC Code Example\nMG\n \n_EY\n \n*\n \n_EM\nB\nB\n \n+\n \n_TP\nB\nB\n;\n'         print absolute position of master (Y) \nEY applies to DMC40x0,DMC42x0,DMC41x3,DMC18x6,DMC30010,DMC500x0,DMC52xx0\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "FA",
        "Usage": [
            {
                "Example": "FAm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "FA n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_FAm"
            ],
            "Explanation": "Operand holds the value last set by the command"
        },
        "Description": "The FA command sets the acceleration feedforward coefficient. This coefficient is scaled by the set acceleration and adds a torque bias voltage during the\nacceleration phase and subtracts the bias during the deceleration phase of a motion.",
        "Arguments": {
            "Argument": {
                "0": "m",
                "1": "n"
            },
            "Min": {
                "0": "A",
                "1": "0"
            },
            "Max": {
                "0": "H",
                "1": "8,191"
            },
            "Default": {
                "0": "N/A",
                "1": "0"
            },
            "Resolution": {
                "0": "Axis",
                "1": "1/4"
            },
            "Description": {
                "0": "Axis to assign value",
                "1": "Value of proportional term"
            },
            "Notes": {
                "0": "nan",
                "1": "nan"
            }
        },
        "Remarks": "\nThe Feedforward Bias product is limited to 10 Volts.\nIf the feedforward coefficient is changed during a move, then the change will not take effect until the next move.\nFA operates on PA, PR, IP, JG and PVT mode.\nFA does not operate in:\nContour Mode (CM)\nAxis is Gearing or ECAM slave\nCoordinated motion (LM, VM)\nAcceleration Feedforward Bias = FA * AC * (1.5 10-7) * ((TM/1000)^2)\nDeceleration Feedforward Bias = FA * DC * (1.5 10-7) * ((TM/1000)^2)\nFA is enabled during the PVT mode of motion.",
        "Examples": "\n'Galil DMC Code Example\n'Set feedforward coefficient to 10 for the A-axis \n'and 15 for the B-axis.  The effective bias will \n'be 0.75V for A and 2.25V for B.\n:\nAC\n \n500000\n,\n1000000\n:\nFA\n \n10\n,\n15\n:\nMG\n \n_FA\nA\nA\n,\n_FA\nB\nB\n \n10 15 \nFA applies to DMC500x0,DMC40x0,DMC42x0,DMC41x3,DMC30010,DMC21x3,DMC18x6,DMC18x2\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "FC",
        "Usage": [
            {
                "Example": "FCm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "FC n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_FCm"
            ],
            "Explanation": "Operand holds the value last set by the command"
        },
        "Description": "Adds a bias to the torque output TT proportional to the commanded velocity if the distance from the end of the move is less than FN. FC is the same as\nFV but activated FN counts from the end of the move and both positive and negative values are allowed.",
        "Arguments": {
            "Argument": {
                "0": "m",
                "1": "n"
            },
            "Min": {
                "0": "A",
                "1": "-8,191"
            },
            "Max": {
                "0": "H",
                "1": "8,191"
            },
            "Default": {
                "0": "N/A",
                "1": "0"
            },
            "Resolution": {
                "0": "Axis",
                "1": "1"
            },
            "Description": {
                "0": "Axis to assign value",
                "1": "Value of distance selectable feedforward gain"
            },
            "Notes": {
                "0": "nan",
                "1": "nan"
            }
        },
        "Remarks": "\nValid only in -NAN and -CER firmware\nBias in volts = 1.22 E-6 * FC . (commanded Velocity in counts/s)",
        "Examples": "\n'Galil DMC Code Example\nSP\nA\nA\n= \n= \n100000\n;\n'set speed to 100,000 cnts/second\nFC\nA\nA\n= \n= \n10\n;\n'    set distance-selectable velocity feedforward gain to 10\nFN\nA\nA\n= \n= \n50000\n;\n'  set distance from end of move when FC is engaged to 5000 counts\nPR\nA\nA\n= \n= \n100000\n;\n' command move of 10,000 counts\nBG \nA\nA\n;\n'       begin move\nEN\n' Move shown below with KP 0,KD 0,KI 0,K1 0,K2 0,K3 0 \nFC applies to CER,NAN\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "FE",
        "Usage": [
            {
                "Example": "FE mm",
                "Explanation": "Argument is an axis mask"
            }
        ],
        "Operands": {},
        "Description": "The FE command moves a motor until a transition is seen on the homing input for that axis. The direction of motion depends on the initial state of the\nhoming input (use the CN command to configure the polarity of the home input). Once the transition is detected, the motor decelerates to a stop.\nThis command is useful for creating your own homing sequences.",
        "Arguments": {
            "'Galil DMC Code Example\r:FE ;' Set find edge mode\r:BG ;' Begin find edge\r:FE A;' Only find edge on A\r:BG A": {}
        },
        "Remarks": "\nFind Edge only searches for a change in state on the Home Input. Use FI (Find Index) to search for the encoder index. Use HM (Home) to search for\nboth the Home input and the Index.\nRemember to specify BG after each of these commands\nSpeed of Find Edge is set with the SP command and should be low enough to allow for a minimum of a 2 sample period pulse width on the home\nsignal. With TM 1000, the pulse width must be at least 2ms.",
        "Examples": "\n'Galil DMC Code Example\n:\nFE \n;\n' Set find edge mode\n:\nBG \n;\n' Begin find edge\n:\nFE \nA\nA\n;\n' Only find edge on A\n:\nBG \nA\nA\n'Galil DMC Code Example\n:\nFE \nB\nB\n;\n' Only find edge on B\n:\nBG \nB\nB\n:\nFE \nCD\nCD\n;\n' Find edge on C and D\n:\nBG \nCD\nCD\nFE applies to DMC40x0,DMC42x0,DMC41x3,DMC21x3,DMC18x6,DMC18x2,DMC30010,DMC500x0,DMC52xx0\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "FI",
        "Usage": [
            {
                "Example": "FI mm",
                "Explanation": "Argument is an axis mask"
            }
        ],
        "Operands": {},
        "Description": "The FI and BG commands move the motor until an encoder index pulse is detected.",
        "Arguments": {
            "Argument": {
                "0": "mm"
            },
            "Min": {
                "0": "A"
            },
            "Max": {
                "0": "ABCDEFGH"
            },
            "Default": {
                "0": "N/A"
            },
            "Resolution": {
                "0": "Multi-Axis Mask"
            },
            "Description": {
                "0": "Axes to Find Index"
            },
            "Notes": {
                "0": "nan"
            }
        },
        "Remarks": "\nThe controller looks for a transition from low to high. There are 2 stages to the FI command. The first stage jogs the motor at the speed and direction\nof the JG command until a transition is detected on the index line. When the transition is detected, the position is latched and the motor will decelerate\nto a stop. In the second stage, the motor will reverse direction and move to the latched position of the index pulse at the speed set by the HV\ncommand. At the conclusion of FI, the position is defined as zero.\nFind Index only searches for a change in state on the Index. Use FE to search for the Home. Use HM (Home) to search for both the Home input and\nthe Index. Remember to specify BG after each of these commands.",
        "Examples": "\n'Galil DMC Code Example\n#home\n;\n'            Home Routine\nJG\n \n500\n;\n'           Set speed and forward direction\nFI \nA\nA\n;\n'              Find index\nBG \nA\nA\n;\n'              Begin motion\nAM \nA\nA\n;\n'              After motion\nMG\n \n\"FOUND INDEX\"\n;\n' Print message \nEN\nFI applies to DMC40x0,DMC42x0,DMC41x3,DMC21x3,DMC18x6,DMC18x2,DMC30010,DMC500x0,DMC52xx0\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "FL",
        "Usage": [
            {
                "Example": "FLm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "FL n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_FLm"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "The FL command sets the forward software position limit. If this limit is exceeded during motion, motion on that axis will decelerate to a stop. Forward\nmotion beyond this limit is not permitted.",
        "Arguments": {
            "Argument": {
                "0": "m",
                "1": "n"
            },
            "Min": {
                "0": "A",
                "1": "-2,147,483,648"
            },
            "Max": {
                "0": "H",
                "1": "2,147,483,647"
            },
            "Default": {
                "0": "N/A",
                "1": "2,147,483,647"
            },
            "Resolution": {
                "0": "Axis",
                "1": "1"
            },
            "Description": {
                "0": "Axis to assign value",
                "1": "Value of software forward limit"
            },
            "Notes": {
                "0": "nan",
                "1": "2147483647 turns off forward limit"
            }
        },
        "Remarks": "\nThe forward limit is activated at n+1. n = 2147483647 effectively disables the forward soft limit.\nThe software limit is specified in counts for a servo system or in microsteps for a stepper system.\nWhen the forward software limit is activated, the automatic subroutine #LIMSWI will be executed if it is included in the program.\nIf motion is commanded when the axis is already passed the FL value, the axis will profile a small move before the software limit is again detected.\nThis is typically encountered when commanding motion in loops, such as a jog loop.\nIn these scenarios it is recommended to use the #LIMSWI routine to stop the loop when the FL limit has been exceeded.",
        "Examples": "\n'Galil DMC Code Example\n#test\n;\n'  Test Program\nAC\n \n1000000\n;\n' Acceleration Rate\nDC\n \n1000000\n;\n' Deceleration Rate\nFL\n \n15000\n;\n' Forward Limit\nJG\n  \n5000\n;\n' Jog Forward\nBG \nA\nA\n;\n'    Begin\nAM \nA\nA\n;\n'    After Limit\nRP \nA\nA\n;\n'    Tell Position\nEN\n;\n'     End\n'Hint:  Galil controllers also provide hardware limits. \nFL applies to DMC40x0,DMC42x0,DMC41x3,DMC21x3,DMC18x6,DMC18x2,DMC30010,DMC500x0,DMC52xx0\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "FN",
        "Usage": [
            {
                "Example": "FNm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "FN n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_FNm"
            ],
            "Explanation": "Operand holds the value last set by the command"
        },
        "Description": "Adds a bias to the torque output TT proportional to the commanded velocity if the distance from the end of the move is less than FN. FC is the same as\nFV but activated FN counts from the end of the move and both positive and negative values are allowed.",
        "Arguments": {
            "Argument": {
                "0": "m",
                "1": "n"
            },
            "Min": {
                "0": "A",
                "1": "0"
            },
            "Max": {
                "0": "H",
                "1": "2,147,483,647"
            },
            "Default": {
                "0": "N/A",
                "1": "0"
            },
            "Resolution": {
                "0": "Axis",
                "1": "1"
            },
            "Description": {
                "0": "Axis to assign value",
                "1": "Distance from end of move for FC to engage"
            },
            "Notes": {
                "0": "nan",
                "1": "nan"
            }
        },
        "Remarks": "\nValid only in -NAN and -CER firmware\nBias in volts = 1.22 . E-6 . FC . (commanded Velocity in counts/s)",
        "Examples": "\n'Galil DMC Code Example\nSP\nA\nA\n= \n= \n100000\n;\n'set speed to 100,000 cnts/second\nFC\nA\nA\n= \n= \n10\n;\n'    set distance-selectable velocity feedforward gain to 10\nFN\nA\nA\n= \n= \n50000\n;\n'  set distance from end of move when FC is engaged to 5000 counts\nPR\nA\nA\n= \n= \n100000\n;\n' command move of 10,000 counts\nBG \nA\nA\n;\n'       begin move\nEN\n'Move shown below with KP 0,KD 0,KI 0,K1 0,K2 0,K3 0 \nFN applies to CER,NAN\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "FV",
        "Usage": [
            {
                "Example": "FVm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "FV n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_FVm"
            ],
            "Explanation": "Operand holds the value last set by the command"
        },
        "Description": "The FV command sets the velocity feedforward coefficient. This coefficient generates an output bias signal in proportions to the sample to sample change\nin reference position (RP).",
        "Arguments": {
            "Argument": {
                "0": "m",
                "1": "n",
                "2": "nan"
            },
            "Min": {
                "0": "A",
                "1": "0",
                "2": "0"
            },
            "Max": {
                "0": "H",
                "1": "8,191.75",
                "2": "8,191"
            },
            "Default": {
                "0": "N/A",
                "1": "0",
                "2": "0"
            },
            "Resolution": {
                "0": "Axis",
                "1": "0.25",
                "2": "1"
            },
            "Description": {
                "0": "Axis to assign value",
                "1": "Value of proportional term",
                "2": "Value of proportional term"
            },
            "Notes": {
                "0": "nan",
                "1": "nan",
                "2": "-CER firmware only."
            }
        },
        "Remarks": "\nFV also applies to Contour Mode (CM) and in gearing when an axis is a slave\nVelocity feedforward bias = FV * (Velocity [cts/s]) * (1.20 10-6) * (TM/1000)\nWith FVA=10, TM 1000 and the velocity is 200,000 count/s, the velocity feedforward bias equals 2.40 volts",
        "Examples": "\n'Galil DMC Code Example\n'Set feedforward coefficients to 10 and 20 for A and B respectively.\n'This effective bias will be 0.360 volts for A and 1.92 volts for B.\n:\nFV\n \n10\n,\n20\n:\nJG\n \n30000\n,\n80000\n:\nMG\n \n_FV\nA\nA\n,\n_FV\nB\nB\n \n10 20 \nFV applies to DMC500x0,DMC40x0,DMC42x0,DMC41x3,DMC30010,DMC21x3,DMC18x6,DMC18x2\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "GA",
        "Usage": [
            {
                "Example": "GAm0= m",
                "Explanation": "Arguments are single axis masks and are specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "GA m ...",
                "Explanation": "Arguments are single axis masks specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {},
        "Description": "The GA command specifies the master axes for electronic gearing. Multiple masters for gearing may be specified. A slave axis may have only one master.\nThe masters may be the main encoder input, auxiliary encoder input, or the commanded position of any axis. The master may also be the commanded\nvector move in a coordinated motion of LM or VM type. When the master is a simple axis, it may move in any direction and the slave follows. When the\nmaster is a commanded vector move, the vector move is considered positive and the slave will move forward if the gear ratio is positive, and backward if\nthe gear ratio is negative. The slave axes and ratios are specified with the GR command and gearing is turned off by the command GR0.",
        "Arguments": {
            "Argument": {
                "0": "m0",
                "1": "m",
                "2": "nan",
                "3": "nan",
                "4": "nan",
                "5": "nan"
            },
            "Min": {
                "0": "A",
                "1": "A",
                "2": "CA",
                "3": "DA",
                "4": "S",
                "5": "M"
            },
            "Max": {
                "0": "H",
                "1": "H",
                "2": "CH",
                "3": "DH",
                "4": "T",
                "5": "N"
            },
            "Default": {
                "0": "N/A",
                "1": "N/A",
                "2": "N/A",
                "3": "N/A",
                "4": "N/A",
                "5": "N/A"
            },
            "Resolution": {
                "0": "Axis",
                "1": "Axis",
                "2": "Axis",
                "3": "Axis",
                "4": "Axis",
                "5": "Axis"
            },
            "Description": {
                "0": "Slave axis to assign master",
                "1": "Master axis main encoder as the slave's\rmaster",
                "2": "Master axis commanded position as the\rslave's master",
                "3": "Master axis aux encoder as the slave's\rmaster",
                "4": "Vector plane as the slave's master",
                "5": "Virtual axis as the slave's master"
            },
            "Notes": {
                "0": "m0<>m",
                "1": "nan",
                "2": "Valid arguments:\rCA,CB,CC,CD,CE,CF,CG,CH",
                "3": "Valid arguments:\rDA,DB,DC,DD,DE,DF,DG,DH",
                "4": "nan",
                "5": "nan"
            }
        },
        "Remarks": "\nm=? returns the GA setting\nWhen the geared motors must be coupled \"strongly\" to the master, use the gantry mode GM\nWhen gearing is used in a gantry application, gearing off of the commanded position is recommended\nWhen an axis is geared to a master axis, the slave's geared profile will be superimposed to the slave's commanded profile",
        "Examples": "\n'Galil DMC Code Example\nREM setup gearing where B axis is master for A and C axes.\n#gear\nMO\n \nB\nB\n;\n'           Turn off servo to B motor\nGA\n \nB\nB\n,\n,\nB\nB\n;\n'        Specify master axis as B on A and C\nGR\n \n.25\n,\n,\n-\n5\n;\n'     Specify A and C gear ratios\nSH\n \nB\nB\n;\n'           Enable B axis\nPR\nB\nB\n=\n=\n \n1000\n;\nBG\n \nB\nB\n;\n' Move B axis 1000 counts\n'                A axis will be commanded to move 250 counts positive\n'                C axis will be commanded to move -5000 counts\nEN\n;\n'             End program \n'Galil DMC Code Example\nREM imaginary axis example\n#imag\nGA\nA\nA\n=\n=\n \nN\nN\n;\n'         set the imaginary N axis as the master of the A axis\nGR\nA\nA\n=\n=\n \n2.5\n;\n'       set the gear ratio for the A axis as 2.5\nPR\nN\nN\n=\n=\n \n1000\n;\n'      Move N axis 1000 counts\nPR\nA\nA\n=\n=\n \n1000\n;\n'      Move A axis 1000 counts (will be superimposed to the profiled position due to gearing)\nBG\n \nAN\nAN\n'                 (A axis will be commanded to move 3500 counts positive >> 2500 due to gearing + 1000 due to commanded move)\nEN\n;\n'             End Program \nGA applies to DMC40x0,DMC42x0,DMC41x3,DMC21x3,DMC18x6,DMC18x2,DMC30010,DMC500x0,DMC52xx0\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "GD",
        "Usage": [
            {
                "Example": "GD n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_GDm"
            ],
            "Explanation": "Operand holds the value last set by the command"
        },
        "Description": "The GD command sets the distance of the master axis over which the specified slave will be engaged, disengaged or changed to a new gear setting.",
        "Arguments": {
            "Argument": {
                "0": "m",
                "1": "n"
            },
            "Min": {
                "0": "A",
                "1": "0"
            },
            "Max": {
                "0": "H",
                "1": "32,767"
            },
            "Default": {
                "0": "N/A",
                "1": "0"
            },
            "Resolution": {
                "0": "Axis",
                "1": "1"
            },
            "Description": {
                "0": "Axis to assign value",
                "1": "Absolute Value of Gearing Distance"
            },
            "Notes": {
                "0": "nan",
                "1": "0 engages gearing instantly"
            }
        },
        "Remarks": "\nThe distance is entered as an absolute value, the motion of the master may be in either direction.\nIf the distance is set to 0, then the gearing will engage instantly.",
        "Examples": "\n'Galil DMC Code Example\n#a\nGA\n \n,\nA\nA\n;\n'   Sets the A axis as the gearing master for the B axis\nGD \n,\n5000\n;\n' Set distance over which gearing is engaged to 5000 counts of the master axis.\nJG\n \n5000\n;\n' Set the A axis jog speed to 5000 cts/sec\nBG\n \nA\nA\n;\n'    Begin motion on the A axis\nAS\n \nA\nA\n;\n'    Wait until A axis reaches the set speed of 5000 counts/sec\nGR\n \n,\n1\n;\n'   Engage gearing on the B axis with a ratio of 1:1, the \n'distance to fully engage gearing will be 5000 counts of the master axis\nWT\n \n1000\n;\n' Wait 1 second\nGR\n \n,\n3\n;\n'   Set the gear ratio to three.  The ratio will be changed \n'over the distance set by the GD command\nWT\n \n1000\n;\n' Wait 1 second\nGR\n \n,\n0\n;\n'   Disengage the gearing between the B axis slave and the \n'master.  The gearing will be disengaged over the number of \n'counts of the master specified with the GD command above\nEN\n;\n'      End program \n'Galil DMC Code Example\n#a\nGA\n \nDA\nDA\n;\n'   Set the aux encoder input as the gearing master\nGD\n \n5000\n;\n' Set distance over which gearing is engaged to 5000 counts of the master axis.\nGR\n \n1\n;\n'    Set a gear ratio of 1:1, the distance to fully \n'engage gearing will be 5000 counts of the master axis\nWT\n \n1000\n;\n' Wait 1 second\nGR\n \n3\n;\n'    Set the gear ratio to three.  The ratio will be changed \n'over the distance set by the GD command\nWT\n \n1000\n;\n' Wait 1 second\nGR\n \n0\n;\n'    Disengage the gearing between the axis aux encoder \n'The gearing will be disengaged over the number of \n'counts of the master specified with the GD command above\nEN\n;\n'      End program \nGD applies to DMC40x0,DMC42x0,DMC41x3,DMC21x3,DMC18x6,DMC18x2,DMC30010,DMC500x0,DMC52xx0\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "GM",
        "Usage": [
            {
                "Example": "GMm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "GM n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_GMm"
            ],
            "Explanation": "Operand holds the value last set by the command"
        },
        "Description": "The GM command specifies the axes in which the gearing function is performed in the Gantry mode. In this mode, the geared slaves will not be stopped\nby the ST command or by limit switches.",
        "Arguments": {
            "Argument": {
                "0": "m",
                "1": "n"
            },
            "Min": {
                "0": "A",
                "1": "0"
            },
            "Max": {
                "0": "H",
                "1": "1"
            },
            "Default": {
                "0": "N/A",
                "1": "0"
            },
            "Resolution": {
                "0": "Axis",
                "1": "1"
            },
            "Description": {
                "0": "Axis to assign value",
                "1": "Value of GM command"
            },
            "Notes": {
                "0": "nan",
                "1": "1 Enables Gantry Mode, 0 disables Gantry Mode"
            }
        },
        "Remarks": "\nThe GM command is useful for driving heavy loads on both sides with two motors (Gantry Style)\nOnly setting Gantry Mode of the slave to 0 (GMm= 0) will disable Gantry Mode",
        "Examples": "\n'Galil DMC Code Example\nGM\n \n1\n,\n1\n,\n1\n,\n1\n;\n'     Enable GM on all axes\nGM\n \n0\n;\n'           Disable GM on A-axis, other axes remain unchanged\nGM\n \n,\n,\n1\n,\n1\n;\n'       Enable GM on C-axis and D-axis, other axes remain unchanged\nGM\n \n1\n,\n0\n,\n1\n,\n0\n;\n'     Enable GM on A and C-axis, disable GM on B and D axis \n'Galil DMC Code Example\nGA\n \nDA\nDA\n;\n' Set master for A axis to the A axis Aux encoder input\nGM\n \n1\n;\n'  Enable Gantry Mode on A axis\nGR\n \n1\n;\n'  Set Gear Ratio to 1\nWT\n \n1000\nST \n;\n'    Axis will still be in gearing Mode\nWT\n \n1000\nGM\n \n0\n;\n'  Disable Gantry Mode (Axis still gearing)\nWT\n \n1000\nST \n;\n'    Will clear gearing mode\nEN\nGM applies to DMC40x0,DMC42x0,DMC41x3,DMC21x3,DMC18x6,DMC18x2,DMC30010,DMC500x0,DMC52xx0\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "GR",
        "Usage": [
            {
                "Example": "GRm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "GR n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_GRm"
            ],
            "Explanation": "Operand holds the value last set by the command"
        },
        "Description": "GR specifies the Gear Ratios for the geared axes in the electronic gearing mode. The master axis is defined by the GA command.",
        "Arguments": {
            "Argument": {
                "0": "m",
                "1": "n"
            },
            "Min": {
                "0": "A",
                "1": "-127"
            },
            "Max": {
                "0": "H",
                "1": "127"
            },
            "Default": {
                "0": "N/A",
                "1": "0"
            },
            "Resolution": {
                "0": "Axis",
                "1": "1/65,536"
            },
            "Description": {
                "0": "Slave axis to assign gear ratio",
                "1": "Value of Gear Ratio of Slave"
            },
            "Notes": {
                "0": "nan",
                "1": "n = 0 disables gearing"
            }
        },
        "Remarks": "\nThe gear ratio may be different for each geared axis.\nThe master can go in both directions.\nWhen the geared motors must be coupled \"strongly\" to the master, use the gantry mode GM.\nUnless the GM command is set to 1, gearing is disabled in the following conditions:\nThe gear ratio is set to 0\nA limit switch is reached\nThe axis is commanded to stop with the ST command",
        "Examples": "\n'Galil DMC Code Example\nREM setup gearing where B axis is master for A and C axes.\n#gear\nMO \nB\nB\n;\n'          Turn off servo to B motor\nGA \nB\nB\n,\n,\nB\nB\n;\n'       Specify master axis as B\nGR\n \n.25\n,\n,\n-\n5\n;\n'   Specify A and C gear ratios\nSH \nB\nB\n;\n'          Enable B axis\nPR\nB\nB\n= \n= \n1000\n;\nBG \nB\nB\n;\n' Move B axis 1000 counts\n'              A axis will be commanded to move 250 counts positive\n'              C axis will be commanded to move 5000 counts negative (-5000)\nEN\n;\n'           End program \n'Galil DMC Code Example\nREM setup gearing where virtual axis, N, is master for axis A.\n#gear\nGA\n \nN\nN\n;\n'   Specify master axis as N (imaginary Axis)\nGR\n \n-\n2\n;\n'  Specify gear ratio or -2\nPR\nN\nN\n= \n= \n1000\n;\nBG \nN\nN\n;\n' Move N axis 1000 counts\nWT\n \n1000\nMG\n \n_RP\nA\nA\n,\n_RP\nN\nN\n;\n' will indicate -2000 on A and 1000 on N\nEN\n;\n'           End program\n:\n'execution of gearing example\n:\nXQ\n:\n-2000.0000 1000.0000 \n:\nGR applies to DMC40x0,DMC42x0,DMC41x3,DMC21x3,DMC18x6,DMC18x2,DMC30010,DMC500x0,DMC52xx0\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "HM",
        "Usage": [
            {
                "Example": "HM mm",
                "Explanation": "Argument is an axis mask"
            }
        ],
        "Operands": {
            "Operands": [
                "_HMm"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "The HM command performs a three stage homing sequence for servo systems and a two stage sequence for stepper motors.",
        "Arguments": {
            "Argument": {
                "0": "mm"
            },
            "Min": {
                "0": "A"
            },
            "Max": {
                "0": "ABCDEFGH"
            },
            "Default": {
                "0": "ABCDEFGH"
            },
            "Resolution": {
                "0": "Multi-Axis Mask"
            },
            "Description": {
                "0": "Axis to performing Homing Routine"
            },
            "Notes": {
                "0": "No argument homes all axes"
            }
        },
        "Remarks": "\nThe FE command is derived of FE and FI commands and therefore you can create your own custom homing sequence by using the FE (Find Edge)\nand FI (Find Index) commands.\nThe sequence of FE and FI commands varies depending upon if the axis is configured for a stepper or servo\nStep One. Servos and Steppers\nDuring the first stage of the homing sequence, the motor moves at the user-programmed speed until detecting a transition on the homing input for\nthat axis. The speed for step one is set with the SP command.\nThe direction for this first stage is determined by the initial state of the homing input. The state of the homing input can be configured using the\nsecond field of the CN command.\nOnce the homing input changes state, the motor decelerates to a stop.\nStep Two. Servos and Steppers\nAt the second stage, the motor changes directions and approaches the transition again at the speed set with the HV command. When the transition is\ndetected, the motor is stopped instantaneously.\nStep Three. Servos only\nAt the third stage, the motor moves forward at the speed set with the HV command until it detects an index pulse via latch from the encoder. It\nreturns to the latched position and defines it as position 0.\nOperand\n_HMm state as a function of CN,n and Home digital input\n_CN1 value\nHome input digital state\n_HMn state\nDirection of travel if HM begun in this state\n-1\n1 (pull-up or non-active opto)\n1\nBackward\n-1\n0 (grounded or active opto)\n0\nForward\n1\n1 (pull-up or non-active opto)\n0\nForward\n1\n0 (grounded or active opto)\n1\nBackward",
        "Examples": "\n'Galil DMC Code Example\n:\nHM \n;\n'     Set Homing Mode for all axes\n:\nBG \n;\n'     Home all axes\n:\nHM \nA\nA\n;\n'     Set Homing Mode for axis A\n:\nBG \nA\nA\n;\n'     Home only the A-axis \nHM applies to DMC40x0,DMC42x0,DMC41x3,DMC21x3,DMC18x6,DMC18x2,DMC30010,DMC500x0,DMC52xx0\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "HS",
        "Usage": [
            {
                "Example": "HSm0= m",
                "Explanation": "Arguments are single axis masks and are specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "HS m ...",
                "Explanation": "Arguments are single axis masks specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {},
        "Description": "The HS command is used to switch the ethernet handle assignments between two handles. Handles are opened when a connection is established by an\nexternal client (TCP or UDP), or when a handle is assigned explicitly with the IH command. Should those assignments need modifications, the HS\ncommand allows the handles to be reassigned.",
        "Arguments": [],
        "Remarks": "\nA handle encapsulates the following 4 pieces of information:\n1. Local IP address (same for all handles)\n2. Remote IP address\n3. Local Port\n4. Remote Port\nHandles are used as a pointer to the network socket in commands such as SAh, MBh, {Eh}, and IHh where h is the handle letter",
        "Examples": "\n'Galil DMC Code Example\n:\nHS\nC\nC\n=\n=\n \nD\nD\n;\n' Connection for handle C is assigned to handle D.  Connection for handle D is assigned to handle C.\n:\nHS\nS\nS\n=\n=\n \nE\nE\n;\n' Executing handle connection is assigned to handle E.  Connection for handle E is assigned to executing handle. \nHS applies to DMC40x0,DMC42x0,DMC41x3,DMC21x3,RIO47xxx,DMC30010,DMC500x0,DMC52xx0\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "HV",
        "Usage": [
            {
                "Example": "HVm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "HV n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_HVm"
            ],
            "Explanation": "Operand holds the value last set by the command"
        },
        "Description": "Sets the slew speed for the FI final move to the index and all but the first stage of HM.",
        "Arguments": {
            "Argument": {
                "0": "m",
                "1": "n",
                "2": "nan"
            },
            "Min": {
                "0": "A",
                "1": "0",
                "2": "0"
            },
            "Max": {
                "0": "H",
                "1": "22,000,000",
                "2": "6,000,000"
            },
            "Default": {
                "0": "N/A",
                "1": "256",
                "2": "256"
            },
            "Resolution": {
                "0": "Axis",
                "1": "2",
                "2": "2"
            },
            "Description": {
                "0": "Axis to assign value",
                "1": "Value of Homing Velocity in\rcnts/second",
                "2": "Value of Homing Velocity in\rcnts/second"
            },
            "Notes": {
                "0": "nan",
                "1": "For MT settings of 1,-1,1.5 and -1.5\r(Servos)",
                "2": "For MT settings of 2,-2,2.5 and -2.5\r(Steppers)"
            }
        },
        "Remarks": "\nNone",
        "Examples": "\n'Galil DMC Code Example\nHV\nA\nA\n= \n= \n1000\n;\n'  set homing speed\nHM \nA\nA\n;\n'       home to home switch then index\nBG \nA\nA\n;\n'       begin motion\nAM \nA\nA\n;\n'       wait for motion complete\nEN\n;\n'        end program \nHV applies to DMC40x0,DMC42x0,DMC41x3,DMC18x6,DMC30010,DMC500x0,DMC52xx0\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "HX",
        "Usage": [
            {
                "Example": "HX n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_HX0",
                "_HX1",
                "_HX2",
                "_HX3",
                "_HX4",
                "_HX5",
                "_HX6",
                "_HX7"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "The HX command halts the execution of any program that is running.The parameter n specifies the thread to be halted.",
        "Arguments": {
            "Argument": {
                "0": "n"
            },
            "Min": {
                "0": "0"
            },
            "Max": {
                "0": "7"
            },
            "Default": {
                "0": "N/A"
            },
            "Resolution": {
                "0": "1"
            },
            "Description": {
                "0": "Thread number to halt"
            },
            "Notes": {
                "0": "If n omitted, all threads are halted."
            }
        },
        "Remarks": "\nWhen used as an operand, _HXn contains the running status of thread n with:\n0 \nThread not running\n1 \nThread is running\n2 \nThread has stopped at trippoint",
        "Examples": "\n'Galil DMC Code Example\nXQ\n \n#a\n;\n'    Execute program #A, thread zero\nXQ\n \n#b\n,\n3\n;\n' Execute program #B, thread three\nHX \n0\n;\n'     Halt thread zero\nHX \n3\n;\n'    Halt thread three \nHX applies to DMC500x0,DMC52xx0,DMC40x0,DMC42x0,DMC41x3,DMC30010,DMC21x3,DMC18x6,DMC18x2,RIO47xxx\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "IA",
        "Usage": [
            {
                "Example": "IA n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_IA0",
                "_IA1",
                "_IA2",
                "_IA3",
                "_IA4",
                "_IA5"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "The IA command assigns the controller IP address and the TCP time out. The IP address can also be assigned via Galil software or from an external server.\nThe controller defaults to DHCP and will receive an IP address from a DHCP server if present. To manually set an IP address over the serial connection,\nsend DH0 to disable DHCP prior to setting the new IP address with IA.\nGalilTools and GalilSuite software packages feature a DHCP/BOOTP capability to assign the IP address to the controller. Please refer to the user manuals for\nthose products for more information.",
        "Arguments": {
            "_IA1\r_IA2\r_IA3\r_IA4\r_IA5": {},
            "Operand has special meaning, see Remarks": {}
        },
        "Remarks": "\nWhen specifying the IP address with IA, remember to use commas as delimeters instead of periods.\nn\n4\n = ? will return the IP address of the controller in comma seperated format.\nSetting the IP address over Ethernet to a new value will cause an immediate disconnect/timeout. Reconnect to the controller on the new IP address\nand issue a BN to save the new value to flash.\nTo change the IP address manually over Ethernet on a controller which was initially assigned via DHCP, send \"DH 0;IA n\n0\n,n\n1\n,n\n2\n,n\n3\n\" as one command\nline. Reconect on the new IP and issue BN to save.\nOperands\n_IA0 contains the IP address representing a 32 bit signed number (Two's complement). See the example below.\n_IA1 contains the value for o (retry time).\n_IA2 contains the number of available handles.\n_IA3 contains the number of the handle using this operand where the number is 0 to 7. 0 represents handle A, 1 handle B, etc. This is used by a\nremote device to detect its outgoing handle (see WH).\n_IA4 contains the number of the handle that lost communication last, contains a -1 on reset to indicate no handles lost.\n_IA5 returns autonegotiation Ethernet speed. Returns 10 for 10-Base T and returns 100 for 100-Base T, it will return -1 if there is no physical link.",
        "Examples": "\n'Galil DMC Code Example\nIA\n \n151\n,\n12\n,\n53\n,\n89\n;\n' Assigns the controller with the address 151.12.53.89\nIA\n \n2534159705\n;\n'   Assigns the controller with the address 151.12.53.89\nIA\n \n<\n \n500\n;\n'        Sets the timeout value to 500 msec \n'Galil DMC Code Example\nREM The individual IP address bytes can be derived within embedded code using _IA0\na\n= \n= \n@INT\n[\n[\n(\n(\n_IA0\n&\n(\n(\n$FF000000\n)\n)\n)\n)\n/\n$1000000\n]\n]\n&\n$FF\nb\n= \n= \n@INT\n[\n[\n(\n(\n_IA0\n&\n(\n(\n$00FF0000\n)\n)\n)\n)\n/\n$10000\n]\n]\nc\n= \n= \n@INT\n[\n[\n(\n(\n_IA0\n&\n(\n(\n$0000FF00\n)\n)\n)\n)\n/\n$100\n]\n]\nd\n= \n= \n@INT\n[\n[\n(\n(\n_IA0\n&\n(\n(\n$000000FF\n)\n)\n)\n)\n]\n]\nREM IP address = a.b.c.d \nIA applies to DMC40x0,DMC42x0,DMC41x3,DMC21x3,RIO47xxx,DMC30010,DMC500x0,DMC52xx0\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "ID",
        "Usage": [
            {
                "Example": "ID",
                "Explanation": "Command takes no arguments"
            }
        ],
        "Operands": {},
        "Description": "The ID command is used to query the controller for the hardware configuration and factory programming.",
        "Arguments": [],
        "Remarks": "\nRefer to the Examples section for actual controller responses\nThe following are descriptions of the ID response\nThe ID command follows this pattern:\nThis ID response is applicable to the part number: DMC-4060(-16bit)-C012-I000-I100-D4040-D3020 \nDMC4000 16 bit adc option rev 0\nConnector J3= Communications Board CMB-41012 3.3 volt i/o rev 0\nConnector J1= \nConnector J2= 42100 Sine \nrev 1\nConnector P1= Stepper Amplifier Board AMP-44040 \nrev 0\nConnector P2= Servo Amplifier Board AMP-43020 500 watt \nrev 1\n:\nThe ID command follows this pattern:\nDMC4000 [bits] rev 0\nConnector J3= Communications Board CMB-41012 [IO type] rev 0 \nConnector J1/J2= [icm type] [encoder] rev 0\nConnector P1/P2= [drive type] Amplifier Board [model] rev 0\n[bits]\n - '16 bit adc option' if -16bit option ordered\nNo string returned here indicates standard 12 bit analog input\n[IO type]\n - '3.3 volt i/o' for standard 3.3V extended IO\n'5 volt i/o' for -5V option ordered\nJ1/J2\nJ1 = A-D axes ICM\nJ2 = E-H axes ICM. No string is output for J2 on a 1-4 axis controller\nAn empty string after the = sign indicates that it is a standard ICM with no additional encoder option.\n[icm type]\n - specifies the ICM model number used.\n'42000' is the -I000 option\n'42100' is the -I100 option\n'42200' is the -I200 option\n[encoder]\n - specifies the encoder option available on this ICM\n'Sine' indicates sin/cos encoder support\n'SSI' indicates SSI encoder support\n'Biss option' indicates BiSS encoder support\nP1/P2\nP1 = A-D axes amp.\nP2 = E-H axes amp. No string is shown for P2 on a 1-4 axis controller\nIf no string is displayed, then that indicates that no drive is present for that set of 4 axes\n[drive type]\n - specifies the drive avaiable on this set of 4 axes\n'Servo' indicates standard servo drives\n'Stepper' indicates stepper drive\n'Sine' indicates sinusoidally commutated servo drives\n[model]\n - specifies the ordered drive option for that set of 4 axes\n'AMP-43040 500 watt' for -D3040 option\n'AMP-43020 500 watt' for -D3020 option\n'AMP-43140 1 A' for -D3140 option\n'AMP-44040' for -D4040 option\n'AMP-44140' for -D4140 option\n'AMP-43540' for sine drive option\nNote that the rev number at the end of each line of the ID command indicates the hardware revision of that board. \nNewer board revisions will have a higher revision value.",
        "Examples": "\n'Galil DMC Code Example"
    },
    {
        "Command": "ID",
        "Usage": [],
        "Operands": {},
        "Description": "",
        "Arguments": [],
        "Remarks": "",
        "Examples": ""
    },
    {
        "Command": "IF",
        "Usage": [
            {
                "Example": "IF n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {},
        "Description": "The IF command is used in conjunction with an ENDIF command to form an IF conditional statement. The arguments consist of one or more conditional\nstatements and each condition must be enclosed with parenthesis (). If the conditional statement(s) evaluates true, the command interpreter will continue\nexecuting commands which follow the IF command. If the conditional statement evaluates false, the controller will ignore commands until the associated\nENDIF command or an ELSE command occurs in the program.",
        "Arguments": [],
        "Remarks": "\nConditions are tested with the following logical operators:\n< less than or equal to\n> greater than\n= equal to\n<= less than or equal to\n>= greater than or equal to\n<> not equal\nBit wise operators | and & can be used to evaluate multiple conditions.\nA true condition = 1 and a false condition = 0.\nEach condition must be placed in parenthesis for proper evaluation by the controller.\n'Galil DMC Code Example\nIF \n(\n(\n(\n(\nvar0\n=\n1\n)\n)\n&\n(\n(\nvar1\n=\n2\n)\n)\n)\n)\n;\n' valid IF statement\nIF\n \nvar0\n=\n1\n&\nvar1\n=\n2\n;\n'      invalid IF statement\nIF\n \n(\n(\nvar0\n=\n1\n&\nvar1\n=\n2\n)\n)\n;\n'    invalid IF statement ",
        "Examples": "\n'Galil DMC Code Example\n#a\nIF\n \n(\n(\n_TE\nA\nA\n<\n1000\n)\n)\n;\n'  IF conditional statement based on a motor position\n \nMG\n \n\"Motor is within 1000 counts of zero\"\n;\n' Message to be executed for true\nENDIF \n;\n'           End of IF conditional statement\nEN\n;\n'              End Program \n'Galil DMC Code Example\n#input\nIF\n \n(\n(\n@IN\n[\n[\n1\n]\n]\n=\n0\n)\n)\n;\n'          IF conditional statement based on input 1\n \nMG\n \n\"Input 1 is Low\"\n;\n'   Message to be executed if \"IF\" statement is true\nENDIF \n;\n'                  End of IF conditional statement\nEN\n'Galil DMC Code Example\n#var\nv1\n= \n= \n@AN\n[\n[\n1\n]\n]\n*\n5\n;\n'            some calculation for variable v1\nIF \n(\n(\n(\n(\nv1\n>\n25\n)\n)\n&\n(\n(\n@IN\n[\n[\n4\n]\n]\n=\n1\n)\n)\n)\n)\n;\n' Conditions based on V1 variable and input 4 status\n \nMG\n \n\"Conditions met\"\n;\n'   Message to be executed if \"IF\" statement is true\nENDIF \n;\n'                  End of IF statement\nEN\n'Galil DMC Code Example\nREM The conditions of an if statement can be simplied with the fact that \nREM a true condition = 1 and a false condition = 0.\n#true\nv1\n= \n= \n1\nIF\n \n(\n(\nv1\n)\n)\n \nMG\n \n\"True v1=\"\n,\nv1\nENDIF\n#false\nv1\n= \n= \n0\nIF\n \n(\n(\nv1\n)\n)\n \n'if statement evaluates false\nELSE\n \nMG\n \n\"False v1=\"\n,\n0\nENDIF\nEN\nIF applies to DMC500x0,DMC52xx0,DMC40x0,DMC42x0,DMC41x3,DMC30010,DMC21x3,DMC18x6,DMC18x2,RIO47xxx"
    },
    {
        "Command": "documentation@galilmc.com",
        "Usage": [],
        "Operands": {},
        "Description": "",
        "Arguments": [],
        "Remarks": "",
        "Examples": ""
    },
    {
        "Command": "IH",
        "Usage": [
            {
                "Example": "IHm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            }
        ],
        "Operands": {
            "Operands": [
                "_IHm0",
                "_IHm1",
                "_IHm2",
                "_IHm3",
                "_IHm4"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "The IH command is used when the controller is operated as a master (client) to open a handle and connect to a slave (server).",
        "Arguments": {
            "_IHm1\r_IHm2\r_IHm3\r_IHm4": {},
            "Operand has special meaning, see Remarks": {}
        },
        "Remarks": "",
        "Examples": ""
    },
    {
        "Command": "Attempting to establish UDP handle",
        "Usage": [],
        "Operands": {},
        "Description": "",
        "Arguments": {
            "'Galil DMC Code Example\r'setting up a modbus handle\rMW 1;'                        setup modbus wait\rIHE= 192,168,100,200<502>2;' setup a modbus handle to slave\r#wt;'                        wait for handle to be connected\rWT 2;'                        before issuing a command\rJP #wt,_IHE2<>-2;'\rSB 5003;'                     Set output 3 on slave\rWT 1000;'                     1 second wait\rMBE= ,5,3,0;'                Clear output 3 using MB command\rEN": {}
        },
        "Remarks": "",
        "Examples": "\n'Galil DMC Code Example\nIH\nA\nA\n= \n= \n251\n,\n29\n,\n51\n,\n1\n;\n'     Open handle A at IP address 251.29.51.1\n'TCP is used as default\nIH\nA\nA\n=\n=\n \n-\n2095238399\n;\n'    Open handle A at IP address 251.29.51.1\n'When the IH command is given, \n'the controller initializes an ARP\n'on the slave device before opening a handle.  \n'This operation can cause a small time delay \n'before the controller responds \n'Galil DMC Code Example\n'setting up a modbus handle\nMW \n1\n;\n'                        setup modbus wait\nIH\nE\nE\n=\n=\n \n192\n,\n168\n,\n100\n,\n200\n<\n502\n>\n2\n;\n' setup a modbus handle to slave\n#wt\n;\n'                        wait for handle to be connected\nWT \n2\n;\n'                        before issuing a command\nJP \n#wt\n,\n_IH\nE\nE\n2\n<>\n-\n2\n;\n'\nSB \n5003\n;\n'                     Set output 3 on slave\nWT \n1000\n;\n'                     1 second wait\nMB\nE\nE\n=\n=\n \n,\n5\n,\n3\n,\n0\n;\n'                Clear output 3 using MB command\nEN\nIH applies to DMC40x0,DMC42x0,DMC41x3,DMC21x3,RIO47xxx,DMC30010,DMC500x0,DMC52xx0\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "II",
        "Usage": [
            {
                "Example": "II n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {},
        "Description": "The II command enables the input interrupt function for the specified inputs.\nIf any of the specified inputs are activated during program execution, the program will jump to the subroutine with label #ININT. Any trippoints set by the\nprogram will be cleared but can be re-enabled by the proper termination of the interrupt subroutine using RI.",
        "Arguments": [],
        "Remarks": "\nn\n3\n0\n255\n0\n1\nBitmask specifying required input state for\ninterrupt trigger\nDefault=interrupt triggers on low\ninputs, see Remarks\nRemarks\nThe argument n\n2\n is an integer value and represents a binary number showing the inputs selected for the input interrupt function.\nFor example, if n\n2\n = 15, the binary equivalent is 00001111 where the bottom 4 bits are 1 (bit 0 through bit 3) and the top 4 bits are 0 (bit 4\nthrough bit 7). Each bit represents an interrupt to be enabled - bit0 for interrupt 1, bit 1 for interrupt 2, etc. If o=15, the inputs 1,2,3 and 4\nwould be enabled.\nThis argument n\n3\n is an integer value and represents a binary number showing which inputs will trigger on a logic '1' and which on a logic '0'. This\nbinary number is used to logically \"AND\" with the inputs which have been specified by the parameters n\n1\n and n\n2\n or the parameter n\n3\n.\nFor example, if n\n1\n=1 and n\n2\n=4, the inputs 1,2,3 and 4 have been activated. If the value for n\n3\n is 2 (the binary equivalent of 2 is 00000010),\ninput 2 will be activated by a logic '1' and inputs 1,3, and 4 will be activated with a logic \"0\".\nThe RI command is used to return from the #ININT routine.",
        "Examples": "\n'Galil DMC Code Example\n#a\n;\n'                        Program A\nII\n \n1\n;\n'                      Specify interrupt on input 1\nJG\n \n5000\n;\nBG\n \nA\nA\n;\n'              Specify jog and begin motion on A axis\n#loop\n;\nJP\n \n#loop\n;\n'            Loop to keep thread zero active, only necesary on Econo (21x3/18x2)\nEN\n;\n'                        End Program\n#ININT\n#ININT\n;\n'                    Interrupt subroutine\nST\n \nA\nA\n;\nMG\n \n\"INTERRUPT\"\n;\nAM\n \nA\nA\n;\n'  Stop A, print message, wait for motion to complete\nAI\n \n1\n;\n'                      Wait for input to switch states before continuing\n'                            Otherwise we'll jump back in to #ININT\nBG\n \nA\nA\n;\n'                      Begin motion\nRI\n \n0\n;\n'                      Return to main program, don't re-enable trippoints \nII applies to DMC500x0,DMC52xx0,DMC40x0,DMC42x0,DMC41x3,DMC30010,DMC21x3,DMC18x6,DMC18x2,RIO47xxx\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "IK",
        "Usage": [
            {
                "Example": "IK n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {},
        "Description": "The IK command blocks client connections to the controller on most ports below port number 1000. Specific port numbers and ports above 1000 are\nunaffected.",
        "Arguments": {
            "'Galil DMC Code Example\r:IK 1;' Blocks undesirable port communication\r:IK 0;' Allows all Ethernet ports to be used\r:": {}
        },
        "Remarks": "\nA Galil Ethernet controller simultaneusly operates as a server (listening for Ethernet connections from a client) and a client (able to create connections\nto a server).\nPorts 0, 23, 68 and 502 are used for standard client connections to the controller.",
        "Examples": "\n'Galil DMC Code Example\n:\nIK \n1\n;\n' Blocks undesirable port communication\n:\nIK \n0\n;\n' Allows all Ethernet ports to be used\n:\nIK applies to DMC40x0,DMC42x0,DMC41x3,DMC21x3,RIO47xxx,DMC30010,DMC500x0,DMC52xx0\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "IL",
        "Usage": [
            {
                "Example": "ILm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "IL n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_ILm"
            ],
            "Explanation": "Operand holds the value last set by the command"
        },
        "Description": "The IL command limits the effect of the integrator gain in the filter to a certain voltage.",
        "Arguments": {
            "Argument": {
                "0": "m",
                "1": "n"
            },
            "Min": {
                "0": "A",
                "1": "-9.998"
            },
            "Max": {
                "0": "H",
                "1": "9.998"
            },
            "Default": {
                "0": "N/A",
                "1": "9.998"
            },
            "Resolution": {
                "0": "Axis",
                "1": "20/65,536"
            },
            "Description": {
                "0": "Axis to assign value",
                "1": "Value of Integrator limit\rin volts"
            },
            "Notes": {
                "0": "nan",
                "1": "n< 0 (negative value) freezes the effect of the\rintegrator during the move"
            }
        },
        "Remarks": "\nIL is the absolute value of the integrator limit. \nFor example:\nILA= 2 limits the output of the integrator of the A-axis to the +/-2 Volt range.\nKD and KP terms remain active in any case. The output from the KD and KP terms is not affected.\nA negative parameter will freeze the effect of the integrator during the move. \nFor Example:\nILA= -3 limits the integrator output of the A axis to +/-3V but freezes the contribution of the Integrator loop during motion.\nIf, at the start of the motion, the integrator output is 1.6 Volts, that level will be maintained through the move and the integrator will not accumulate\nduring the move.\nOnce the profiled move has completed (RP has reached final commanded position), the integrator loop will be enabled.",
        "Examples": "\n'Galil DMC Code Example\nKI\n \n2\n,\n3\n,\n5\n,\n8\n;\n' Integrator constants\nIL\n \n3\n,\n2\n,\n7\n,\n2\n;\n' Integrator limits\nIL\n \n?\n?\n;\n'   Returns the A-axis limit \nIL applies to DMC500x0,DMC40x0,DMC42x0,DMC41x3,DMC30010,DMC21x3,RIO47xxx,DMC18x6,DMC18x2\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "IN",
        "Usage": [
            {
                "Example": "IN n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {},
        "Description": "The IN command allows a variable to be input from a keyboard. When the IN command is executed in a program, the prompt message is displayed. The\noperator then enters the variable value followed by a carriage return. The entered value is assigned to the specified variable name. The IN command holds\nup execution of following commands in a program until a carriage return or semicolon is detected. If no value is given prior to a semicolon or carriage\nreturn, the previous variable value is kept.",
        "Arguments": [],
        "Remarks": "\nThe IN command may only be used in thread 0\nDo not include a space between the comma at the end of the input message and the variable name\nEntire command must be less than the total maximum line length. This determines the maximum length of str.\nBacklash'\\' character will clear the IN command trippoint. \nThe variable will not be overwritten in (will be last set value).\nThe IN command can only be used with a serial connection to the controller\nInput Interrupts, Error Interrupts and Limit Switch Interrupts will still be active during the prompt",
        "Examples": "\n'Galil DMC Code Example\n'Operator specifies length of material to be cut in inches and speed in inches/sec (2 pitch lead screw, 2000 counts/rev encoder).\n#a\n;\n'                          Program A\nIN\n \n\"Enter Speed(in/sec)\"\n,\nv1\n;\n' Prompt operator for speed\nIN\n \n\"Enter Length(in)\"\n,\nv2\n;\n'    Prompt for length\nv3\n=\n=\n \nv1\n*\n4000\n;\n'                 Convert units to counts/sec\nv4\n=\n=\n \nv2\n*\n4000\n;\n'                 Convert units to counts\nSP\n \nv3\n;\n'                       Speed command\nPR\n \nv4\n;\n'                       Position command\nBG\n \nA\nA\n;\n'                        Begin motion\nAM\n \nA\nA\n;\n'                        Wait for motion complete\nMG\n \n\"MOVE DONE\"\n;\n'              Print Message\nEN\n;\n'                          End Program \nIN applies to DMC500x0,DMC40x0,DMC42x0,DMC21x3,RIO47xxx,DMC18x6,DMC18x2\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "IP",
        "Usage": [
            {
                "Example": "IPm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "IP n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {},
        "Description": "The IP command allows for a change in the command position while the motor is moving. This command does not require a BG.",
        "Arguments": {
            "Argument": {
                "0": "m",
                "1": "nan",
                "2": "n"
            },
            "Min": {
                "0": "A",
                "1": "M",
                "2": "-2,147,483,648"
            },
            "Max": {
                "0": "H",
                "1": "N",
                "2": "2,147,483,647"
            },
            "Default": {
                "0": "N/A",
                "1": "N/A",
                "2": "N/A"
            },
            "Resolution": {
                "0": "Axis",
                "1": "Axis",
                "2": "1"
            },
            "Description": {
                "0": "Axis to assign value",
                "1": "Imaginary axis to assign value",
                "2": "Value of incremental move"
            },
            "Notes": {
                "0": "nan",
                "1": "nan",
                "2": "nan"
            }
        },
        "Remarks": "\n_IPm contains the current position of the motor\nThe IP command has four effects depending on the mode of motion being executed.\nIP operation based upon modes of motion\nCase\nEquivalent Commands\nDescription\nMotor is\nstanding still\nIPm=n Equivalent to\nPRm=n;BGm\nMotor will move to specified position with the predefined AC,DC,SP values.\nMotor is\nmoving\ntoward\nposition n\nPRm=n\n0\n; BGm;IPm=n\n1\nEquivalent to PRm=\n(n\n0\n+n\n1\n); BGm\nMotor will move a relative move of (n\n0\n+n\n1\n).\nMotor is in\nJog Mode\nJGm=n\n0\n;BGm;IPm=n\n1\nEquivalent to Continuing jog\nfrom (current position + n\n1\n)\nThe motor will instantly try to servo to a position which is the current instantaneous position plus the\nspecified IP position. SP and AC parameters have no effect. This command is useful when synchronizing 2\naxes in which one of the axis' speed is indeterminate due to a variable diameter pulley.\nMotor is a\nslave in\ngearing\nmode\nGAm= m0; GRm=n\n0\n;\nIPm=n\n1\n \nEquivalent to GAm=\nm0; GRm=n\n0\n; PRm=n\n1\n;\nBGm\nThe motor will move with the predefined AC,DC,SP values superimposed on top of the existing gearing\nmotion.",
        "Examples": "\n'Galil DMC Code Example\nIP\n \n50\n;\n'  50 counts with set acceleration and speed\n#correct\n;\n' Label\nAC\n \n100000\n;\n' Set acceleration\nJG\n \n10000\n;\nBG \nA\nA\n;\n' Jog at 10000 counts/sec rate\nWT\n \n1000\n;\n' Wait 1000 msec\nIP\n \n10\n;\n'   Move the motor 10 counts instantaneously\nST \nA\nA\n;\n'    Stop Motion\nEN\nIP applies to DMC40x0,DMC42x0,DMC41x3,DMC21x3,DMC18x6,DMC18x2,DMC30010,DMC500x0,DMC52xx0\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "IT",
        "Usage": [
            {
                "Example": "ITm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "IT n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_ITm"
            ],
            "Explanation": "Operand holds the value last set by the command"
        },
        "Description": "The IT command filters the acceleration and deceleration functions of independent moves such as JG, PR, PA to produce a smooth velocity profile. The\nresulting profile, known as smoothing, has continuous acceleration and results in reduced mechanical vibrations. IT sets the bandwidth of the filter where 1\nmeans no filtering and 0.004 means maximum filtering.\nThe IT command also filters the individual axes during Vector Mode (VM) and Linear Interpolation Mode (LM).",
        "Arguments": {
            "Argument": {
                "0": "m",
                "1": "n"
            },
            "Min": {
                "0": "A",
                "1": "0.004"
            },
            "Max": {
                "0": "H",
                "1": "1"
            },
            "Default": {
                "0": "N/A",
                "1": "1"
            },
            "Resolution": {
                "0": "Axis",
                "1": "1/256"
            },
            "Description": {
                "0": "Axis to assign value",
                "1": "Value of independent smoothing\rfunction"
            },
            "Notes": {
                "0": "nan",
                "1": "1 = no filtering, 0.004 = maximum\rfiltering"
            }
        },
        "Remarks": "\nThe IT filtering results in longer motion time.\nThe use of IT will not effect the trippoints AR and AD.\nThe trippoints AR & AD monitor the profile prior to the IT filter and therefore can be satisfied before the actual distance has been reached if IT is\nNOT 1.\nDetails on the IT filtering can be found in Application Note #3412\n[\nhttp://www.galil.com/learn/application-notes\n]",
        "Examples": "\n'Galil DMC Code Example\n:\nIT\n \n0.8\n,\n \n0.6\n,\n \n0.9\n,\n \n0.1\n;\n' Set independent time constants for a,b,c,d axes\n:\nIT\n \n?\n?\n;\n' Return independent time constant for A-axis\n0.8000 \n'Galil DMC Code Example\nREM example showing increased time due to IT filtering\n#move\nIT\n \n1\nt\n= \n= \nTIME\n;\n'store time reference\nPR\n \n1000\nBG \nA\nA\n;\nAM \nA\nA\nMG\n \nTIME\n-\nt\n;\n'display move time\nIT\n \n0.01\nt\n= \n= \nTIME\n;\n'store time reference\nPR\n \n1000\nBG \nA\nA\n;\nAM \nA\nA\nMG\n \nTIME\n-\nt\n;\n'display move time\nEN\n:\n'program execution output\n:\nXQ\n:\n508.0000 \n1112.0000 \n:\nIT applies to DMC40x0,DMC42x0,DMC41x3,DMC21x3,DMC18x6,DMC18x2,DMC30010,DMC500x0,DMC52xx0\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "JG",
        "Usage": [
            {
                "Example": "JGm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "JG n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_JGm"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "The JG command sets the jog mode and the jog slew speed of the axes.",
        "Arguments": {
            "Argument": {
                "0": "m",
                "1": "nan",
                "2": "n",
                "3": "nan",
                "4": "nan"
            },
            "Min": {
                "0": "A",
                "1": "N",
                "2": "-\r22,000,000",
                "3": "-6,000,000",
                "4": "-\r50,000,000"
            },
            "Max": {
                "0": "H",
                "1": "M",
                "2": "22,000,000",
                "3": "6,000,000",
                "4": "50,000,000"
            },
            "Default": {
                "0": "N/A",
                "1": "N/A",
                "2": "25,000",
                "3": "25,000",
                "4": "25,000"
            },
            "Resolution": {
                "0": "Axis",
                "1": "Axis",
                "2": "2",
                "3": "2",
                "4": "2"
            },
            "Description": {
                "0": "Axis to assign value",
                "1": "Virtual axis to assign value",
                "2": "Value of jog speed in\rcnts/second",
                "3": "Value of jog speed in\rcnts/second",
                "4": "Vale of jog speed in cnts/second"
            },
            "Notes": {
                "0": "nan",
                "1": "nan",
                "2": "For MT settings of 1,-1,1.5 and -1.5 (Servos)",
                "3": "For MT settings of 2,-2,2.5 and -2.5\r(Steppers)",
                "4": "ICM-42100 with AF>=5"
            }
        },
        "Remarks": "\nWhen jogging, the motion controller profiles a continuous move at the commanded speed.\nTo stop the motion, use the ST command.\nJG 2 is the minimum non-zero speed\n_JGm contains the absolute value of the jog speed for the specified axis.\nThe JG command will set the SP register with the absolute value of the 'n' value.\nResolution\nThe resolution of the JG command is dependent upon the update rate setting (TM).\nWith the default rate of TM 1000 the resolution is 2 cnts/second.\nThe equation to calculate the resolution of the JG command is:\nresolution = 2*(1000/TM)\nexample:\nWith TM 250 the resolution of the JG command is 8 cnts/second\nresolution = 2*(1000/250) = 8",
        "Examples": "\n'Galil DMC Code Example\n#jg\nJG\n \n100\n,\n500\n,\n2000\n,\n5000\n'                      Sets for jog mode with a slew speed of 100 counts/sec for the A-axis,\n'                      500 counts/sec for the B-axis,\n'                      2000 counts/sec for the C-axis,\n'                      and 5000 counts/sec for D-axis.\nBG \n;\n'                   Begin Motion\nWT\n \n1000\n;\n'              Wait one second\nJG\n \n,\n,\n-\n2000\n;\n'        Change the C-axis to slew in the negative direction at -2000 counts/sec.\nEN\nJG applies to DMC40x0,DMC42x0,DMC41x3,DMC21x3,DMC18x6,DMC18x2,DMC30010,DMC500x0,DMC52xx0\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "JP",
        "Usage": [
            {
                "Example": "JP n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {},
        "Description": "The JP command causes a jump to a program location on a specified condition. The program location may be any program line number or label. A jump\nis taken if the specified condition is true. Multiple conditions can be used in a single jump statement.\nJP can be used for relative jumps and for jump tables, see Examples.",
        "Arguments": {
            "Argument": {
                "0": "str",
                "1": "n",
                "2": "ex"
            },
            "Min": {
                "0": "1 char",
                "1": "0",
                "2": "N/A"
            },
            "Max": {
                "0": "7 chars",
                "1": "see Notes",
                "2": "N/A"
            },
            "Default": {
                "0": "N/A",
                "1": "N/A",
                "2": "N/A"
            },
            "Resolution": {
                "0": "String",
                "1": "1",
                "2": "Expression"
            },
            "Description": {
                "0": "Label name for jump destination",
                "1": "Line number for jump destination",
                "2": "Conditional statement/s that must\revaluate true for jump to occur"
            },
            "Notes": {
                "0": "Must be a valid label in application\rcode",
                "1": "Maximum is number of lines of\rcontroller program memory - 1",
                "2": "If omitted, JP automatically evaluates\ras true"
            }
        },
        "Remarks": "\nThe logical operators that can be used in the conditional statement are:\n< less than\n> greater than\n= equal to\n<= less than or equal to\n>= greater than or equal to\n<> not equal to\nThe conditional statements are combined in pairs using the operands \"&\" and \"|\".\nThe \"&\" operand between any two conditions requires that both statements must be true for the combined statement to be true.\nThe \"|\" operand between any two conditions requires that only one statement be true for the combined statement to be true.\nEach condition must be placed in parentheses for proper evaluation by the controller.\n'Galil DMC Code Example\nREM Use of parentheses\nJP \n#a\n,\n(\n(\n(\n(\nvar0\n=\n1\n)\n)\n&\n(\n(\nvar1\n=\n2\n)\n)\n)\n)\n;\n' valid conditional jump\nJP \n#a\n,\nvar0\n=\n1\n&\nvar1\n=\n2\n;\n'       invalid conditional jump ",
        "Examples": "\n'Galil DMC Code Example\nJP\n \n#pos1\n,\n(\n(\nv1\n<\n5\n)\n)\n;\n'   Jump to label #POS1 if variable V1 is less than 5\nJP\n \n#a\n,\n(\n(\n(\n(\nv7\n*\nv8\n)\n)\n=\n0\n)\n)\n;\n' Jump to #A if V7 times V8 equals 0\nJP\n \n#b\n,\n(\n(\n@IN\n[\n[\n1\n]\n]\n=\n1\n)\n)\n;\n'  Jump to #B if input 1 = 1\nJP\n \n#c\n;\n'             Jump to #C unconditionally \nJump Table\n'Galil DMC Code Example\nREM Example of jumping to a label plus an offset\nREM #error is a subroutine that prints an error\nREM  message based on the value of an error\nREM  variable, ecode\n#a\nREM Set error code and then JS to sub\necode\n \n=\n=\n \n1\nJS\n \n#error\necode\n \n=\n=\n \n3\nJS\n \n#error\necode\n \n=\n=\n \n56\n;\n' bad error code\nJS\n \n#error\nEN\n'\n'***************\n'Example of a Jump table\n#error\nREM First check that ecode is valid\nIF\n \n(\n(\necode\n \n<\n \n0\n)\n)\n \necode\n \n=\n=\n \n4\nENDIF\nIF\n \n(\n(\necode\n \n>\n \n4\n)\n)\n \necode\n \n=\n=\n \n4\nENDIF\nREM Call the helper label with an offset\nJP \n#error_h\n \n+\n \necode"
    },
    {
        "Command": "' spacing in following text",
        "Usage": [],
        "Operands": {},
        "Description": "",
        "Arguments": [],
        "Remarks": "",
        "Examples": ""
    },
    {
        "Command": "JS",
        "Usage": [
            {
                "Example": "JS n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_JS"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "Allows the program to jump to a subroutine and return back after completion. This command is often used to call reusable code.",
        "Arguments": {
            "Argument": {
                "0": "str",
                "1": "n",
                "2": "n",
                "3": "ex",
                "4": "arg"
            },
            "Min": {
                "0": "1 char",
                "1": "0",
                "2": "0",
                "3": "N/A",
                "4": "N/A"
            },
            "Max": {
                "0": "7 chars",
                "1": "3,999",
                "2": "1,999",
                "3": "N/A",
                "4": "N/A"
            },
            "Default": {
                "0": "N/A",
                "1": "N/A",
                "2": "N/A",
                "3": "N/A",
                "4": "N/A"
            },
            "Resolution": {
                "0": "String",
                "1": "1",
                "2": "1",
                "3": "N/A",
                "4": "N/A"
            },
            "Description": {
                "0": "Label Name for jump\rdestination",
                "1": "Line number for jump\rdestination",
                "2": "Line number for jump\rdestination",
                "3": "Conditional statement/s that\rmust evaluate true for jump\rto occur",
                "4": "A value, variable, or array to\rpass to the subroutine being\rcalled"
            },
            "Notes": {
                "0": "Must be a valid label in application code",
                "1": "Firmware Rev 1.2a and later. May be a value or a\rvariable, but not an evaluated statement with\rparenthesis",
                "2": "May be a value or a variable, but not an\revaluated statement with parenthesis",
                "3": "If omitted, the jump is taken",
                "4": "referenced from within the subroutine as ^a-^h,\rrespectively. See Remarks for a table of valid\rargs"
            }
        },
        "Remarks": "",
        "Examples": ""
    },
    {
        "Command": "Examples of valid args (see examples for demo of each concept)",
        "Usage": [],
        "Operands": {},
        "Description": "",
        "Arguments": {
            "JS #pulse,(pulse > 0);'JS not taken\rWT 2000\rpulse= 3\rJS #pulse,(pulse > 0);'JS taken\rWT 2000\rpulse= 5\rJS #pulse;'unconditionally take jump\rEN\r'\r'\rREM Subroutine called after\rREM  setting pulse variable\r#pulse\rSB 1;' set bit 1\rWT 500;' delay 500 ms\rCB 1;' clear bit 1\rWT 500;' delay 500 ms\rpulse= pulse-1;' decrement pulse\rJP #pulse,pulse>0;' continue till zero\rEN;' return to calling JS": {}
        },
        "Remarks": "",
        "Examples": " of valid args (see examples for demo of each concept)\nWhat to pass\narg\nExample\nValue\nthe value\nJS #square(7)\nVariable's value\nvariable name\nJS #sub(var)\nVariable by reference\nampersand + variable name\nJS #sub(&var)\nArray by reference\narray name in quotes\nJS#sub(\"array\")\nExamples\n'Galil DMC Code Example\nREM Example of pulsing an output\npulse\n= \n= \n0\nJS \n#pulse\n,\n(\n(\npulse\n \n>\n \n0\n)\n)\n;\n'JS not taken\nWT\n \n2000\npulse\n= \n= \n3\nJS \n#pulse\n,\n(\n(\npulse\n \n>\n \n0\n)\n)\n;\n'JS taken\nWT\n \n2000\npulse\n= \n= \n5\nJS \n#pulse\n;\n'unconditionally take jump\nEN\n'\n'\nREM Subroutine called after \nREM  setting pulse variable\n#pulse\nSB\n \n1\n;\n' set bit 1\nWT\n \n500\n;\n' delay 500 ms\nCB\n \n1\n;\n' clear bit 1\nWT\n \n500\n;\n' delay 500 ms\npulse\n= \n= \npulse\n-\n1\n;\n' decrement pulse\nJP \n#pulse\n,\npulse\n>\n0\n;\n' continue till zero\nEN\n;\n' return to calling JS\nAdvanced Usage Examples\n'Galil DMC Code Example\nREM Run all examples\n#all\nJS \n#val\nJS \n#var\nJS \n#varref\nJS \n#array\nEN\nREM Example for each way to pass to a subroutine\nREM ********************************************\nREM Pass a Value\n#val\nJS\n \n#square\n(\n(\n3\n)\n)\nMG\n \n_JS\nEN\n#square\nREM Return the passed value squared\nEN\n \n,\n,\n(\n(\n^a\n*\n^a\n)\n)\nREM ********************************************\nREM Pass a variable's value\n#var\nval\n=\n=\n \n7\nREM call the same sub above\nJS\n \n#square\n(\n(\nval\n)\n)\nMG\n \n_JS\nEN\nREM ********************************************\nREM Pass a variable by reference\n#varref\nval\n=\n=\n \n9\nJS\n \n#square2\n(\n(\n&\nval\n)\n)\nMG\n \nval\nEN\n#square2\nREM  change the value of the variable\n^a\n=\n=\n \n^a\n*\n^a\nREM don't return anything\nEN\nREM ********************************************\nREM Pass an array by reference\n#array\nDM\n \narray\n[\n[\n100\n]\n]\narray\n[\n[\n42\n]\n]\n=\n=\n \n11\nJS\n \n#square3\n(\n(\n\"array\"\n)\n)\nMG\n \narray\n[\n[\n42\n]\n]\nEN\n#square3\nREM change the array element\n^a\n^a\n[\n[\n42\n]\n]\n=\n=\n \n^a\n^a\n[\n[\n42\n]\n]\n*\n^a\n^a\n[\n[\n42\n]\n]\nREM don't return anything\nEN"
    },
    {
        "Command": "REM Controller Response",
        "Usage": [],
        "Operands": {},
        "Description": "",
        "Arguments": {
            "EN ,,^a+^b+^c+^d+^e+^f+^g+^h;'  Return the sum": {
                "0": "nan",
                "1": "'Galil DMC Code Example\r'Dimension two arrays\rDM array1[10]\rDM array2[100]\r'Zero the contents of each array\rJS #zeroary(\"array1\", 0)\rJS #zeroary(\"array2\", 0)\rEN\r'Zero the contents of an array\r#zeroary;'(^a array,^b starting index)\r^a[^b]= 0\r^b= (^b+1)\rJP #zeroary,(^b < ^a[-1])\rEN",
                "2": "nan"
            }
        },
        "Remarks": "",
        "Examples": ""
    },
    {
        "Command": "K1",
        "Usage": [
            {
                "Example": "K1m= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "K1 n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_K1m"
            ],
            "Explanation": "Operand holds the value last set by the command"
        },
        "Description": "K1 is the proportional gain in effect when the profiler is commanding motion (RP is changing). When no motion is commanded (RP constant), KP is in\neffect. Some systems will oscillate when holding position unless the gains are lowered.",
        "Arguments": {
            "Argument": {
                "0": "m",
                "1": "n"
            },
            "Min": {
                "0": "A",
                "1": "0"
            },
            "Max": {
                "0": "H",
                "1": "1,023.875"
            },
            "Default": {
                "0": "N/A",
                "1": "6"
            },
            "Resolution": {
                "0": "Axis",
                "1": "1/8"
            },
            "Description": {
                "0": "Axis to assign value",
                "1": "Value of proportional term"
            },
            "Notes": {
                "0": "nan",
                "1": "nan"
            }
        },
        "Remarks": "\nValid only in -CLS, -NAN and -CER firmware",
        "Examples": "\n'Galil DMC Code Example\nK1\nA\nA\n= \n= \n10\n;\n' set X axis P gain in effect during motion\nK2\nA\nA\n= \n= \n1\n;\n'  set X axis I gain in effect during motion\nK3\nA\nA\n= \n= \n100\n;\n'set X axis D gain in effect during motion\nKP\nA\nA\n= \n= \n6\n;\n'  set X axis P gain in effect when holding position\nKI\nA\nA\n= \n= \n0\n;\n'  set X axis I gain in effect when holding position\nKD\nA\nA\n= \n= \n64\n;\n' set X axis D gain in effect when holding position \nK1 applies to CER,CLS,NAN\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "K2",
        "Usage": [
            {
                "Example": "K2m= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "K2 n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_K2m"
            ],
            "Explanation": "Operand holds the value last set by the command"
        },
        "Description": "K2 is the integral gain in effect when the profiler is commanding motion (RP is changing). When no motion is commanded (RP constant), KI is in effect.\nSome systems will oscillate when holding position unless the gains are lowered.",
        "Arguments": {
            "Argument": {
                "0": "m",
                "1": "n"
            },
            "Min": {
                "0": "A",
                "1": "0"
            },
            "Max": {
                "0": "H",
                "1": "255.999"
            },
            "Default": {
                "0": "N/A",
                "1": "0"
            },
            "Resolution": {
                "0": "Axis",
                "1": "1/1,024"
            },
            "Description": {
                "0": "Axis to assign value",
                "1": "Value of integrator term"
            },
            "Notes": {
                "0": "nan",
                "1": "nan"
            }
        },
        "Remarks": "\nValid only in -NAN, -CER, -CLS firmware",
        "Examples": "\n'Galil DMC Code Example\nK1\nA\nA\n= \n= \n10\n;\n' set X axis P gain in effect during motion\nK2\nA\nA\n= \n= \n1\n;\n'  set X axis I gain in effect during motion\nK3\nA\nA\n= \n= \n100\n;\n'set X axis D gain in effect during motion\nKP\nA\nA\n= \n= \n6\n;\n'  set X axis P gain in effect when holding position\nKI\nA\nA\n= \n= \n0\n;\n'  set X axis I gain in effect when holding position\nKD\nA\nA\n= \n= \n64\n;\n' set X axis D gain in effect when holding position \nK2 applies to CER,CLS,NAN\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "K3",
        "Usage": [
            {
                "Example": "K3m= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "K3 n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_K3m"
            ],
            "Explanation": "Operand holds the value last set by the command"
        },
        "Description": "K3 is the derivative gain in effect when the profiler is commanding motion (RP is changing). When no motion is commanded (RP constant), KD is in effect.\nSome systems will oscillate when holding position unless the gains are lowered.",
        "Arguments": {
            "Argument": {
                "0": "m",
                "1": "n"
            },
            "Min": {
                "0": "A",
                "1": "0"
            },
            "Max": {
                "0": "H",
                "1": "4,095.875"
            },
            "Default": {
                "0": "N/A",
                "1": "64"
            },
            "Resolution": {
                "0": "Axis",
                "1": "1/8"
            },
            "Description": {
                "0": "Axis to assign value",
                "1": "Value of derivative term"
            },
            "Notes": {
                "0": "nan",
                "1": "nan"
            }
        },
        "Remarks": "\nValid only in -NAN and -CER firmware",
        "Examples": "\n'Galil DMC Code Example\nK1\nA\nA\n= \n= \n10\n;\n' set X axis P gain in effect during motion\nK2\nA\nA\n= \n= \n1\n;\n'  set X axis I gain in effect during motion\nK3\nA\nA\n= \n= \n100\n;\n'set X axis D gain in effect during motion\nKP\nA\nA\n= \n= \n6\n;\n'  set X axis P gain in effect when holding position\nKI\nA\nA\n= \n= \n0\n;\n'  set X axis I gain in effect when holding position\nKD\nA\nA\n= \n= \n64\n;\n' set X axis D gain in effect when holding position \nK3 applies to CER,NAN\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "KD",
        "Usage": [
            {
                "Example": "KDm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "KD n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_KDm"
            ],
            "Explanation": "Operand holds the value last set by the command"
        },
        "Description": "KD designates the derivative constant in the control filter. The derivative gain outputs a voltage based on the rate of change of the error. The filter\ntransfer function follows:",
        "Arguments": {
            "Argument": {
                "0": "m",
                "1": "n"
            },
            "Min": {
                "0": "A",
                "1": "0"
            },
            "Max": {
                "0": "H",
                "1": "4,095.875"
            },
            "Default": {
                "0": "N/A",
                "1": "64"
            },
            "Resolution": {
                "0": "Axis",
                "1": "1/8"
            },
            "Description": {
                "0": "Axis to assign value",
                "1": "Value of derivative term"
            },
            "Notes": {
                "0": "nan",
                "1": "nan"
            }
        },
        "Remarks": "\nn=? will return the currently set value of KD\nm=* will set the KD value for all axes/channels\nFor further details see the section \"Theory of Operation\" in the controller user manual.",
        "Examples": "\n'Galil DMC Code Example\n:\nKD\n \n12\n,\n14\n,\n16\n,\n20\n;\n' Implicit notation to set A,B,C,D axis derivative term\n:\nKD\nC\nC\n=\n=\n \n8\n;\n'         Explicit notation to set C\n:\nKD\n \n,\n,\n8\n;\n'         Implicit notation to set C\n:\nKD\n \n?\n?\n,\n?\n?\n,\n?\n?\n,\n?\n?\n;\n \n'    Return A,B,C,D values\n \n12, 14, 8, 20\n:\nKD\nC\nC\n=\n=\n \n?\n?\n;\n'         Return C value\n \n8\n:\nMG\n \n_KD\nA\nA\n;\n'        Message the operand for the A axis\n \n12\n:\n'Galil DMC Code Example\nREM Zeroing the PID filter allows the\nREM motor command signal to be \nREM used as a programmable DAC\nKI\n*\n*\n=\n=\n \n0\n;\n'                 Zero KI\nKP\n*\n*\n=\n=\n \n0\n;\n'                 Zero KP\nKD\n*\n*\n=\n=\n \n0\n;\n'                 Zero KD\nER\n \n-\n1\n,\n-\n1\n;\n'               Rurn off position error limit\nOF\n \n1\n,\n2\n;\n'                 Set one volt on A and two volts on B\nEN\nKD applies to DMC500x0,DMC40x0,DMC42x0,DMC41x3,DMC30010,DMC21x3,RIO47xxx,DMC18x6,DMC18x2\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "KI",
        "Usage": [
            {
                "Example": "KIm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "KI n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_KIm"
            ],
            "Explanation": "Operand holds the value last set by the command"
        },
        "Description": "The KI command sets the integral gain of the control loop. The integrator term will reduce the position error at rest to zero. It fits in the control equation\nas follows:",
        "Arguments": {
            "Argument": {
                "0": "m",
                "1": "n"
            },
            "Min": {
                "0": "A",
                "1": "0"
            },
            "Max": {
                "0": "H",
                "1": "255.999"
            },
            "Default": {
                "0": "N/A",
                "1": "0"
            },
            "Resolution": {
                "0": "Axis",
                "1": "1/1,024"
            },
            "Description": {
                "0": "Axis to assign value",
                "1": "Value of Integral term"
            },
            "Notes": {
                "0": "nan",
                "1": "nan"
            }
        },
        "Remarks": "\nn=? will return the currently set value of KD\nm=* will set the KD value for all axes/channels\nFor further details see the section \"Theory of Operation\" in the controller user manual.",
        "Examples": "\n'Galil DMC Code Example\n:\nKI\nC\nC\n=\n=\n \n8\n;\n'         Explicit notation to set C\n:\nKI\n \n,\n,\n8\n;\n'         Implicit notation to set C\n:\nKI\n \n?\n?\n,\n?\n?\n,\n?\n?\n,\n?\n?\n;\n \n'    Return A,B,C,D values\n \n7, 14, 8, 20\n:\nKI\nC\nC\n=\n=\n \n?\n?\n;\n'         Return C value\n \n8\n:\nMG\n \n_KI\nA\nA\n;\n'        Message the operand for the A axis\n \n7\n:\n'Galil DMC Code Example\nREM Zeroing the PID filter allows the\nREM motor command signal to be \nREM used as a programmable DAC\nKI\n*\n*\n=\n=\n \n0\n;\n'               Zero KI\nKP\n*\n*\n=\n=\n \n0\n;\n'               Zero KP\nKD\n*\n*\n=\n=\n \n0\n;\n'               Zero KD\nOF\n \n1\n,\n2\n;\n'               Set one volt on A and two volts on B\nEN\nKI applies to DMC500x0,DMC40x0,DMC42x0,DMC41x3,DMC30010,DMC21x3,RIO47xxx,DMC18x6,DMC18x2,CLS\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "KP",
        "Usage": [
            {
                "Example": "KPm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "KP n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_KPm"
            ],
            "Explanation": "Operand holds the value last set by the command"
        },
        "Description": "KP designates the proportional constant in the controller filter. The proportional gain outputs a control signal proportional to the amount of error. The filter\ntransfer function follows.",
        "Arguments": {
            "Argument": {
                "0": "m",
                "1": "n"
            },
            "Min": {
                "0": "A",
                "1": "0"
            },
            "Max": {
                "0": "H",
                "1": "4,095.875"
            },
            "Default": {
                "0": "N/A",
                "1": "6"
            },
            "Resolution": {
                "0": "Axis",
                "1": "1/8"
            },
            "Description": {
                "0": "Axis to assign value",
                "1": "Value of proportional term"
            },
            "Notes": {
                "0": "nan",
                "1": "nan"
            }
        },
        "Remarks": "\nn=? will return the currently set value of KP\nFor further details see the section \"Theory of Operation\" in the controller user manual.",
        "Examples": "\n'Galil DMC Code Example\n:\nKP\n \n12\n,\n14\n,\n16\n,\n20\n;\n' Implicit notation to set a,b,c,d axis proportional term\n:\nKP\nC\nC\n=\n=\n \n8\n;\n'         Explicit notation to set C\n:\nKP\n \n,\n,\n8\n;\n'         Implicit notation to set C\n:\nKP\n \n?\n?\n,\n?\n?\n,\n?\n?\n,\n?\n?\n;\n \n'    Return A,B,C,D values\n \n7, 14, 8, 20\n:\nKP\nC\nC\n=\n=\n \n?\n?\n;\n'         Return C value\n \n8\n:\nMG\n \n_KP\nA\nA\n;\n'        Message the operand for the A axis\n \n12\n:\n'Galil DMC Code Example\nREM Zeroing the PID filter allows the\nREM motor command signal to be \nREM used as a programmable DAC\nKI\n*\n*\n=\n=\n \n0\n;\n' Zero KI\nKP\n*\n*\n=\n=\n \n0\n;\n' Zero KP\nKD\n*\n*\n=\n=\n \n0\n;\n' Zero KD\nOF\n \n1\n,\n2\n;\n' Set one volt on A and two volts on B\nEN\nKP applies to DMC500x0,DMC40x0,DMC42x0,DMC41x3,DMC30010,DMC21x3,RIO47xxx,DMC18x6,DMC18x2,CLS\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "KS",
        "Usage": [
            {
                "Example": "KSm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "KS n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_KSm"
            ],
            "Explanation": "Operand holds the value last set by the command"
        },
        "Description": "The KS parameter sets the amount of smoothing of stepper motor pulses. Larger values of KS provide greater smoothness. KS adds a single pole low pass\nfilter onto the output of the motion profiler.",
        "Arguments": {
            "Argument": {
                "0": "m",
                "1": "n"
            },
            "Min": {
                "0": "A",
                "1": "0.25"
            },
            "Max": {
                "0": "H",
                "1": "64"
            },
            "Default": {
                "0": "N/A",
                "1": "2"
            },
            "Resolution": {
                "0": "Axis",
                "1": "1/32"
            },
            "Description": {
                "0": "Axis to assign value",
                "1": "Value of smoothing constant"
            },
            "Notes": {
                "0": "nan",
                "1": "nan"
            }
        },
        "Remarks": "\nThis is most useful when operating in full or half step mode.\nKS effect on timing:\nThis parameter will increase the time to complete a motion time by 3KS sampling periods.\nKS will cause an overall delay in the generation of output steps.",
        "Examples": "\n'Galil DMC Code Example\n:\nKS\nC\nC\n=\n=\n \n8\n;\n'         Explicit notation to set C\n:\nKS\n \n,\n,\n8\n;\n'         Implicit notation to set C\n:\nKS\n \n?\n?\n,\n?\n?\n,\n?\n?\n,\n?\n?\n;\n \n'    Return A,B,C,D values\n \n7, 14, 8, 20\n:\nKS\nC\nC\n=\n=\n \n?\n?\n;\n'         Return C value\n \n8\n:\nMG\n \n_KS\nA\nA\n;\n'        Message the operand for the A axis\n \n7\n:\nKS applies to DMC500x0,DMC40x0,DMC42x0,DMC41x3,DMC30010,DMC21x3,DMC18x6,DMC18x2\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "LA",
        "Usage": [
            {
                "Example": "LA",
                "Explanation": "Command takes no arguments"
            }
        ],
        "Operands": {},
        "Description": "The LA command returns a list of all arrays in memory. The size of each array will be included next to each array name in square brackets.",
        "Arguments": [],
        "Remarks": "\nThe listing will be in alphabetical order.",
        "Examples": "\n'Galil DMC Code Example\n:\nDM\n \ngold\n[\n[\n100\n]\n]\n,\nsilver\n[\n[\n50\n]\n]\n,\nplat\n[\n[\n200\n]\n]\n;\n'     Dimensions arrays with given name and the number of array elements in square brackets\n:\nLA\n;\n'                                    Commands the controller to list arrays in alphabetical order\ngold[100]\nplat[200]\nsilver[50]\n:\nDA\n \n*\n[\n[\n]\n]\n;\n'                                Dialocates all arrays\n:\nLA\n;\n'                                    List arrays now returns with no arrays\n:\nLA applies to DMC500x0,DMC52xx0,DMC40x0,DMC42x0,DMC41x3,DMC30010,DMC21x3,DMC18x6,DMC18x2,RIO47xxx\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "LB",
        "Usage": [
            {
                "Example": "LB n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_LB"
            ],
            "Explanation": "Operand holds the value last set by the command"
        },
        "Description": "The LB command sets the Bias contrast on the LCD.",
        "Arguments": {
            "Argument": {
                "0": "n"
            },
            "Min": {
                "0": "-15"
            },
            "Max": {
                "0": "15"
            },
            "Default": {
                "0": "15"
            },
            "Resolution": {
                "0": "1"
            },
            "Description": {
                "0": "Sets LCD Contrast"
            },
            "Notes": {
                "0": "A -n will turn on the optional backlight"
            }
        },
        "Remarks": "\nA higher absolute value of n increases the bias contrast",
        "Examples": "\n'Galil DMC Code Example\n:\nLB\n \n8\n;\n'       Sets the LCD bias contrast to 8\n:\nMG\n \n_LB\n;\n'     Returns set LDC bias contast\n \n8.0000\n:\nLB\n \n-\n5\n;\n'      Sets the LDC bias contrast to 5 and turns on optional backlight \nLB applies to DMC500x0,DMC40x0\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "LC",
        "Usage": [
            {
                "Example": "LCm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "LC n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_LCm"
            ],
            "Explanation": "Operand holds the value last set by the command"
        },
        "Description": "The LC command enables low current mode for stepper motors. Low current mode reduces the holding torque of the stepper motors while at rest.",
        "Arguments": {
            "Argument": {
                "0": "m",
                "1": "n",
                "2": "nan"
            },
            "Min": {
                "0": "A",
                "1": "0",
                "2": "2"
            },
            "Max": {
                "0": "H",
                "1": "1",
                "2": "32,767"
            },
            "Default": {
                "0": "N/A",
                "1": "0",
                "2": "0"
            },
            "Resolution": {
                "0": "Axis",
                "1": "1",
                "2": "1"
            },
            "Description": {
                "0": "Axis to assign value",
                "1": "n= 0, Default, stepper drive providing 100% torque at rest; n= 1,\r25% holding torque when motor at rest.",
                "2": "Specifies \"n\" samples after move before going to 0% holding\rcurrent"
            },
            "Notes": {
                "0": "nan",
                "1": "nan",
                "2": "nan"
            }
        },
        "Remarks": "\nThe MT command must be issued prior to the LC command.\nUsing LC with an internal Galil Stepper drive (SDM)\nSetting LC to 0 for each axis may be necessary to shut off all current to the motors in the \"motor off\" (MO) state\nUsing LC will reduce current consumption, but there will be a reduction of holding torque at rest\nConsult the user manual for more details regarding your specific amplifier\nUsing LC with external amplifiers\nWhen using external amplifiers low current mode will simply disable the motors by toggling the amplifier enable line during rest\nUsing LC will reduce current consumption, but there will be no holding torque at rest",
        "Examples": "\n'Galil DMC Code Example\nMT\nC\nC\n= \n= \n-\n2\n;\n' Specify stepper mode for the C axis\nLC\nC\nC\n= \n= \n1\n;\n' Specify low current mode for the C axis \n'Galil DMC Code Example\n#ex\nMT\nA\nA\n= \n= \n-\n2\n;\n'specify stepper mode for A axis\nLC\nA\nA\n= \n= \n15\n;\n'specify motor to go to low current\n' 15 samples after motion has completed\nEN\nLC applies to DMC500x0,DMC40x0,DMC41x3,DMC30010,DMC21x3,DMC18x6,DMC18x2\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "LD",
        "Usage": [
            {
                "Example": "LDm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "LD n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_LDm"
            ],
            "Explanation": "Operand holds the value last set by the command"
        },
        "Description": "Allows user to disables forward and/or reverse limit switches.",
        "Arguments": {
            "Argument": {
                "0": "m",
                "1": "n",
                "2": "Argument",
                "3": "n",
                "4": "nan",
                "5": "nan",
                "6": "nan"
            },
            "Min": {
                "0": "A",
                "1": "0",
                "2": "Value",
                "3": "0",
                "4": "1",
                "5": "2",
                "6": "3"
            },
            "Max": {
                "0": "H",
                "1": "4",
                "2": "Description",
                "3": "Both limit switches are enabled",
                "4": "Forward limit switch disabled",
                "5": "Reverse limit switch disabled",
                "6": "Both limit switches disabled"
            },
            "Default": {
                "0": "N/A",
                "1": "0",
                "2": "Notes",
                "3": "Default",
                "4": "nan",
                "5": "nan",
                "6": "nan"
            },
            "Resolution": {
                "0": "Axis",
                "1": "1",
                "2": "nan",
                "3": "nan",
                "4": "nan",
                "5": "nan",
                "6": "nan"
            },
            "Description": {
                "0": "Axis to assign value",
                "1": "Sets limit disable state",
                "2": "nan",
                "3": "nan",
                "4": "nan",
                "5": "nan",
                "6": "nan"
            },
            "Notes": {
                "0": "nan",
                "1": "See table below for details",
                "2": "nan",
                "3": "nan",
                "4": "nan",
                "5": "nan",
                "6": "nan"
            }
        },
        "Remarks": "\nn = ? will return the current setting of LD\nWhen this feature should be used:\nTo gain additional digital inputs if limit switches are not being utilized.\nTo prevent noise from causing the limit switchs conditions even though no limit switches are connected.\nLD does not disable software limits set by BL and FL.",
        "Examples": "\n'Galil DMC Code Example\n:\nLD\n \n3\n,\n1\n,\n2\n;\n           \n'Implicit notation to set channel A, B, and C\n:\nMG\n \n_LD\nA\nA\n;\n'           'Message the operand for the A channel\n \n3.0000\n:\nLD\nC\nC\n=\n=\n \n3\n;\n'            'Explicit notation to set channel C-only\n:\nLD\n*\n*\n=\n=\n \n?\n?\n;\n'            'Queries the value of LD for all channels\n \n3, 1, 3, 0\n:\n'Galil DMC Code Example\nREM use forward limit switch as an extra I/O point\n#io\nLD\nA\nA\n= \n= \n1\n;\n'disable forward limit switch\nio\n= \n= \n_LF\nA\nA\n;\n'set state of limit switch to variable \"io\"\n'Use \"io\" in an IF statement\nIF\n \nio\n=\n1\n \nMG\n \n\"Input On\"\nELSE\n \nMG\n \n\"Input Off\"\nENDIF\nEN\nLD applies to DMC40x0,DMC42x0,DMC41x3,DMC18x6,DMC30010,DMC500x0,DMC52xx0\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "LE",
        "Usage": [
            {
                "Example": "LE",
                "Explanation": "Command takes no arguments"
            }
        ],
        "Operands": {
            "Operands": [
                "_LEm"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "The LE command indicates to the controller that the end of the sequence is coming up. This allows the controller to slow down through multiple\nsegments, if required. LE is required to exit the linear interpolation mode gracefully (stop code, SC, 101).",
        "Arguments": {
            "'Galil DMC Code Example\rCA S;          'Specify S coordinated motion system\rLM CD;         'Specify linear interpolation mode for C and D axes\rLI ,,100,200;  'Specify linear distance\rLE;            'Ends linear interpolation distance\rBG S;          'Begin motion of the S-coodrinate system": {}
        },
        "Remarks": "\n_LEm will return the total move length in encoder counts for the selected coordinate system, where m is S or T.\nIf not spcified, the LE command will apply to the last selected coordinate system, S or T.\nTo select the coordinate system, use the command CA S or CA T.\nThe VE command is interchangeable with the LE command.\nLE ? Returns the total vector move length in encoder counts for the current coordinate system",
        "Examples": "\n'Galil DMC Code Example\nCA\n \nS\nS\n;\n          \n'Specify S coordinated motion system\nLM\n \nCD\nCD\n;\n         \n'Specify linear interpolation mode for C and D axes\nLI\n \n,\n,\n100\n,\n200\n;\n  \n'Specify linear distance\nLE\n;\n            \n'Ends linear interpolation distance\nBG\n \nS\nS\n;\n          \n'Begin motion of the S-coodrinate system \nLE applies to DMC40x0,DMC42x0,DMC41x3,DMC21x3,DMC18x6,DMC18x2,DMC30010,DMC500x0,DMC52xx0\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "LI",
        "Usage": [
            {
                "Example": "LIm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "LI n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {},
        "Description": "The LI command specifies the incremental distance of travel for each axis in the Linear Interpolation (LM) mode. LI parameters are relative distances given\nwith respect to the current axis positions.",
        "Arguments": {
            "Argument": {
                "0": "m",
                "1": "n",
                "2": "o",
                "3": "nan",
                "4": "p"
            },
            "Min": {
                "0": "A",
                "1": "-8,388,607",
                "2": "2",
                "3": "2",
                "4": "2"
            },
            "Max": {
                "0": "H",
                "1": "8,388,607",
                "2": "22,000,000",
                "3": "6,000,000",
                "4": "22,000,000"
            },
            "Default": {
                "0": "N/A",
                "1": "0",
                "2": "N/A",
                "3": "N/A",
                "4": "N/A"
            },
            "Resolution": {
                "0": "Axis",
                "1": "1",
                "2": "2",
                "3": "2",
                "4": "2"
            },
            "Description": {
                "0": "Axis to assign value",
                "1": "Assigns linear interpolation point for that axis",
                "2": "Specifies the vector speed to be commanded at the beginning of\rthe linear segment. The controller will start accelerating or\rdecelerating at the start of the sequence to this speed.",
                "3": "Specifies the vector speed to be commanded at the beginning of\rthe linear segment. The controller will start accelerating or\rdecelerating at the start of the sequence to this speed.",
                "4": "Specifies the vector speed to be achieved at the end of the linear\rsegment. The controller will decelerate or accelerate during the\rsegment and will reach the specified speed at the end of the\rsegment."
            },
            "Notes": {
                "0": "nan",
                "1": "nan",
                "2": "For MT 1,-\r1,1.5 and -\r1.5.",
                "3": "For MT 2,-\r2,2.5 and -\r2.5",
                "4": "For MT 1,-\r1,1.5 and -\r1.5."
            }
        },
        "Remarks": "",
        "Examples": ""
    },
    {
        "Command": "'Galil DMC Code Example",
        "Usage": [],
        "Operands": {},
        "Description": "",
        "Arguments": [],
        "Remarks": "",
        "Examples": ""
    },
    {
        "Command": "LL",
        "Usage": [
            {
                "Example": "LL",
                "Explanation": "Command takes no arguments"
            }
        ],
        "Operands": {},
        "Description": "The LL command returns a listing of all of the program labels in memory.",
        "Arguments": [],
        "Remarks": "\nThe LL command label listing will be in alphabetical order.\nThe LL command returns all of the program labels in memory and their associated line numbers",
        "Examples": "\n'Galil DMC Code Example\n:\nLL\n#FIVE=5 \n#FOUR=4 \n#ONE=1 \n#THREE=3 \n#TWO=2 \nLL applies to DMC500x0,DMC52xx0,DMC40x0,DMC42x0,DMC41x3,DMC30010,DMC21x3,DMC18x6,DMC18x2,RIO47xxx\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "LM",
        "Usage": [
            {
                "Example": "LM mm",
                "Explanation": "Argument is an axis mask"
            }
        ],
        "Operands": {
            "Operands": [
                "_LMm"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "The LM command specifies the linear interpolation mode and specifies the axes for linear interpolation.",
        "Arguments": {
            "Argument": {
                "0": "mm"
            },
            "Min": {
                "0": "A"
            },
            "Max": {
                "0": "ABCDEFGH"
            },
            "Default": {
                "0": "N/A"
            },
            "Resolution": {
                "0": "Multi-Axis Mask"
            },
            "Description": {
                "0": "Axes to use for linear interpolation mode"
            },
            "Notes": {
                "0": "nan"
            }
        },
        "Remarks": "\nAny set of axis may be used for linear interpolation.\nLI commands are used to specify the travel distances between various linear interpolation moves.\nSeveral LI commands may be given as long as the controller sequence buffer has room for additional segments\nSee the LI command for more information regarding the Linear Inerpolation Buffer\nThe LE command specifies the end of the linear interpolation sequence.\nOnce the LM command has been given, it does not need to be given again unless the VM command has been used\nOperand/Queries\n_LMm contains the number of spaces available in the sequence buffer for the 'm' coordinate system, S or T.\nThe LM command will apply to the selected coordinate system, S or T. To select the coordinate system, use the command CA S or CA T.",
        "Examples": "\n'Galil DMC Code Example\nLM\n \nABCD\nABCD\n;\n                         \n'Specify linear interpolation mode\nVS\n \n10000\n;\nVA\n \n100000\n;\nVD\n \n1000000\n;\n   \n'Specify vector speed, acceleration and deceleration\nLI\n \n100\n,\n200\n,\n300\n,\n400\n;\n              \n'Specify linear distance\nLI\n \n200\n,\n300\n,\n400\n,\n500\n;\n              \n'Specify linear distance\nLE\n;\n \nBG\n \nS\nS\n;\n                        \n'Last vector, then begin motion \nLM applies to DMC40x0,DMC42x0,DMC41x3,DMC21x3,DMC18x6,DMC18x2,DMC30010,DMC500x0,DMC52xx0\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "LS",
        "Usage": [
            {
                "Example": "LS n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {},
        "Description": "The LS command returns a listing of the programs in memory.",
        "Arguments": {
            "Argument": {
                "0": "n0",
                "1": "n0",
                "2": "n1"
            },
            "Min": {
                "0": "0",
                "1": "0",
                "2": "1"
            },
            "Max": {
                "0": "3,998",
                "1": "1,998",
                "2": "1,999"
            },
            "Default": {
                "0": "0",
                "1": "0",
                "2": "1,999"
            },
            "Resolution": {
                "0": "1",
                "1": "1",
                "2": "1"
            },
            "Description": {
                "0": "Firmware Rev 1.2a and later. Specifies the line in the program for\rwhich the listing will start",
                "1": "Specifies the line in the program for which the listing will start",
                "2": "Specifies the line at which the listing will end"
            },
            "Notes": {
                "0": "nan",
                "1": "nan",
                "2": "nan"
            }
        },
        "Remarks": "\nn\n0\n < n\n1\n must always be true\nIf n\n0\n or n\n1\n is omitted, default values are used\nn\n0\n and n\n1\n can also specify a label, for example:\n\"LS #label,20\" would print out program lines from #label to line 20.\nIssuing this command will pause the output of the Data Record until the command is completed.",
        "Examples": "\n'Galil DMC Code Example\n:\nLS\n \n#a\n,\n6\n;\n        \n' List program starting at #A through line 6\n2 #a \n3 PR 500 \n4 BG A \n5 AM \n6 WT 200 \n'Hint:  Remember to quit the Edit Mode \n Q prior to giving the LS command. (DOS) \nLS applies to DMC500x0,DMC52xx0,DMC40x0,DMC42x0,DMC41x3,DMC30010,DMC21x3,DMC18x6,DMC18x2,RIO47xxx\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "LU",
        "Usage": [
            {
                "Example": "LU n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_LU"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "The LU command turns the automatic axes status update on the LCD on or off.",
        "Arguments": {
            "Argument": {
                "0": "n",
                "1": "nan"
            },
            "Value": {
                "0": "0",
                "1": "1"
            },
            "Description": {
                "0": "Turns off the automatic LCD axis updates",
                "1": "Turns on the automatic LCD axis updates"
            },
            "Notes": {
                "0": "This allows users to print their own messages to the LCD.",
                "1": "Default"
            }
        },
        "Remarks": "\n_LU contains the current setting of the LU command, either 1 or 0.\nAutomatic LCD Axis Status Updates\nThe LCD displays the following pattern:\nA \nB \nC \nD \nE \nF \nG \nH\nm \nm \nm \nm \nm \nm \nm \nm\nwhere m is the axis status for axes ABCDEFGH and is:\nAxis Status\nDescription\nRelated Commands/ Example Causes\nI\nIdle\nST\ni\nLow power Idle\nLCm=1, MTm=-2, ST\nO\nMotor Off\nMO\nM\nMotion - Axis Running in independent mode\nPA/PR/JG etc, BG\nE\nError - Positions Error exceeded TEn>ERn\nER, TE\nS\nStop - Stopped from ST command\nST\nL\nLimit - Decelerating or stopped by a limit switch\nProfiled motion into hardware limit switch\nA\nAbort - Stopped by abort\nAB\nV\nVector - Running in Vector or Linear Interpolation Mode\nLM, LI, VM, VP, CR\nC\nContour - Running in Contour Mode\nCM\nP\nPVT - Runnning in PVT mode\nPV, BT\nH\nHoming - Running in a Homing Routine\nHM, BG\ne\nECAM - Running in ECAM mode\nEG\nF\nFault - Amplifier Fault\nInternal amp fault, e.g. over current",
        "Examples": "\n'Galil DMC Code Example\nLU\n \n0\n;\n                \n'Turns off the automatic LCD axis status updates\nMG\n \n{L1}\n\"DMC-40x0\"\n;\n   \n'Messages the string DMC-40x0 to line 1 of the LCD screen\nMG\n \n{L2}\n\"Galil MC\"\n;\n   \n'Messages Galil MC to line 2 of the LCD screen\nLU\n \n1\n;\n                \n'Turns on the automatic LCD status updates \nLU applies to DMC500x0,DMC40x0\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "LV",
        "Usage": [
            {
                "Example": "LV",
                "Explanation": "Command takes no arguments"
            }
        ],
        "Operands": {},
        "Description": "The LV command returns a listing of all of the program variables in memory. The listing will be in alphabetical order.",
        "Arguments": [],
        "Remarks": "\nUse the _UL operand for total number of variables available for your controller.\nSee the UL command for more details.\nIssuing this command will pause the output of the Data Record until the command is completed.",
        "Examples": "\n'Galil DMC Code Example\n:\nLV\napple = 60.0000 \nbanana = 25.0000 \nzebra = 37.0000\n:\nLV applies to DMC500x0,DMC52xx0,DMC40x0,DMC42x0,DMC41x3,DMC30010,DMC21x3,DMC18x6,DMC18x2,RIO47xxx\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "LZ",
        "Usage": [
            {
                "Example": "LZ n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_LZ"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "The LZ command is used for formatting the values returned from interrogation commands, variables, and arrays. By enabling the LZ function, all leading\nzeros of returned values will be removed.",
        "Arguments": {
            "Argument": {
                "0": "n",
                "1": "nan"
            },
            "Value": {
                "0": "0",
                "1": "1"
            },
            "Description": {
                "0": "Does not remove leading zeros from interrogated values",
                "1": "Removes leading zeros from interrogated values"
            },
            "Notes": {
                "0": "nan",
                "1": "Default"
            }
        },
        "Remarks": "\n_LZ contains the state of the LZ function. '0' is disabled and '1' is enabled.",
        "Examples": "\n'Galil DMC Code Example\n:\nLZ\n \n0\n;\n               \n'Disable the LZ function\n:\nvar1\n=\n=\n \n10\n;\n           \n'Sets variable var1 to the value of 10.\n:\nTP\n \nA\nA\n;\n               \n'Interrogate the controller for current position of A-axis\n \n0000021645.0000\n:\nvar1\n= \n= \n?\n?\n;\n             \n'Request value of variable var1\n \n0000000010.0000\n:\nLZ\n \n1\n;\n               \n'Enable LZ function\n:\nTP\n \nA\nA\n;\n               \n'Interrogate the controller for current position of A-axis\n \n21645.0000\n:\nvar1\n=\n=\n \n?\n?\n;\n            \n'Request value of variable var1\n \n10.0000 \n'Galil DMC Code Example\n:\nLZ\n \n0\n;\n     \n'Disable the LZ function\n:\nTB\n;\n       \n'Tell status bits\n001\n:\nLZ\n \n1\n;\n     \n'Inhibit leading zeros\n:\nTB\n;\n       \n'Tell status\n1 \nLZ applies to DMC500x0,DMC52xx0,DMC40x0,DMC42x0,DMC41x3,DMC30010,DMC21x3,DMC18x6,DMC18x2,RIO47xxx\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "MB",
        "Usage": [
            {
                "Example": "MBm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            }
        ],
        "Operands": {},
        "Description": "The MB command is used to communicate with I/O devices using the Modbus TCP/IP protocol. The MB command supports the first two levels of Modbus\ncommands. The function code -1 designates that the first level of Modbus is used (creates raw packets and receives raw data). The other codes are the\n10 major function codes of the second level. The format of the command varies depending on each function code.\nGalil Modbus supports one master per slave.",
        "Arguments": [],
        "Remarks": "",
        "Examples": ""
    },
    {
        "Command": "MB",
        "Usage": [],
        "Operands": {},
        "Description": "",
        "Arguments": {
            "n3": {
                "0": "str",
                "1": "'Galil DMC Code Example\rMBB= ,4,1,2,example[];'  Read registers 1 through 2 from handle B, save to example[]\r'equivalent to reading Analog Inputs, or registers mapped to 300xxx"
            },
            "1": {
                "0": "1 char",
                "1": "nan"
            },
            "99": {
                "0": "8 chars",
                "1": "nan"
            },
            "N/A": {
                "0": "N/A",
                "1": "nan"
            },
            "1.1": {
                "0": "String",
                "1": "nan"
            },
            "Quantity of registers\rto read": {
                "0": "Name of array to\rstore values",
                "1": "nan"
            },
            "Unnamed: 0": {
                "0": "str[0] holds the first value. 2 bytes per element. Array\rmust be as large as the value for n3",
                "1": "nan"
            }
        },
        "Remarks": "",
        "Examples": ""
    },
    {
        "Command": "example",
        "Usage": [],
        "Operands": {},
        "Description": "",
        "Arguments": {
            "n3": {
                "0": "str",
                "1": "'Galil DMC Code Example\rexample[0]= $AEAE\rMBD= ,16,2,1,example[];'     Set $AEAE to holding register 2 on handle D\r'equivalent to setting analog outputs, or writing to holding registers addressed 400xxx"
            },
            "0": {
                "0": "1 char",
                "1": "nan"
            },
            "99": {
                "0": "8 chars",
                "1": "nan"
            },
            "N/A": {
                "0": "N/A",
                "1": "nan"
            },
            "1": {
                "0": "String",
                "1": "nan"
            },
            "Quantity of registers": {
                "0": "Array containing modbus\rdata",
                "1": "nan"
            },
            "Unnamed: 0": {
                "0": "str[0] holds the first value. 2 bytes per element. Array\rsize must be > n3",
                "1": "nan"
            }
        },
        "Remarks": "",
        "Examples": ""
    },
    {
        "Command": "MC",
        "Usage": [
            {
                "Example": "MC mm",
                "Explanation": "Argument is an axis mask"
            }
        ],
        "Operands": {},
        "Description": "The MC command is a trippoint command that holds up execution until motion is complete on any one of a specified group of axes. The MC command,\nunlike the AM (after motion command) requires that both the motion profiler has completed motion AND that the motor encoder has reached the\nspecified position before continuing execution.",
        "Arguments": [],
        "Remarks": "\nAlthough many axes can be spcified, the MC command will continue execution if one of the specified axis motion is completed.\nUsing MC with Stepper Motors\nIn the case of stepper motors, MC will monitor the number of step pulses are generated to complete the move.\nThe MC command is recommended when operating with stepper motors in leiu of AM since the generation of step pulses can be delayed due to\nthe stepper motor smoothing function, KS. In this case, the MC command would only be satisfied after all steps are generated.\nUsing MC as part of the #MCTIME error routine\n1\n. \nThe command TW can be used to set an acceptable amount of time between when the motion profiler has completed and the encoder is in position;\nif this condition is not satisfied, a timeout error occurs.\n1\n. \nWhen a timeout occurs, the trippoint will clear and the stop code will be set to 99.\n2\n. \nThread 0 of the DMC program will also jump to the special label #MCTIME, if present.\n1\n. \nSee the #MCTIME automatic subroutine, TW and SC commands for more information",
        "Examples": "\n'Galil DMC Code Example\n#move\n;\n                    \n'Label #move\nTW\n \n1000\n,\n1000\n;\n             \n'Set motion complete timeout to 1000 milliseconds per axis\nPR\n \n2000\n,\n4000\n;\n             \n'Position relative Move on A- and B-axis\nBG\n \nAB\nAB\n;\n                    \n'Start the motion on A- and B-axis \nMC\n \nAB\nAB\n;\n                    \n'After the move is complete on A and B axes\nMG\n \n\"DONE\"\n;\n                \n'Print message\nEN\n;\n                       \n'End of Program\n'\n'\n#MCTIME\n#MCTIME\n;\n                  \n'Motion Complete timeout Subroutine\n \nMG\n \n\"Motion Timeout\"\n;\n     \n'Print failure message\n \nSC \n;\n                      \n'Print stop codes\nEN\n;\n                       \n'End subroutine \nMC applies to DMC40x0,DMC42x0,DMC41x3,DMC21x3,DMC18x6,DMC18x2,DMC30010,DMC500x0,DMC52xx0\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "ME",
        "Usage": [
            {
                "Example": "ME n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {},
        "Description": "The ME command enables the ability for Modbus masters to write to array locations in the hardware's array table. When enabled, array locations can be\nwritten to as 16 bit integers or as 32 bit floating point by a modbus master by specifying different address ranges. ME is not required to read array\nlocations, reads are always supported.",
        "Arguments": {
            "Argument": {
                "0": "n",
                "1": "nan"
            },
            "Value": {
                "0": "0",
                "1": "1"
            },
            "Description": {
                "0": "Disables the ability for Modbus masters to write to the array table",
                "1": "Enables ability for Modbus masters to write to the array table"
            },
            "Notes": {
                "0": "Default",
                "1": "nan"
            }
        },
        "Remarks": "\nArray writes when enabled by ME are done using function code 16\nGalil Modbus supports one master per slave.\nA useful utility for determining the 32 bit floating point value for a given fractional number can be found here: \nhttp://babbage.cs.qc.cuny.edu/IEEE-\n754/index.xhtml\nDMC-40x0 requires firmware revision 1.2d or newer for use as Modbus slave.\nModbus Register Map\nEach element is accessible as a 16 bit unsigned integer (Modbus registers 1xxx) -OR- as a 32 bit floating point number (Modbus registers 2xxx).\nThe table below shows the mapping for a Modbus master writing to the controller with ME 1 set.\n1000 (0-999) elements are available for read/write on the DMC-40x0. \nOther array elements are not exposed to Modbus.\nModbus Register Map to Galil Array A[]\nModbus Registers:\n1000-1999\n2000-2999\nAvailable Modbus function codes\n3 (read) and 16 (write)\n3 (read) and 16 (write)\nNumber Type\n16 bit unsigned integer\n32 bit floating point\nReferences in A[] array\nA[0]-A[999]\nA[0]-A[999]\nNumber written to A[]\nInteger only, fraction not changed\nGalil 4.2 format (internal from float conversion)\nNumber read from A[]\nInteger only, fraction not read\n32 bit float (internal to float conversion)\nExample Modbus Master Write\nMBH=0,16,1000,1,write[]\nMBH=0,16,2001,2,write[]\nExample Modbus Master Read\nMBH=0,3,1000,1,read[]\nMBH=0,3,2001,2,read[]\nEmbedded Array Mapping\nOnce enabled, the entire array table can be written remotely. These writes can span across dimensioned user arrays. It is the user's responsibility to\npartition the array table and to read/write remotely to the correct location.\nWhen using multiple array names, the array table is partitioned alphabetically (all captital letters first).\nFor example, a partioned array of Grape[600] and Orange[200] would place the first 600 registers in Grape[], and the next 200 registers in\nOrange[]. The last 200 elements would be inaccesible from embedded code. If the user then dimensioned the array Apple[200], the register\nmapping would change. The first 200 registers would read/write from Apple[], the next 600 from Grape[], and finally the last 200 from\nOrange[].\nAdditionally, all captial letters come before lowercase letters. \nFor example, a partioned array of Banana[100] and apple[200] would place the first\n100 registers in Banana[] and the next 200 registers in apple[].\nFor simplicity, Galil recommends that a single, contiguous array be dimensioned with the array name \"A\".",
        "Examples": "\n'Galil DMC Code Example\n:\nDA\n \n*\n[\n[\n]\n]\n;\n'       Deallocates all arrays\n:\nDM\n \na\n[\n[\n400\n]\n]\n;\n'    Allocates array for Modbus Read/Write\n:\nME \n0\n;\n'          Disables write access\n:\nME \n1\n;\n'          Enables write access\n:\nME \n?\n?\n;\n'          Interrogate current value\n \n1\n:\n'Galil DMC Code Example\n'This example is written for a Galil modbus master to a DMC-40x0, DMC-41x3, DMC-42x0, DMC-3x01x, or RIO-47xxx (with expanded memory)\n'Master is E.G. DMC-21x3, RIO, DMC-40x0\n'This code runs on the master.\n'Assumes a Modbus handle is available at H, \n' and that ME1 has been set on the remote device\nMW \n1\n;\n'                                 Turn on modbus wait\nDM\n \nwrite\n[\n[\n2\n]\n]\n;\n'                         Dimension an array for holding data to transmit\nwrite\n[\n[\n0\n]\n]\n= \n= \n1234\n;\n'                       Assign an integer to element 0\nMB\nH\nH\n= \n= \n0\n,\n16\n,\n1000\n,\n1\n,\nwrite\n[\n[\n]\n]\n;\n'             Send the integer to register 1000 on the remote\nwrite\n[\n[\n0\n]\n]\n= \n= \n$42F6\n;\n'                      Set the 32 bit float in two steps, the value is 123.456\nwrite\n[\n[\n1\n]\n]\n= \n= \n$E978\nMB\nH\nH\n= \n= \n0\n,\n16\n,\n2001\n,\n2\n,\nwrite\n[\n[\n]\n]\n;\n'             Send the float to register 2001 on the remote\n'note that register 2000 would have stepped on the integer memory written at 1000\nDM\n \nread\n[\n[\n2\n]\n]\n;\n'                          Dimension an array for holding read data\nMB\nH\nH\n= \n= \n0\n,\n3\n,\n1000\n,\n1\n,\nread\n[\n[\n]\n]\n;\n'               Read the integer at register 1000\nMG \n\"Integer=\"\n,\nread\n[\n[\n0\n]\n]\n;\n'                Print the read integer"
    },
    {
        "Command": "\"Integer=\"",
        "Usage": [],
        "Operands": {},
        "Description": "",
        "Arguments": [],
        "Remarks": "",
        "Examples": ""
    },
    {
        "Command": "MF",
        "Usage": [
            {
                "Example": "MFm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "MF n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {},
        "Description": "This command will hold up the execution of the following command until the specified motor moves forward and crosses the position specified.",
        "Arguments": {
            "Argument": {
                "0": "m",
                "1": "n"
            },
            "Min": {
                "0": "A",
                "1": "-\r2,147,483,648"
            },
            "Max": {
                "0": "H",
                "1": "2,147,483,647"
            },
            "Default": {
                "0": "N/A",
                "1": "N/A"
            },
            "Resolution": {
                "0": "Axis",
                "1": "1"
            },
            "Description": {
                "0": "Axis to assign value",
                "1": "Position required to be crossed before subsequent\rcommands will be executed."
            },
            "Notes": {
                "0": "nan",
                "1": "nan"
            }
        },
        "Remarks": "\nAlthough multiple positions can be specified, only one of the MF conditions must be satisfied for subsequent code execution.\nMF command references absolute position.\nThe MF command only requires an encoder and does not require that the axis be under servo control.\nThe accuracy of the MF command is the number of counts that occur in 2*TM sec. Multiply the speed by 2*TM sec to obtain the maximum error.\nExample with speed of 20,000 counts/second and TM of 1000 (1000 us).\nMaximum error = 2 * 1000 E-6 seconds * 20,000 counts/second = 40 counts\nWhen using a stepper motor:\nThis condition is satisfied when the stepper position (as determined by the output buffer - TD) has crossed the specified Forward Motion\nPosition.",
        "Examples": "\n'Galil DMC Code Example\n#test\n;\n                   \n'Program Test \nDP\n \n0\n;\n                    \n'Define zero \nJG\n \n1000\n;\n                 \n'Jog mode (speed of 1000 counts/sec) \nBG\n \nA\nA\n;\n                    \n'Begin move \nMF\n \n2000\n;\n                 \n'After passing the position 2000 \nv1\n=\n=\n \n_TP\nA\nA\n;\n                \n'Assign V1 A position \nMG\n \n\"Position is\"\n,\nv1\n;\n     \n'Print Message \nST\n \nA\nA\n;\n                    \n'Stop\nEN\n;\n                      \n'End of Program \nMF applies to DMC40x0,DMC42x0,DMC41x3,DMC21x3,DMC18x6,DMC18x2,DMC30010,DMC500x0,DMC52xx0\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "MG",
        "Usage": [
            {
                "Example": "MG n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                ":",
                "MG",
                "",
                "@AN",
                "[",
                "[",
                "1",
                "]",
                "]",
                "",
                "0.0121",
                ":",
                "'",
                ":",
                "'Array Elements",
                ":",
                "DM",
                "",
                "arr",
                "[",
                "[",
                "3",
                "]",
                "]",
                ":",
                "arr",
                "[",
                "[",
                "0",
                "]",
                "]",
                "=",
                "=",
                "0",
                ":",
                "arr",
                "[",
                "[",
                "1",
                "]",
                "]",
                "=",
                "=",
                "1",
                ":",
                "arr",
                "[",
                "[",
                "2",
                "]",
                "]",
                "=",
                "=",
                "2",
                ":",
                "MG",
                "",
                "arr",
                "[",
                "[",
                "0",
                "]",
                "]",
                ",",
                "arr",
                "[",
                "[",
                "1",
                "]",
                "]",
                ",",
                "arr",
                "[",
                "[",
                "2",
                "]",
                "]",
                "",
                "0.0000 1.0000 2.0000",
                ":",
                "'",
                ":",
                "'Mathematical Expressions",
                ":",
                "MG",
                "",
                "1",
                "+",
                "2",
                "",
                "3.0000",
                ":",
                "MG",
                "",
                "arr",
                "[",
                "[",
                "2",
                "]",
                "]",
                "+",
                "var",
                "",
                "12345680.9101",
                ":",
                "General Use",
                "'Galil DMC Code Example",
                ":",
                "MG",
                "",
                "\"Good Morning\"",
                ";",
                "",
                "'Message command displays ASCII string",
                "Good Morning",
                ":",
                "total",
                "=",
                "=",
                "",
                "1234.5322",
                ";",
                "",
                "'Assigns variable total with the value 1234.5322",
                ":",
                "MG",
                "",
                "\"The answer is...\"",
                ",",
                "total",
                "{F4.2}",
                ";",
                "",
                "'Will print the message and the value of variable total formatted with 4 integer digits and 2 fractional digits",
                "Galil Motion Control",
                "MG"
            ],
            "Explanation": "218/328"
        },
        "Description": "The MG command is used to send strings, operands, variables, and array values to a specified destination.",
        "Arguments": {
            "Unnamed: 0": {
                "0": "nan",
                "1": "nan",
                "2": "nan",
                "3": "nan",
                "4": "nan",
                "5": "nan",
                "6": "nan"
            },
            "0": {
                "0": "n1",
                "1": "nan",
                "2": "nan",
                "3": "nan",
                "4": "nan",
                "5": "Argument",
                "6": "n"
            },
            "Unnamed: 1": {
                "0": "Numeric value",
                "1": "Variable name",
                "2": "Operand",
                "3": "Array element",
                "4": "Mathematical expression",
                "5": "Value",
                "6": "Operand"
            },
            "Unnamed: 2": {
                "0": "Prints the numeric value specified",
                "1": "Prints the numeric value stored by the variable",
                "2": "Prints the numeric value stored by the operand",
                "3": "Prints the numeric value stored by the array element",
                "4": "Prints the numeric value of the solved equation",
                "5": "Description",
                "6": "Prints the numeric value stored by the operand"
            },
            "Unnamed: 3": {
                "0": "See Examples for valid uses of n1.",
                "1": "nan",
                "2": "nan",
                "3": "nan",
                "4": "nan",
                "5": "Notes",
                "6": "nan"
            }
        },
        "Remarks": "\nMultiple strings, variables, and ASCII characters may be used; each must be separated by a comma.\nSolicited Messages\nFrom a host terminal, application code, or device, sending the MG command will return with the requested information. \nThis is known as a\nsolicited command, because the host sends the command and expects a response.\nUnsolicited Messages\nFrom embedded DMC code, the MG command will send an unsolicited, asynchronous message from the controller to the host. This can be\nused to alert an operator, send instructions, or return a variable value. This is known as an unsolicited command because the host is not\nexplicitly requesting it.\nThe CW command controls the ASCII format of all unsolicited messages.\nUnsolicited messages can go to any of the Ethernet handles or serial ports.\nThe CF command sets the default communication port for routing unsolicited messages.\nFormatting\nFormatters can be placed after each argument in to modify how it is printed.\n{Fm.n} Display variable in decimal format with m digits to left of decimal and n to the right.\n{Zm.n} Same as {Fm.n} but suppresses leading zeros.\n{$m.n} Display variable in hexadecimal format with m digits to left of decimal and n to the right.\n{Sn} Display variable as a string of length n, where n is 1 through 6. If n is greater than the length of the string stored in the variable, null chars\n(0x00) will be inserted at the end of the string.\n{N} Suppress carriage return at the end of the message.\nMessage Routing\nMG can override the default CF setting by using the following modifiers at the beginning of the message, right after MG.\n{Pn} Sends the message out the Serial port n, where n is 1 or 2 denoting Main or Auxilary (where equipped).\n{Ex} Sends the message out the Ethernet handle x, where x is A,B,C,D,E,F,G, or H\nPrinting to the LCD\nLike with other message routing modifiers, the following should be placed at the beginning of the message, right after MG.\n{Lx} Sends the message to the LCD, where x is 1 or 2 for the top or bottom line of the LCD, respectivly.\nThe message cannot be more than 8 characters when sent to the LCD screen; excess characters will not be shown.\nThe LU command must be set to 0 for user messages sent to the LCD to appear.",
        "Examples": "\nValid uses of n\n1\n argument\n'Galil DMC Code Example\n:\n'Values\n:\nMG\n \n1234.5678\n \n1234.5678\n:\n'\n:\n'Variables\n:\nvar\n=\n=\n \n12345678.9101\n:\nMG\n \nvar\n \n12345678.9101\n:\n'\n:\n'Operands\n:\nMG\n \n@AN\n[\n[\n1\n]\n]\n \n0.0121\n:\n'\n:\n'Array Elements\n:\nDM\n \narr\n[\n[\n3\n]\n]\n:\narr\n[\n[\n0\n]\n]\n= \n= \n0\n:\narr\n[\n[\n1\n]\n]\n= \n= \n1\n:\narr\n[\n[\n2\n]\n]\n= \n= \n2\n:\nMG\n \narr\n[\n[\n0\n]\n]\n,\narr\n[\n[\n1\n]\n]\n,\narr\n[\n[\n2\n]\n]\n \n0.0000 1.0000 2.0000\n:\n'\n:\n'Mathematical Expressions\n:\nMG\n \n1\n+\n2\n \n3.0000\n:\nMG\n \narr\n[\n[\n2\n]\n]\n+\nvar\n \n12345680.9101\n:\nGeneral Use\n'Galil DMC Code Example\n:\nMG\n \n\"Good Morning\"\n;\n                  \n'Message command displays ASCII string\nGood Morning\n:\ntotal\n=\n=\n \n1234.5322\n;\n                   \n'Assigns variable total with the value 1234.5322                    \n:\nMG\n \n\"The answer is...\"\n,\ntotal\n{F4.2}\n;\n  \n'Will print the message and the value of variable total formatted with 4 integer digits and 2 fractional digits "
    },
    {
        "Command": ":",
        "Usage": [],
        "Operands": {},
        "Description": "",
        "Arguments": {
            "MG {L1}\"CT SPD\",{L2}{F1.0}ct,\" \",{F4.0}rpm; 'Prints \"CT  SPD\" on line one of the LCD and \" 1  1432\" on the second li\rEN": {}
        },
        "Remarks": "",
        "Examples": ""
    },
    {
        "Command": "MO",
        "Usage": [
            {
                "Example": "MO mm",
                "Explanation": "Argument is an axis mask"
            }
        ],
        "Operands": {
            "Operands": [
                "_MOm"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "The MO command turns off the motor command line and toggles the amplifier enable signal.",
        "Arguments": {
            "Argument": {
                "0": "mm"
            },
            "Min": {
                "0": "A"
            },
            "Max": {
                "0": "ABCDEFGH"
            },
            "Default": {
                "0": "ABCDEFGH"
            },
            "Resolution": {
                "0": "Multi-Axis Mask"
            },
            "Description": {
                "0": "Specifies axis to turn off"
            },
            "Notes": {
                "0": "nan"
            }
        },
        "Remarks": "\nThe controller will continue to monitor the motor position\nSee the TP command for more details\nTo turn the motor back on use the SH (Servo Here) command.\nThe MO command is useful for positioning the motors by hand.\n_MOm contains 1.000 if the axis is in the motor off state or 0.000 if the axes is in the servo here state.",
        "Examples": "\n'Galil DMC Code Example\nMO \n;\n         \n'Turns off all motors\nMO\n \nA\nA\n;\n       \n'Turns off the A motor.  \nMO\n \nB\nB\n;\n       \n'Turns off the B motor.  \nMO\n \nCA\nCA\n;\n      \n'Turns off the C and A motors.   \nSH \n;\n         \n'Turns all motors on\naxis\n=\n=\n \n_MO\nA\nA\n;\n \n'Sets variable axis equal to the A-axis servo status \nMO applies to DMC40x0,DMC42x0,DMC41x3,DMC21x3,DMC18x6,DMC18x2,DMC30010,DMC500x0,DMC52xx0\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "MR",
        "Usage": [
            {
                "Example": "MRm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "MR n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {},
        "Description": "This command will hold up the execution of subsequent code specified motor moves backward and crosses the position specified.",
        "Arguments": {
            "Argument": {
                "0": "m",
                "1": "n"
            },
            "Min": {
                "0": "A",
                "1": "-\r2,147,483,648"
            },
            "Max": {
                "0": "H",
                "1": "2,147,483,647"
            },
            "Default": {
                "0": "N/A",
                "1": "N/A"
            },
            "Resolution": {
                "0": "Axis",
                "1": "1"
            },
            "Description": {
                "0": "Axis to assign value",
                "1": "Value of position that must be crossed in the reverse\rdirection"
            },
            "Notes": {
                "0": "nan",
                "1": "nan"
            }
        },
        "Remarks": "\nMR command references absolute position.\nAlthough multiple positions can be specified, only one of the MR conditions must be satisfied for subsequent code execution.\nThe MR command only requires an encoder and does not require that the axis be under servo control.\nThe accuracy of the MR command is the number of counts that occur in 2*TM usec. Multiply the speed by 2*TM usec to obtain the maximum error.\nExample with speed of 20,000 counts/second and TM of 1000 (1000 us).\nMaximum error = 2 * 1000 E-6 seconds * 20,000 counts/second = 40 counts\nWhen using a stepper motor, this condition is satisfied when the stepper position (as determined by the output buffer - TD) has crossed the specified\nreverse motion position.",
        "Examples": "\n'Galil DMC Code Example\n#test\n;\n'                 Program Test \n \nDP \n0\n;\n'                  Define zero \n \nJG\n \n-\n1000\n;\n'             Jog mode (speed of 1000 counts/sec) \n \nBG\n \nA\nA\n;\n'                 Begin move \n \nMR\n \n-\n3000\n;\n'             After passing the position -3000 \n \nv1\n= \n= \n_TP\nA\nA\n;\n'              Assign V1 A position \n \nMG\n \n\"Position is\"\n,\n \nv1\n;\n' Print Message \n \nST \n;\n'                   Stop\nEN\n;\n'                    End of Program \nMR applies to DMC40x0,DMC42x0,DMC41x3,DMC21x3,DMC18x6,DMC18x2,DMC30010,DMC500x0,DMC52xx0\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "MT",
        "Usage": [
            {
                "Example": "MTm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "MT n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_MTm"
            ],
            "Explanation": "Operand holds the value last set by the command"
        },
        "Description": "The MT command selects the type of the motor and the polarity of the drive signal. Motor types include standard servomotors, which require a voltage in\nthe range of +/- 10 Volts, and step motors, which require pulse and direction signals. The polarity reversal inverts the analog signals for servomotors, or\ninverts logic level of the pulse train for step motors.",
        "Arguments": {
            "Argument": {
                "0": "m",
                "1": "Argument",
                "2": "n",
                "3": "nan",
                "4": "nan",
                "5": "nan",
                "6": "nan",
                "7": "nan",
                "8": "nan"
            },
            "Min": {
                "0": "A",
                "1": "Value",
                "2": "1",
                "3": "-1",
                "4": "1.5",
                "5": "-1.5",
                "6": "2",
                "7": "-2",
                "8": "2.5"
            },
            "Max": {
                "0": "H",
                "1": "Description",
                "2": "Servo motor",
                "3": "Servo motor with reversed polarity",
                "4": "PWM/Sign servo drive",
                "5": "PWM/Sign servo drive with reversed polarity",
                "6": "Step motor with active low step pulses",
                "7": "Step motor with active high step pulses",
                "8": "Step motor with reversed direction and active low step pulses"
            },
            "Default": {
                "0": "N/A",
                "1": "Notes",
                "2": "Default",
                "3": "Setting invalid for Galil sine drives",
                "4": "nan",
                "5": "nan",
                "6": "nan",
                "7": "Valid setting for all Galil SDM stepper drives",
                "8": "nan"
            },
            "Resolution": {
                "0": "Axis",
                "1": "nan",
                "2": "nan",
                "3": "nan",
                "4": "nan",
                "5": "nan",
                "6": "nan",
                "7": "nan",
                "8": "nan"
            },
            "Description": {
                "0": "Axis to assign value",
                "1": "nan",
                "2": "nan",
                "3": "nan",
                "4": "nan",
                "5": "nan",
                "6": "nan",
                "7": "nan",
                "8": "nan"
            },
            "Notes": {
                "0": "nan",
                "1": "nan",
                "2": "nan",
                "3": "nan",
                "4": "nan",
                "5": "nan",
                "6": "nan",
                "7": "nan",
                "8": "nan"
            }
        },
        "Remarks": "\nn = ? will return the value of the motor type for the specified axis.\nFor step and direction modes (n=2,-2,2.5,-2.5), the auxiliary encoder input for the axis is no longer available.\nFor step and direction modes (n=2,-2,2.5,-2.5), TM 500 is recommended. \nContact Galil for TM greater than 500.",
        "Examples": "\n'Galil DMC Code Example\nMT\n \n1\n,\n-\n1\n,\n2\n,\n2\n;\n   \n'Configure A as servo, B as reverse servo, C and D as steppers\nMT\n \n?\n?\n,\n?\n?\n;\n        \n'Interrogate motor type for A- and B-axis \nError Number\nDescription\nCause\n6\nNumber out of range\nArgument value is not valid\n135\nMotor must be in MO\nAxis must be in motor off before changing MT\n183\nNot valid when EtherCAT network is up\nMT cannot be set when EtherCAT is running (EU1)\nMT applies to DMC500x0,DMC40x0,DMC42x0,DMC41x3,DMC30010,DMC21x3,DMC18x6,DMC18x2,DMC52xx0\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "MU",
        "Usage": [
            {
                "Example": "MU n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_MU"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "MU sets the controller's multicast address. This address is used by Galil software to detect an available Ethernet controller on the network.",
        "Arguments": {
            "Argument": {
                "0": "n0",
                "1": "n1",
                "2": "n2",
                "3": "n3"
            },
            "Min": {
                "0": "0",
                "1": "0",
                "2": "0",
                "3": "0"
            },
            "Max": {
                "0": "255",
                "1": "255",
                "2": "255",
                "3": "255"
            },
            "Default": {
                "0": "239",
                "1": "255",
                "2": "19",
                "3": "56"
            },
            "Resolution": {
                "0": "1",
                "1": "1",
                "2": "1",
                "3": "1"
            },
            "Description": {
                "0": "First field of the multicast address",
                "1": "Second field of the multicast address",
                "2": "Third field of the multicast address",
                "3": "Last field of the multicast address"
            },
            "Notes": {
                "0": "nan",
                "1": "nan",
                "2": "nan",
                "3": "nan"
            }
        },
        "Remarks": "\nSupported on DMC-40x0 firmware rev 1.1e and above.\nMU ? returns the current multicast address setting in 4 byte format\n_MU contains the 32-bit multicast address number in two's complement.",
        "Examples": "\n'Galil DMC Code Example\n:\nMU\n \n239\n,\n255\n,\n19\n,\n57\n:\nMU \n?\n?\n \n239, 255, 019, 057\n:\nMG \n_MU\n \n-268496071.0000\n:\nMG \n_MU\n{$8.0}\n$EFFF1339\n:\nMU applies to DMC40x0,DMC42x0,DMC41x3,DMC30010,DMC500x0,DMC52xx0\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "MW",
        "Usage": [
            {
                "Example": "MW n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_MW0",
                "_MW1"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "Enabling the MW command causes the controller to hold up execution of the program after sending a Modbus command until a response from the\nModbus device has been received. The MW command ensures that the command that was sent to the Modbus device was successfully received before\ncontinuing program execution.",
        "Arguments": {
            "Argument": {
                "0": "n",
                "1": "nan"
            },
            "Value": {
                "0": "0",
                "1": "1"
            },
            "Description": {
                "0": "Disables Modbus wait",
                "1": "Enables Modbus wait"
            },
            "Notes": {
                "0": "nan",
                "1": "Default"
            }
        },
        "Remarks": "\nn = ? returns the state of the Modbus wait, either 1 or 0\nIf a Modbus response is never received, then thread 0 would jump to the #TCPERR subroutine if it exists and an error code of 123 will occur on _TC.\nMW prevents the controller from sending multiple commands to the same Modbus device before it has a chance to execute them.\nOperands\n_MW0 returns last function code received\n_MW1 returns Modbus error code\n_MWn operands\n'Galil DMC Code Example\n:\nMG \n_MW0\n{$8.0}\n;\n' $ is the hex formatter\n$00000001\n:\n'above is an expected response to function code 1\n:\nMG \n_MW1\n{$8.0}\n$00000000\n:\n'no error\n_MW0 Responses\nFunction Code Sent\nNormal _MW0 Response\n_MW0 Exception Response\n1\n$01\n$81\n2\n$02\n$82\n3\n$03\n$83\n4\n$04\n$84\n5\n$05\n$85\n6\n$06\n$86\n7\n$07\n$87\n15\n$0F\n$8F\n16\n$10\n$90\n_MW1 Responses\n_MW1 returns\nException description\n$00\nNormal response\n$01\nThe request referenced an illegal function code\n$02\nThe request referenced an illegal data address",
        "Examples": "\n'Galil DMC Code Example\nMW \n1\n;\n      \n'Enables Modbus Wait\nSB \n1001\n;\n   \n'Set Bit 1 on Modbus Handle A\nCB \n1001\n;\n   \n'Clear Bit 1 on Modbus Handle A \n'Galil DMC Code Example\nREM Example on Modbus master, DMC-40x0\nREM Using _MW operands\n:\nIH\nH\nH\n= \n= \n192\n,\n168\n,\n42\n,\n43\n<\n502\n>\n2\n;\n' connect to RIO\n:\nMW \n1\n:\nSB\n \n8001\n;\n' set bit one on RIO\n:\n:\nMB\nH\nH\n= \n= \n,\n5\n,\n1\n,\n0\n;\n' clear it with MB\n:\n:\n'CB 8001 would also work\n:\nMG \n_MW0\n \n5.0000\n:\n'funct code 5 confirmed\n:\nMG \n_MW1"
    },
    {
        "Command": "0.0000",
        "Usage": [],
        "Operands": {},
        "Description": "",
        "Arguments": [],
        "Remarks": "",
        "Examples": ""
    },
    {
        "Command": "NB",
        "Usage": [
            {
                "Example": "NBm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "NB n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_NBm"
            ],
            "Explanation": "Operand holds the value last set by the command"
        },
        "Description": "The NB command sets real part of the notch poles. In other words, the NB controls the range of frequencies that will be attenuated.",
        "Arguments": {
            "Argument": {
                "0": "m",
                "1": "n"
            },
            "Min": {
                "0": "A",
                "1": "0"
            },
            "Max": {
                "0": "H",
                "1": "62.5"
            },
            "Default": {
                "0": "N/A",
                "1": "0.5"
            },
            "Resolution": {
                "0": "Axis",
                "1": "1/2"
            },
            "Description": {
                "0": "Axis to assign value",
                "1": "Value of the notch bandwidth\rin Hz"
            },
            "Notes": {
                "0": "nan",
                "1": "Max value dependent upon TM setting, see\rRemarks"
            }
        },
        "Remarks": "\nRemarks\n_NBm contains the value of the notch bandwidth for the specified axis.\nNB also determines the ratio of NB/NZ which controls the attenuation, or depth, of the notch. See NZ for more details.\nSee the NF command for recommendations on choosing NZ, NB, and NF values.\nSee Application note #2431 for additional information on setting the NF, NB and NZ commands\nhttp://www.galil.com/learn/application-notes\nMaximum Range\nThe maximum n argument is specified in Hz and is calculated by the equation below:\nwhere TM is specified in microseconds.\nThe default TM is 1000, therefore default maximum NB value = 1/(16x1000E-6) = 62.5 Hz",
        "Examples": "\n'Galil DMC Code Example\nNB\nA\nA\n=\n=\n \n10\n;\n          \n'Sets the real part of the notch pole to 10/2 Hz\nnotch\n \n=\n=\n \n_NB\nA\nA\n;\n     \n'Sets the variable \"notch\" equal to the notch bandwidth value for the A axis \nNB applies to DMC500x0,DMC40x0,DMC42x0,DMC41x3,DMC30010,DMC21x3,DMC18x6,DMC18x2\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "NF",
        "Usage": [
            {
                "Example": "NFm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "NF n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_NFm"
            ],
            "Explanation": "Operand holds the value last set by the command"
        },
        "Description": "The NF command sets the frequency of the notch filter, which is placed either in series with the PID compensation, or applied to the profiled position.",
        "Arguments": {
            "Argument": {
                "0": "m",
                "1": "n"
            },
            "Min": {
                "0": "A",
                "1": "-250"
            },
            "Max": {
                "0": "H",
                "1": "250"
            },
            "Default": {
                "0": "N/A",
                "1": "0"
            },
            "Resolution": {
                "0": "Axis",
                "1": "1"
            },
            "Description": {
                "0": "Axis to assign value",
                "1": "Sets the frequency of the notch filter"
            },
            "Notes": {
                "0": "nan",
                "1": "See Remarks"
            }
        },
        "Remarks": "\nn = 0 disables the notch.\nn > 0 applies the notch filter in series with the PID compensation. \nThe value of n is the frequency of the notch filter.\nn < 0 applies the notch filter to the profiler. \nThe absolute value of n is the frequency of the notch filter.\nn < 0 only applies to firmware rev 1.2f and later.\n_NFm contains the value of notch filter for the specified axis.\nn = ? \nReturns the value of the Notch filter for the specified axis.\nSee Application note #2431 for additonal information on setting the NF, NB and NZ commands\nhttp://www.galil.com/learn/application-notes\nChosing NF, NB, and NZ\n1\n. \nA simple way for attaining NF, NB, and NZ parameters is to follow these simple rules:\n1\n. \nEstimate the resonance frequency (GalilTools Scope with cursors or Galil's FAS software)\n2\n. \nSet NF equal to the resonance frequency\n3\n. \nSet NB = 1/2NF\n4\n. \nSet NZ between 0 and 5\n2\n. \nThe ratio of NB/NF is extremly important. See the NB command for more details.\nMaximum Range\nThe maximum n argument is specified in Hz and is calculated by the equation below:\nWhere TM is in microseconds.\nDefault TM is 1000, therefore default maximum value = 1E6/(4*1000) = 250 Hz",
        "Examples": "\n'Galil DMC Code Example\nNF \n,\n \n20\n;\n' Sets the notch frequency of B axis to 20 Hz \nNF applies to DMC500x0,DMC40x0,DMC42x0,DMC41x3,DMC30010,DMC21x3,DMC18x6,DMC18x2\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "NO",
        "Usage": [],
        "Operands": {
            "Operands": [
                "_NO"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "The NO command performs no action in a sequence and can be used as a comment in a program.",
        "Arguments": {
            "Argument": {
                "0": "str"
            },
            "Value": {
                "0": "String"
            },
            "Description": {
                "0": "A no action sequence used to document a\rprogram"
            },
            "Notes": {
                "0": "Comments are limited to the maximum row size in a program. This will vary\rby controller."
            }
        },
        "Remarks": "\n_NO returns a bit mask indicating which threads are running.\nFor example:\n0 means no threads are running\n1 means only thread 0 is running\n3 means threads 0 and 1 are running",
        "Examples": "\n'Galil DMC Code Example\n#a\n;\n                    \n'Program A\nNO\n;\n                    \n'No Operation\nNO This Program\n;\n       \n'No Operation\nNO This Program \n;\n      \n'No Operation\nNO Does Absolutely\n;\n    \n'No Operation\nNO Nothing\n;\n            \n'No Operation\nEN\n;\n                    \n'End of Program \nNO applies to DMC500x0,DMC52xx0,DMC40x0,DMC42x0,DMC41x3,DMC30010,DMC21x3,DMC18x6,DMC18x2,RIO47xxx\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "NZ",
        "Usage": [
            {
                "Example": "NZm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "NZ n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_NZm"
            ],
            "Explanation": "Operand holds the value last set by the command"
        },
        "Description": "The NZ command sets the real part of the notch zero. In other words, the NB/NZ ratio controls the amount of attenuation, or depth, of the notch filter.",
        "Arguments": {
            "Argument": {
                "0": "m",
                "1": "n"
            },
            "Min": {
                "0": "A",
                "1": "0.5"
            },
            "Max": {
                "0": "H",
                "1": "62.5"
            },
            "Default": {
                "0": "N/A",
                "1": "0"
            },
            "Resolution": {
                "0": "Axis",
                "1": "0.5"
            },
            "Description": {
                "0": "Axis to assign value",
                "1": "Value of Notch Frequency in\rHz"
            },
            "Notes": {
                "0": "nan",
                "1": "Max value dependent upon TM setting, see\rRemarks"
            }
        },
        "Remarks": "\nRemarks\nSee the NF command for recommendations on chosing NZ, NB, and NF values.\nThe maximum n argument is determiend by the following equation\nWhere TM is in microseconds, the default TM is 1000.\nSee Application note #2431 for additonal information on setting the NF, NB and NZ commands\nhttp://www.galil.com/learn/application-notes\nThe NB/NZ Ratio\nThe ratio, NB/NZ controls the amount of attenuation, or depth of the notch.\nThe larger the ratio of NB/NZ, the larger the attenuation, and vice versa.\nIf NB/NZ > 1 the signal will amplifiy the output signal causing a resonance.\nNB = NZ essentially eliminates the notch",
        "Examples": "\n'Galil DMC Code Example\nNZ\nA\nA\n \n=\n=\n \n10\n;\n' Sets the real part of the notch pole to 10/2 Hz \nNZ applies to DMC500x0,DMC40x0,DMC42x0,DMC41x3,DMC30010,DMC21x3,DMC18x6,DMC18x2\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "OA",
        "Usage": [
            {
                "Example": "OAm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "OA n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_OAm"
            ],
            "Explanation": "Operand holds the value last set by the command"
        },
        "Description": "The OA command turns on or off encoder failure detection. The controller can detect a failure on either or both channels of the encoder. This is\naccomplished by checking on whether motion of less than 4 counts is detected whenever the torque exceeds a preset level (OV) for a specified time (OT).",
        "Arguments": {
            "Argument": {
                "0": "m",
                "1": "n"
            },
            "Min": {
                "0": "A",
                "1": "0"
            },
            "Max": {
                "0": "H",
                "1": "1"
            },
            "Default": {
                "0": "N/A",
                "1": "0"
            },
            "Resolution": {
                "0": "Axis",
                "1": "1"
            },
            "Description": {
                "0": "Axis to assign value",
                "1": "Status of encoder failure detection"
            },
            "Notes": {
                "0": "nan",
                "1": "1 = enabled, 0 = disabled"
            }
        },
        "Remarks": "\nThe OA command works like the OE command: if OA is set to 1 and an encoder failure occurs, the axis goes into the motor off (MO) state and the\nstop code (SC) is set to 12 if detected during motion.\nThe encoder failure detection will shut the motor off regardless of profiling status, but the stop code is not updated unless the axis is executing a\nprofiled move at the time of the detection of the encoder failure.\nIf included in the application program and OA is set to 1, #POSERR will run when an encoder failure is detected for the axis.\nNote that for this function to work properly it is recommended to have a non-zero value for KI.",
        "Examples": "\n'Galil DMC Code Example\nOA\nA\nA\n=\n=\n \n1\n;\n' enable A axis encoder error detection\nMG \n_OA\nA\nA\n;\n'query OA value for A axis \n'Galil DMC Code Example\nOA\n \n,\n1\n;\n'  enable B axis encoder error detection \n'Galil DMC Code Example\n#setup\n'setup the encoder error detection\nOT\nA\nA\n= \n= \n10\n;\n'  Set time to 10 milliseconds\nOV\nA\nA\n= \n= \n5\n;\n'   Set voltage to 5\nOA\nA\nA\n= \n= \n1\n;\n'   Enable encoder detection feature\nEN\n'Galil DMC Code Example\nREM #POSERR example for checking to see if encoder failure occured\nREM This procedure is needed because the stop code will only update if \nREM the profilier is running at the time the encoder failure is detected.\n#POSERR\n#POSERR\n~a\n~a\n= \n= \n0\n#loop\nIF\n \n_MO\n~a\n~a\n=\n1\n \nIF\n \n(\n(\n(\n(\n_TE\n~a\n~a\n<\n_ER\n~a\n~a\n)\n)\n&\n(\n(\n_OE\n~a\n~a\n)\n)\n&\n(\n(\n_OA\n~a\n~a\n)\n)\n)\n)\n  \nMG\n \n\"possible encoder failure on \"\n,\n~a\n~a\n{Z1.0}\n,\n\" axis\"\n \nENDIF\nENDIF\n~a\n~a\n= \n= \n~a\n~a\n+\n1\nJP \n#loop\n,\n~a\n~a\n<\n_BV\nAI \n1\n;\n'              wait for input 1 to go high\nSH \n;\n'               enable all axes\nRE\nOA applies to DMC500x0,DMC40x0,DMC42x0,DMC41x3,DMC30010,DMC18x6\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "OB",
        "Usage": [
            {
                "Example": "OB n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {},
        "Description": "The OB command allows variable control of an output bit based on logical expressions. The OB n, logical expression command defines output bit i as either\n0 or 1 depending on the result from the logical expression.",
        "Arguments": [],
        "Remarks": ".\nn\n1,000\n8,999\nN/A\n1\nModbus output bit specified\nSee Remarks\nex\nN/A\nN/A\nN/A\nExpression\nExpression that defines\nstatus of output\nIf ex is true/non-zero, set output to 1. If ex is\nfalse/zero, set output to 0\nRemarks\nAn expression is any valid logical expression, variable or array element.\nAny non-zero value of the expression results in a one set to the output bit.\nExtended IO must be configured as outputs by the CO command for proper operation with the OB command.\nUsing OB with a Modbus Slave\nn = (SlaveAddress*10000) + (HandleNum*1000) + ((Module-1)*4) + (Bitnum-1)\nSlave Address is used when the ModBus device has slave devices connected to it and specified as Addresses 0 to 255. Please note that the use\nof slave devices for modbus are very rare and this number will usually be 0.\nHandleNum is the handle specifier where A is 1, B is 2 and so on.\nModule is the position of the module in the rack from 1 to 16.\nBitNum is the I/O point in the module from 1 to 4",
        "Examples": "\n'Galil DMC Code Example\nOB\n \n1\n,\n \npos\n;\n'          If pos<>0, Bit 1 is high.\n'                    If pos=0, Bit 1 is low\nOB\n \n2\n,\n \n@IN\n[\n[\n1\n]\n]\n&\n@IN\n[\n[\n2\n]\n]\n;\n' If Input 1 and Input 2 are both high, then\n'                    Output 2 is set high\nOB\n \n3\n,\n \ncount\n[\n[\n1\n]\n]\n;\n' If the element 1 in the array is zero, clear bit 3\nOB\n \nn\n,\n \ncount\n[\n[\n1\n]\n]\n;\n' If element 1 in the array is zero, clear bit n \n'Galil DMC Code Example\n'Toggle digital output 1\nOB \n1\n,\n@COM\n[\n[\n@OUT\n[\n[\n1\n]\n]\n]\n]\n \n&\n \n1\n;\n' read current state of output 1, take the bitwise complement, mask out bits. \nOB applies to DMC500x0,DMC52xx0,DMC40x0,DMC42x0,DMC41x3,DMC30010,DMC21x3,DMC18x6,DMC18x2,RIO47xxx\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "OC",
        "Usage": [
            {
                "Example": "OCm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            }
        ],
        "Operands": {
            "Operands": [
                "_OC"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "The OC command sets up the Output Compare feature, also known as Pulse on Position. The controller has a special digital output which can be\nconfigured to pulse on a specified absolute encoder position, and optionally on a delta encoder change after that. These operations are known as one-\nshot and circular compare, respectively.\nEach set of 4 axes, ABCD and EFGH, has one digital output which can be configured to this mode of operation",
        "Arguments": {
            "Argument": {
                "0": "m",
                "1": "n0",
                "2": "n1"
            },
            "Min": {
                "0": "A",
                "1": "-\r2,147,483,648",
                "2": "-65,536"
            },
            "Max": {
                "0": "H",
                "1": "2,147,483,647",
                "2": "65,535"
            },
            "Default": {
                "0": "N/A",
                "1": "N/A",
                "2": "N/A"
            },
            "Resolution": {
                "0": "Axis",
                "1": "1",
                "2": "1"
            },
            "Description": {
                "0": "Axis to enable\routput compare",
                "1": "Absolute encoder\rposition of first pulse",
                "2": "Incremental\rencoder distance\rbetween pulses"
            },
            "Notes": {
                "0": "Axes A-D share one output compare, axes E-H share\ra second output compare output",
                "1": "n0 must be within 65535 counts of current position",
                "2": "0 indicates single-shot pulse in positive direction, -\r65536 indicates single shot when moving in the\rnegative direction"
            }
        },
        "Remarks": "\nFor controllers with 5-8 axes, two output compares are available. One for the A-D axes, the other for the E-H axes\nOne shot Compare Mode:\nThe output compare signal will go low, and stay low at a specified absolute encoder position.\nThis is done by specifying n\n1\n as 0 for positive motion, and -65536 for negative motion\nCircular Compare Mode:\nAfter the absolute position of the first pulse (n\n0\n), the circular compare can be configured to pulse low at a relative distance thereafter (n\n1\n).\nThis is done by specifying n\n1\n to a non-zero delta position (range of -65535 to 65535)\nOCA = 0 will disable the Circular Compare function on axes A-D.\nOCE = 0 will disable the Circular Compare function on axes E-H.\nThe circular compare output is a low-going pulse with a duration of approximately 250 nanoseconds.\nLimitations\nThe Output Compare function is only valid with incremental encoders.\nThe Output Compare function is not valid with SIN/COS (AF settings of 5-12), standard analog (AF setting of 1), BiSS or SSI feedback (SS or SI\ncommands).\nThe OC function cannot work for an axis configured as a stepper.\nThe auxiliary encoder of the corresponding axis cannot be used when in this mode.\nDual loop mode (which uses the aux encoder input) will not operate when the OC command is enabled.\nThe OC function requires that the main encoder and auxiliary encoders be configured exactly the same (see the command, CE). For example: CE 0,\nCE 5, CE 10, CE 15.\nOC only requires an encoder, and is independent of axis tuning, and motion profiling.\nOperand Usage\n_OC contains the state of the OC function.\n_OC = 0 : OC function has been enabled but not generated any pulses.\n_OC = 1: OC function not enabled or has generated the first output pulse.\nOn a 5-8 axis controller, _OC is a logical AND of axes A-D and E-H.",
        "Examples": "\n'Galil DMC Code Example\nOC\nA\nA\n= \n= \n300\n,\n100\n;\n' Select A encoder as position sensor.\nREM First pulse at 300. Following pulses at 400, 500, 600 ... \n'Galil DMC Code Example\nREM Output compare can be used to create raster scans. \nREM By using circular compare on one axis, followed by an index move on a perpindicular axis \nREM raster patterns are easily made. \nREM The following image shows a rastered \"dot matrix\" type image easily created \nREM with output compare and a laser on a two dimensional stage. "
    },
    {
        "Command": "\u00a92017 Galil Motion Control. Corrections, Feedback: ",
        "Usage": [],
        "Operands": {},
        "Description": "",
        "Arguments": [],
        "Remarks": "",
        "Examples": ""
    },
    {
        "Command": "OE",
        "Usage": [
            {
                "Example": "OEm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "OE n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_OEm"
            ],
            "Explanation": "Operand holds the value last set by the command"
        },
        "Description": "The OE command sets the Off On Error function for the controller. The OE command causes the controller to shut off the motor command if a position\nerror exceeds the limit specified by the ER command, an abort occurs from either the abort input or on AB command, or an amplifier error occurs based\non the description of the TA command.",
        "Arguments": {
            "Argument": {
                "0": "m",
                "1": "n",
                "2": "nan",
                "3": "nan",
                "4": "nan"
            },
            "Min": {
                "0": "A",
                "1": "0",
                "2": "1",
                "3": "2",
                "4": "3"
            },
            "Max": {
                "0": "H",
                "1": "0",
                "2": "1",
                "3": "2",
                "4": "3"
            },
            "Default": {
                "0": "N/A",
                "1": "0",
                "2": "0",
                "3": "0",
                "4": "0"
            },
            "Resolution": {
                "0": "Axis",
                "1": "0",
                "2": "0",
                "3": "0",
                "4": "0"
            },
            "Description": {
                "0": "Axis to assign value",
                "1": "Disables the Off On Error Function",
                "2": "Motor shut off by position error, amplifier error or abort input",
                "3": "Motor shut off by hardware limit switch",
                "4": "Motor shut off by position error, amplifier error, abort input or by\rhardware limit switch"
            },
            "Notes": {
                "0": "nan",
                "1": "Default",
                "2": "nan",
                "3": "nan",
                "4": "nan"
            }
        },
        "Remarks": "\nFor any value of OE <> 0, the axis will be shut off due to amplifier faults on any amplifier axis. See the TA command for conditions of an amplifier fault.\nBR1 must be enabled when internal brushless servo amplifiers are installed but the axis is driven with an external amplifier. BR1 disables hall error\nchecking when OE <> 0",
        "Examples": " of brushless servo amps that require this consideration include the AMP-43040 (-D3040) or the AMP-20540\nMotion Behavior:\nIf an error or axis-specific abort is detected, and the motion was executing an independent move, only that axis will be shut off.\nIf the motion is a part of coordinated mode of the types GM, VM, LM or CM, all participating axes will be stopped.\nExamples\n'Galil DMC Code Example\n:\nOE\n \n1\n,\n1\n,\n1\n,\n1\n;\n'   Enable OE on all axes\n:\nOE\n \n0\n;\n'         Disable OE on A-axis, other axes remain unchanged\n:\nOE\n \n,\n,\n1\n,\n1\n;\n'     Enable OE on C-axis and D-axis, other axes remain unchanged\n:\nOE\n \n1\n,\n0\n,\n1\n,\n0\n;\n'   Enable OE on A and C-axis, Disable OE on B and D axis\n:\nMG\n \n_OE\nA\nA\n;\n' Query A axis OE setting\n \n1.0000 \n'Galil DMC Code Example\n#main\n'code to enable the OE command for all error conditions\n'and setup the corresponding automatic subroutines\n'to display relevent data\n'no loop for abort input, as that stops code operation\nOE\n \n3\n,\n3\n,\n3\n,\n3\nSH \nABCD\nABCD\nJG\n*\n*\n= \n= \n1000\n;\n' all jog at 1000\nBG \nABCD\nABCD\n#loop\n'endless loop\nWT \n1000\nJP \n#loop\nEN\n#AMPERR\n#AMPERR\nMG\n \n\"amplifier fault\"\nMG\n \n_TA0\n,\n_TA1\n,\n_TA2\n,\n_TA3\nEN\n#POSERR\n#POSERR\nMG\n \n\"position error fault\"\nMG\n \n_TE\nA\nA\n,\n_TE\nB\nB\n,\n_TE\nC\nC\n,\n_TE\nD\nD\nEN\n#LIMSWI\n#LIMSWI\nMG\n \n\"limit switch fault\"\nMG\n \n_TS\nA\nA\n,\n_TS\nB\nB\n,\n_TS\nC\nC\n,\n_TS\nD\nD\nEN\nOE applies to DMC40x0,DMC42x0,DMC41x3,DMC21x3,DMC18x6,DMC18x2,DMC30010,DMC500x0,DMC52xx0"
    },
    {
        "Command": "documentation@galilmc.com",
        "Usage": [],
        "Operands": {},
        "Description": "",
        "Arguments": [],
        "Remarks": "",
        "Examples": ""
    },
    {
        "Command": "OF",
        "Usage": [
            {
                "Example": "OFm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "OF n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_OFm"
            ],
            "Explanation": "Operand holds the value last set by the command"
        },
        "Description": "The OF command sets a bias voltage in the command output or returns a previously set value.",
        "Arguments": {
            "Argument": {
                "0": "m",
                "1": "n"
            },
            "Min": {
                "0": "A",
                "1": "-9.9982"
            },
            "Max": {
                "0": "H",
                "1": "9.9982"
            },
            "Default": {
                "0": "N/A",
                "1": "0"
            },
            "Resolution": {
                "0": "Axis",
                "1": "20/65,536"
            },
            "Description": {
                "0": "Axis to assign value",
                "1": "Offset voltage applied to MCMD"
            },
            "Notes": {
                "0": "nan",
                "1": "nan"
            }
        },
        "Remarks": "\nThis can be used to counteract gravity or an offset in an amplifier.",
        "Examples": "\n'Galil DMC Code Example\n:\nOF\n \n1\n,\n-\n2\n,\n3\n,\n5\n;\n' Set A-axis offset to 1, the B-axis offset to -2, the C-axis to 3, and the D-axis to 5\n:\nOF\n \n-\n3\n;\n'  Set A-axis offset to -3  Leave other axes unchanged\n:\nOF\n \n,\n0\n;\n'  Set B-axis offset to 0  Leave other axes unchanged\n:\nOF\n \n?\n?\n,\n?\n?\n,\n?\n?\n,\n?\n?\n;\n' Return offsets\n-3.0000,0.0000,3.0000,5.0000 \n:\nOF\n \n?\n?\n;\n'  Return A offset\n-3.0000 \n:\nOF\n \n,\n?\n?\n;\n' Return B offset\n0.0000 \nOF applies to DMC500x0,DMC40x0,DMC42x0,DMC41x3,DMC30010,DMC21x3,RIO47xxx,DMC18x6,DMC18x2\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "OP",
        "Usage": [
            {
                "Example": "OP n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_OP0",
                "_OP1",
                "_OP2"
            ],
            "Explanation": "Operand holds the value last set by the command"
        },
        "Description": "The OP command sets the output ports of the controller in a bank using bitmasks. Arguments to the OP command are bit patterns (decimal or hex) to\nset entire banks (bytes) of digital outputs. Use SB, CB or OB to set bits individually.",
        "Arguments": {
            "Argument": {
                "0": "n0",
                "1": "n1",
                "2": "n2"
            },
            "Min": {
                "0": "0",
                "1": "0",
                "2": "0"
            },
            "Max": {
                "0": "65,535",
                "1": "65,535",
                "2": "65,535"
            },
            "Default": {
                "0": "0",
                "1": "0",
                "2": "0"
            },
            "Resolution": {
                "0": "1",
                "1": "1",
                "2": "1"
            },
            "Description": {
                "0": "Decimal representation: General\rOutputs 1-16",
                "1": "Decimal representation: Extended\rOutput (Bank 2,3)",
                "2": "Decimal representation: Extended\rOutput (Bank 4,5)"
            },
            "Notes": {
                "0": "On a 1-4 axis controller, max is 255 ($FF)\rfor outputs 1-8 only.",
                "1": "nan",
                "2": "nan"
            }
        },
        "Remarks": "\nBit patterns for extended I/O banks (where available) configured as inputs have no affect on the IO status.\nOutput Mapping Examples\nExample\nCommand Issued (Hex version)\nBits Set\nBits Cleared\n1-4 axis Set all outputs\nOP255 (OP$FF)\n1-8\n-\n5-8 axis Set all outputs\nOP65535 (OP$FFFF)\n1-16\n-\nClear all outputs\nOP0 (OP$0000)\n-\n1-16\nAlternating on/off\nOP43690 (OP$AAAA)\n2,4,6,8,10,12,14,16\n1,3,5,7,9,11,13,15\nSet High Byte\nOP65280 (OP$FF00)\n9-16\n1-8\nSet Low Byte\nOP255 (OP$00FF)\n1-8\n9-16",
        "Examples": "\n'Galil DMC Code Example\nOP\n \n0\n;\n'   Clear Output Port -- all bits\nOP\n \n$85\n;\n' Set outputs 1,3,8 and clear the others\nMG\n \n_OP0\n;\n' Returns the parameter \"n0\" \nOP applies to DMC500x0,DMC40x0,DMC42x0,DMC41x3,DMC30010,DMC21x3,RIO47xxx,DMC18x6,DMC18x2,RIO574x0,DMC52xx0\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "OT",
        "Usage": [
            {
                "Example": "OTm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "OT n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_OTm"
            ],
            "Explanation": "Operand holds the value last set by the command"
        },
        "Description": "The OT command sets the timeout time for the encoder failure routine. The command sets the time in samples that the encoder failure will wait for motion\nafter the OV threshold has been exceeded. The controller can detect a failure on either or both channels of the encoder.",
        "Arguments": {
            "Argument": {
                "0": "m",
                "1": "n"
            },
            "Min": {
                "0": "A",
                "1": "1"
            },
            "Max": {
                "0": "H",
                "1": "32,000"
            },
            "Default": {
                "0": "N/A",
                "1": "30"
            },
            "Resolution": {
                "0": "Axis",
                "1": "1"
            },
            "Description": {
                "0": "Axis to assign value",
                "1": "Number of samples for error detection"
            },
            "Notes": {
                "0": "nan",
                "1": "nan"
            }
        },
        "Remarks": "\nEncoder error detection is based on whether motion of at least 4 counts is detected whenever the torque exceeds a preset level (OV) for a specified\ntime (OT).\nNote that for this function to work properly it is necessary to have a non-zero value for KI.\nSee the OA command for more details on this error detection mode",
        "Examples": "\n'Galil DMC Code Example\nOT\nD\nD\n=\n=\n \n400\n;\n'   Set D axis encoder error timeout to 400 samples\nOT\n \n100\n,\n200\n;\n' Set A axis to 100 and B axis to 200 sample timeouts \n'Galil DMC Code Example\n#setup\nOT\nA\nA\n=\n=\n \n10\n;\n'  Set time to 10 milliseconds\nOV\nA\nA\n=\n=\n \n5\n;\n'   Set voltage to 5\nOA\nA\nA\n=\n=\n \n1\n;\n'   Enable encoder detection feature\nEN\n'Galil DMC Code Example\nREM #POSERR example for checking to see if encoder failure occured\nREM This procedure is needed because the stop code will only update if \nREM the profilier is running at the time the encoder failure is detected.\n#POSERR\n#POSERR\n~a\n~a\n= \n= \n0\n#loop\nIF\n \n_MO\n~a\n~a\n=\n1\n \nIF\n \n(\n(\n(\n(\n_TE\n~a\n~a\n<\n_ER\n~a\n~a\n)\n)\n&\n(\n(\n_OE\n~a\n~a\n)\n)\n&\n(\n(\n_OA\n~a\n~a\n)\n)\n)\n)\n  \nMG\n \n\"possible encoder failure on \"\n,\n~a\n~a\n{Z1.0}\n,\n\" axis\"\n \nENDIF\nENDIF\n~a\n~a\n= \n= \n~a\n~a\n+\n1\nJP \n#loop\n,\n~a\n~a\n<\n_BV\nAI \n1\n;\n'              wait for input 1 to go high\nSH \n;\n'               enable all axes\nRE\nOT applies to DMC500x0,DMC40x0,DMC42x0,DMC41x3,DMC30010,DMC18x6\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "OV",
        "Usage": [
            {
                "Example": "OVm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "OV n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_OVm"
            ],
            "Explanation": "Operand holds the value last set by the command"
        },
        "Description": "The OV command sets the threshold voltage for detecting an encoder failure. The controller can detect a failure on either or both channels of the\nencoder.",
        "Arguments": {
            "Argument": {
                "0": "m",
                "1": "n"
            },
            "Min": {
                "0": "A",
                "1": "0"
            },
            "Max": {
                "0": "H",
                "1": "9.9982"
            },
            "Default": {
                "0": "N/A",
                "1": "0.9438"
            },
            "Resolution": {
                "0": "Axis",
                "1": "20/65,536"
            },
            "Description": {
                "0": "Axis to assign value",
                "1": "Torque voltage to trigger encoder error detection"
            },
            "Notes": {
                "0": "nan",
                "1": "nan"
            }
        },
        "Remarks": "\nEncoder error detection is accomplished by checking on whether motion of at least 4 counts is detected whenever the torque exceeds a preset level\n(OV) for a specified time (OT).\nNote that for this function to work properly it is recommended to have a non-zero value for KI.\nThe value of OV should be high enough to guarantee that the motor would overcome any static friction in the system. \nIf it is too low, there will be\nfalse triggering of the error condition.\nThe OV value may not be higher than the TL value.\nSee the OA command for more details on this error detection mode",
        "Examples": "\n'Galil DMC Code Example\nOV\nB\nB\n=\n=\n \n1.2\n;\n' Set B axis encoder detection torque value to 1.2V\nOV\n \n0.54\n;\n'  Set A axis encoder detection torque value to 0.54V \n'Galil DMC Code Example\n#setup\n'setup the encoder error detection\nOT\nA\nA\n=\n=\n \n10\n;\n'  Set time to 10 milliseconds\nOV\nA\nA\n=\n=\n \n5\n;\n'   Set voltage to 5\nOA\nA\nA\n=\n=\n \n1\n;\n'   Enable encoder detection feature\nEN\n'Galil DMC Code Example\nREM #POSERR example for checking to see if encoder failure occured\nREM This procedure is needed because the stop code will only update if \nREM the profilier is running at the time the encoder failure is detected.\n#POSERR\n#POSERR\n~a\n~a\n= \n= \n0\n#loop\nIF\n \n_MO\n~a\n~a\n=\n1\n \nIF\n \n(\n(\n(\n(\n_TE\n~a\n~a\n<\n_ER\n~a\n~a\n)\n)\n&\n(\n(\n_OE\n~a\n~a\n)\n)\n&\n(\n(\n_OA\n~a\n~a\n)\n)\n)\n)\n  \nMG\n \n\"possible encoder failure on \"\n,\n~a\n~a\n{Z1.0}\n,\n\" axis\"\n \nENDIF\nENDIF\n~a\n~a\n= \n= \n~a\n~a\n+\n1\nJP \n#loop\n,\n~a\n~a\n<\n_BV\nAI \n1\n;\n'              wait for input 1 to go high\nSH \n;\n'               enable all axes\nRE\nOV applies to DMC500x0,DMC40x0,DMC42x0,DMC41x3,DMC30010,DMC18x6\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "P2CD",
        "Usage": [
            {
                "Example": "variable= P2CD",
                "Explanation": "Holds a value"
            }
        ],
        "Operands": {
            "Operands": [
                "P2CD"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "P2CD returns the status of the auxiliary serial port (port 2). The value of P2CD returns zero after the corresponding string or number is read.",
        "Arguments": {
            "Status Code": {
                "0": "-1",
                "1": "0",
                "2": "1",
                "3": "2",
                "4": "3"
            },
            "Meaning": {
                "0": "Mode disabled",
                "1": "Nothing received",
                "2": "Received character, but not carriage return",
                "3": "received a string, not a number",
                "4": "received a number"
            }
        },
        "Remarks": "\nP2CD contains the following status codes\nP2CD Status Codes\nStatus Code\nMeaning\n-1\nMode disabled\n0\nNothing received\n1\nReceived character, but not carriage return\n2\nreceived a string, not a number\n3\nreceived a number",
        "Examples": "\n'Galil DMC Code Example\n:\n^R^V\nDMC2240 Rev 1.0o\n:\n^R^S\n:\nCC\n \n9600\n,\n0\n,\n0\n,\n0\n:\nMG\n \n\"TEST\"\n \n{P2}\n;\n'    send a message to the hand terminal\n:\nMG\n \nP2CD\n;\n'           no characters entered on hand terminal\n0.0000\n:\nMG\n \nP2CD\n;\n'           the number 6 was pushed on the hand terminal\n1.0000\n:\nMG\n \nP2CD\n;\n'           enter key pushed on hand terminal\n3.0000\n:\nMG\n \nP2CD\n;\n'           the character B was pushed (shift f2) then enter\n2.0000 \nP2CD applies to DMC500x0,DMC40x0,DMC42x0,DMC41x3\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "P2CH",
        "Usage": [
            {
                "Example": "variable= P2CH",
                "Explanation": "Holds a value"
            }
        ],
        "Operands": {
            "Operands": [
                "P2CH"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "P2CH returns the last character sent to the auxiliary serial port (port 2)",
        "Arguments": {
            "'Galil DMC Code Example\r:^R^V\rDMC2240 Rev 1.0o\r:^R^S\r:CC 9600,0,0,0\r:MG \"TEST\" {P2} ;'send a message to the hand terminal\r:MG P2CH {S1} ;'the 6 button was pushed on the hand terminal\r6\r:": {}
        },
        "Remarks": "\nNone",
        "Examples": "\n'Galil DMC Code Example\n:\n^R^V\nDMC2240 Rev 1.0o\n:\n^R^S\n:\nCC\n \n9600\n,\n0\n,\n0\n,\n0\n:\nMG\n \n\"TEST\"\n \n{P2}\n \n;\n'send a message to the hand terminal\n:\nMG\n \nP2CH\n \n{S1}\n \n;\n'the 6 button was pushed on the hand terminal\n6\n:\nP2CH applies to DMC500x0,DMC40x0,DMC42x0,DMC41x3\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "P2NM",
        "Usage": [
            {
                "Example": "variable= P2NM",
                "Explanation": "Holds a value"
            }
        ],
        "Operands": {
            "Operands": [
                "P2NM"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "P2NM returns the last number (followed by carriage return) sent to auxiliary serial port (port 2).",
        "Arguments": {
            "'Galil DMC Code Example\r:^R^V\rDMC2240 Rev 1.0o\r:^R^S\r:CC 9600,0,0,0\r:MG \"TEST\" {P2} ;'send a message to the hand terminal\r:x = P2NM ;'the 1, 2, 3,  buttons were pushed\r:MG x\r123.0000\r:": {}
        },
        "Remarks": "\nConverts from ASCII (e.g. \"1234\") to binary so that a number can be stored into a variable and math can be performed on it.\nNumbers from -2147483648 to 2147483647 can be processed.",
        "Examples": "\n'Galil DMC Code Example\n:\n^R^V\nDMC2240 Rev 1.0o\n:\n^R^S\n:\nCC\n \n9600\n,\n0\n,\n0\n,\n0\n:\nMG\n \n\"TEST\"\n \n{P2}\n \n;\n'send a message to the hand terminal\n:\nx\n \n=\n=\n \nP2NM\n \n;\n'the 1, 2, 3, \n buttons were pushed\n:\nMG\n \nx\n123.0000\n:\nP2NM applies to DMC500x0,DMC40x0,DMC42x0,DMC41x3\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "P2ST",
        "Usage": [
            {
                "Example": "variable= P2ST",
                "Explanation": "Holds a value"
            }
        ],
        "Operands": {
            "Operands": [
                "P2ST"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "P2ST returns the last string (followed by carriage return) sent to auxiliary serial port (port 2)",
        "Arguments": {
            "'Galil DMC Code Example\r:CC 9600,0,1,0\r:MG \"TEST\" {P2} ;'send a message to the hand terminal\r:MG P2ST {S3} ;'the characters ABC were entered\rABC": {}
        },
        "Remarks": "\nNo more than 6 characters can be assessed by this operand",
        "Examples": "\n'Galil DMC Code Example\n:\nCC\n \n9600\n,\n0\n,\n1\n,\n0\n:\nMG\n \n\"TEST\"\n \n{P2}\n \n;\n'send a message to the hand terminal\n:\nMG\n \nP2ST\n \n{S3}\n \n;\n'the characters ABC were entered\nABC \nP2ST applies to DMC500x0,DMC40x0,DMC42x0,DMC41x3\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "PA",
        "Usage": [
            {
                "Example": "PAm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "PA n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_PAm"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "The PA command sets the end target of the Position Absolute Mode of Motion.",
        "Arguments": {
            "Argument": {
                "0": "m",
                "1": "nan",
                "2": "n"
            },
            "Min": {
                "0": "A",
                "1": "M",
                "2": "-\r2,147,483,648"
            },
            "Max": {
                "0": "H",
                "1": "N",
                "2": "2,147,483,647"
            },
            "Default": {
                "0": "N/A",
                "1": "N/A",
                "2": "0"
            },
            "Resolution": {
                "0": "Axis",
                "1": "Axis",
                "2": "1"
            },
            "Description": {
                "0": "Axis to assign value",
                "1": "Virtual axis to assign value",
                "2": "Absolute position target for\rindependant move"
            },
            "Notes": {
                "0": "nan",
                "1": "nan",
                "2": "n=? returns the commanded position at\rwhich motion last stopped"
            }
        },
        "Remarks": "\nThe position is referenced to the absolute zero position, defined as position 0.\nBy default a new PA command may not be issued before the previous PA command has finished executing. \nThis operation may be changed by\nrunning in Position Tracking Mode - See the PT command for more information.\nOperand Usage\n_PAm contains the last commanded position at which motion stopped.",
        "Examples": "\n'Galil DMC Code Example\n:\nPA\n \n400\n,\n-\n600\n,\n500\n,\n200\n;\n'     A-axis will go to 400 counts B-axis will go to -600 counts \n:\n'                          C-axis will go to 500 counts D-axis will go to 200 counts\n:\nBG \n;\n'                  Execute Motion\n:\nPA\n \n?\n?\n,\n?\n?\n,\n?\n?\n,\n?\n?\n;\n'          Returns the current commanded position after motion has completed\n400, -600, 500, 200 \n:\nPA\n \n700\n;\n'                 A-axis will go to 700 on the next move while the\n:\nBG \n;\n'                  B,C and D-axis will travel the previously set relative distance \n:\n'                         if the preceding move was a PR move, or will not move if the \n:\n'                         preceding move was a PA move. \n'Galil DMC Code Example\nDP \n10000\n;\n'   set current position to 10000\nPA \n3000\n;\n'    move to absolute position 3000, which is a -7000 count move\nBG \nA\nA\n;\n'       begin -7000 count move\nEN\nPA applies to DMC40x0,DMC42x0,DMC41x3,DMC21x3,DMC18x6,DMC18x2,DMC30010,DMC500x0,DMC52xx0\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "PF",
        "Usage": [
            {
                "Example": "PF n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_PF"
            ],
            "Explanation": "Operand holds the value last set by the command"
        },
        "Description": "The PF command allows the user to format the position numbers such as those returned by TP. The number of digits of integers and the number of digits\nof decimal can be selected with this command. An extra digit for sign and a digit for decimal point will be added to the total number of digits.",
        "Arguments": {
            "Argument": {
                "0": "n0",
                "1": "n1"
            },
            "Min": {
                "0": "-8",
                "1": "0"
            },
            "Max": {
                "0": "10",
                "1": "4"
            },
            "Default": {
                "0": "10",
                "1": "0"
            },
            "Resolution": {
                "0": "1",
                "1": "1"
            },
            "Description": {
                "0": "Number of places displayed\rpreceding the decimal point",
                "1": "Number of places displayed after the\rdecimal point"
            },
            "Notes": {
                "0": "Negative numbers force data to display in\rhexadecimal format",
                "1": "nan"
            }
        },
        "Remarks": "\nIf PF is minus, the format will be hexadecimal and a dollar sign will precede the characters. Hex numbers are displayed as 2's complement with the first\nbit used to signify the sign.\nIf a number exceeds the format, the number will be displayed as the maximum possible positive or negative number (i.e. 999.99, -999, $8000 or\n$7FF).\nThe PF command formats the values returned from the following commands:\nBL?\nIP ?\nTD\nDE ?\nLE ?\nTE\nDP ?\nPA ?\nTN\nEM ?\nPR ?\nTP\nFL ?\nRL\nVE\nGP\nRP",
        "Examples": "\n'Galil DMC Code Example\n:\nDP\n \n2l\n;\n'  Set position of A axis for example\n:\nTP\n \nA\nA\n;\n'   Tell position of A in default format\n \n21\n:\nPF\n \n5.2\n;\n' Change format to 5 digits of integers and 2 of decimal\n:\nTP\n \nA\nA\n \n21.00 \n:\nPF \n-\n5.2\n;\n' Change format to hexadecimal\n:\nTP\n \nA\nA\n$00015.00 \nPF applies to DMC40x0,DMC42x0,DMC41x3,DMC21x3,DMC18x6,DMC18x2,DMC30010,DMC500x0,DMC52xx0\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "PL",
        "Usage": [
            {
                "Example": "PLm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "PL n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_PLm"
            ],
            "Explanation": "Operand holds the value last set by the command"
        },
        "Description": "The PL command adds a low-pass filter in series with the PID compensation.\nThe crossover frequency is entered directly as an argument to PL. To maintain compatibility with earlier versions, a value less than 1 may also be specified.",
        "Arguments": {
            "Argument": {
                "0": "m",
                "1": "n",
                "2": "nan"
            },
            "Min": {
                "0": "A",
                "1": "0",
                "2": "0"
            },
            "Max": {
                "0": "H",
                "1": "250",
                "2": "0.9999"
            },
            "Default": {
                "0": "N/A",
                "1": "0",
                "2": "0"
            },
            "Resolution": {
                "0": "Axis",
                "1": "1",
                "2": "2/65,536"
            },
            "Description": {
                "0": "Axis to assign value",
                "1": "Crossover frequency created by\rthe PL command",
                "2": "Value used to generate pole filter\rcrossover frequency"
            },
            "Notes": {
                "0": "nan",
                "1": "'Max' is a function of TM. See Remarks. n =\r0 disables the Pole filter.",
                "2": "See Remarks for the equation used. n = 0\rdisables the Pole filter"
            }
        },
        "Remarks": "\nAt lower TM settings, the maximum pole frequency is increased. The maximum value of the PL command is determined by the value of TM according\nto the following equation\nMax = (1/4 * 10^6) * (1/TM)\nThe digital transfer function of the filter is (1 - n) / (Z - n) and the equivalent continuous filter is A/(S+A) where A is the filter cutoff frequency: A=(1/T)\nln (1 / n) rad/sec and T is the sample time.\nCalculated Pole\nTo convert from the desired crossover (-3 dB) frequency in Hertz to the value given to PL, use the following formula\nwhere\nn is the argument given to PL (less than 1)\nT is the controller's servo loop sample time in seconds (TM divided by 1,000,000)\nFc is the crossover frequency in Hertz\nExample: Fc=36Hz \nTM=1000 \nn=e^(-0.001*36*2*pi) =0.8\nThe following shows several example crossover frequencies achieved with various values of PL\nn\nFc (Hz)\n0\nInfinite (off)\n0.2\n256\n0.4\n145\n0.6\n81\n0.8\n36\n0.999\n0",
        "Examples": "\n'Galil DMC Code Example\n'Set A-axis Pole to 0.95, B-axis to 0.9, C-axis to 0.8, D-axis pole to 0.822\n:\nPL\n \n.95\n,\n.9\n,\n.8\n,\n.822\nQuery all Pole values\n:\nPL\n \n?\n?\n,\n?\n?\n,\n?\n?\n,\n?\n?\n0.9527,0.8997,0.7994,0.8244\nReturn A Pole only\n:\nPL \n?\n?\n0.9527 \nPL applies to DMC500x0,DMC40x0,DMC42x0,DMC41x3,DMC30010,DMC21x3,DMC18x6,DMC18x2\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "PR",
        "Usage": [
            {
                "Example": "PRm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "PR n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_PRm"
            ],
            "Explanation": "Operand holds the value last set by the command"
        },
        "Description": "The PR command sets the incremental distance and direction of the next move. The move is referenced with respect to the current position. .",
        "Arguments": {
            "Argument": {
                "0": "m",
                "1": "nan",
                "2": "n"
            },
            "Min": {
                "0": "A",
                "1": "M",
                "2": "-\r2,147,483,648"
            },
            "Max": {
                "0": "H",
                "1": "N",
                "2": "2,147,483,647"
            },
            "Default": {
                "0": "N/A",
                "1": "N/A",
                "2": "N/A"
            },
            "Resolution": {
                "0": "Axis",
                "1": "Axis",
                "2": "1"
            },
            "Description": {
                "0": "Axis to assign value",
                "1": "Virtual axis to assign value",
                "2": "Incremental distance for\rindependent move"
            },
            "Notes": {
                "0": "nan",
                "1": "nan",
                "2": "n = ? returns the current incremental\rdistance specified"
            }
        },
        "Remarks": "\n_PRm contains the current incremental distance for the specified axis.",
        "Examples": "\n'Galil DMC Code Example\n:\nPR\n \n100\n,\n200\n,\n300\n,\n400\n;\n' On the next move the A-axis will go 100 counts,\n:\nBG \n;\n' the B-axis will go to 200 counts forward, C-axis will go 300 counts and the D-axis will go 400 counts.\n:\nPR\n \n?\n?\n,\n?\n?\n,\n?\n?\n;\n' Return relative distances\n100,200,300 \n:\nPR\n \n500\n;\n' Set the relative distance for the A axis to 500\n:\nBG \n;\n' The A-axis will go 500 counts on the next move while the B-axis will go its previously set relative distance. \n'Galil DMC Code Example\n'using PA/PR, you can query PR for the incremental distance\n:\nDP\n \n10000\n:\nPA\n \n8000\n:\nPR\n \n?\n?\n-2000 \nPR applies to DMC40x0,DMC42x0,DMC41x3,DMC21x3,DMC18x6,DMC18x2,DMC30010,DMC500x0,DMC52xx0\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "PT",
        "Usage": [
            {
                "Example": "PTm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "PT n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_PTm"
            ],
            "Explanation": "Operand holds the value last set by the command"
        },
        "Description": "The PT command will place the controller in the position tracking mode. In this mode, the controller will allow the user to issue absolute position commands\nthat begin motion immediately without requiring a BG command. The absolute position may be specified such that the axis will begin motion, continue in\nthe same direction, reverse directions, or decelerate to a stop",
        "Arguments": {
            "Argument": {
                "0": "m",
                "1": "n"
            },
            "Min": {
                "0": "A",
                "1": "0"
            },
            "Max": {
                "0": "H",
                "1": "1"
            },
            "Default": {
                "0": "N/A",
                "1": "0"
            },
            "Resolution": {
                "0": "Axis",
                "1": "1"
            },
            "Description": {
                "0": "Axis to assign value",
                "1": "Setting for position tracking mode of\rmotion"
            },
            "Notes": {
                "0": "nan",
                "1": "n = 1 enables PT mode, n = 0 disables\rPT mode"
            }
        },
        "Remarks": "\nThe PA command is used to give the controller an absolute position target. Motion commands other than PA are not supported in this mode.\nThe motion profile is trapezoidal with the parameters controlled by acceleration, deceleration, and speed (AD, DC, SP).\nWhen in the PT mode the ST command will exit the mode.\nThe AM and MC trip points are not valid in this mode.\nMF and MR are recommended with this mode as they allow the user to specify both the absolute position, and the direction. The AP trip point\nmay also be used.\nPosition Tracking is not valid on virtual axes",
        "Examples": "\n'Galil DMC Code Example\nDP\nA\nA\n=\n=\n \n0\n;\n'   Start position at absolute zero\nPT\nA\nA\n=\n=\n \n1\n;\n'   Start PT mode on A axis\nPA\n \n1000\n;\n'  Move to position 1000, motion starts right away\nMF\n \n500\n;\n'   Wait till position 500 reached\nPA\n \n-\n1000\n;\n' Reverse direction to move to position -1000\nEN\n'Galil DMC Code Example\n#a\n \nPT\n \n1\n,\n1\n,\n1\n,\n1\n;\n'        Enable the position tracking mode for axes A, B, C, and D\n'                    NOTE: The BG command is not used to start the PT mode.\n#loop\n;\n'              Create label #LOOP in a program.  This small program will \n'                    update the absolute position at 100 Hz.  Note that the\n'                    user must update the variables v1, v2, v3 and v4 from the \n'                    host PC, or another thread operating on the controller.\n'\n \nPA\n \nv1\n,\nv2\n,\nv3\n,\nv4\n;\n'    Command ABCD axes to move to absolute positions.  Motion \n'                    begins when the command is processed.  BG is not used\n'                    to begin motion in this mode.  In this example, it is\n'                    assumed that the user is updating the variable at a \n'                    specified rate.  The controller will update the new\n'                    target position every 10 milliseconds (WT10).\n \nWT \n10\n;\n'             Wait 10 milliseconds\nJP \n#loop\n;\n'           Repeat by jumping back to label LOOP \nPT applies to DMC40x0,DMC42x0,DMC41x3,DMC21x3,DMC18x6,DMC18x2,DMC30010,DMC500x0,DMC52xx0\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "PV",
        "Usage": [
            {
                "Example": "PVm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            }
        ],
        "Operands": {
            "Operands": [
                "_PVm"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "The PV command is used to enter PVT data into the PVT buffer. Data is entered by specifying the target delta position, target velocity, and delta time for\nthe segment duration.",
        "Arguments": {
            "Argument": {
                "0": "m",
                "1": "n0",
                "2": "n1",
                "3": "n2"
            },
            "Min": {
                "0": "A",
                "1": "-\r44,000,000",
                "2": "-\r22,000,000",
                "3": "0"
            },
            "Max": {
                "0": "H",
                "1": "44,000,000",
                "2": "22,000,000",
                "3": "2,048"
            },
            "Default": {
                "0": "N/A",
                "1": "0",
                "2": "0",
                "3": "0"
            },
            "Resolution": {
                "0": "Axis",
                "1": "1",
                "2": "2",
                "3": "2"
            },
            "Description": {
                "0": "Axis to assign value",
                "1": "Position target for PVT\rsegment",
                "2": "Velocity target for PVT\rsegment",
                "3": "Number of samples for PVT\rsegment"
            },
            "Notes": {
                "0": "nan",
                "1": "nan",
                "2": "nan",
                "3": "n2 = -1 clears the PVT buffer, n2 = 0 exits PVT\rmode. See Remarks"
            }
        },
        "Remarks": "\nn\n2\n is in samples and sample time is defined by TM\nWith TM 1000 set, n\n2\n = 1024 is equal to 1 second\nIf t is omitted from the PVT command, the previous n\n2\n value is used\nFor more details on PVT mode of motion see the user manual.\nOperand Usage\n_PVm contains the number of spaces available in the PV buffer for the specified axis. Each axis has a 255 segment PVT buffer",
        "Examples": "\n'Galil DMC Code Example\nPV\nA\nA\n=\n=\n \n100\n,\n2000\n,\n256\n;\n'   Move 100 counts over 256 samples, end at 2000 cnts per sec\nPV\nA\nA\n=\n=\n \n500\n,\n1000\n,\n128\n;\n'   Move 500 counts over 128 samples, end at 1000 cnts per sec\nPV\nA\nA\n=\n=\n \n1000\n,\n2500\n;\n'      Move 1000 counts over 128 samples, end at 2500 cnts per sec\nPV\nA\nA\n=\n=\n \n0\n,\n0\n,\n0\n;\n'          End PVT mode \nDesired X/Y Trajectory\nX Position\n(relative/absolute)\nX Speed at end of\ntime period (c/s)\nTime (ms at TM1000)\n(relative/time from start)\nY Position\n(relative/absolute)\nY Speed at end of\ntime period (c/s)\nTime (ms at TM1000)\n(relative/time from\nstart)\n0/0\n0\n0/0\n0/0\n0\n0/0\n100/100\n200\n256/256\n-50/-50\n500\n100/100\n200/300\n200\n50/306\n-100/-150\n-100\n510/610\n300/600\n0\n50/356\n300/150\n0\n50/660\n'Galil DMC Code Example\nDP \n0\n,\n0\n;\n'              Define zero position\nPV\nA\nA\n= \n= \n100\n,\n200\n,\n256\n;\n'    Command X axis to move 100 counts reaching an ending speed of 200c/s in 256 samples\nPV\nB\nB\n= \n= \n-\n50\n,\n500\n,\n100\n;\n'    Command Y axis to move -50 counts reaching an ending speed of 500c/s in 100 samples\nPV\nB\nB\n= \n= \n-\n100\n,\n-\n100\n,\n510\n;\n'  Command Y axis to move -100 counts reaching an ending speed of -100c/s in 510 samples\nPV\nA\nA\n= \n= \n200\n,\n200\n,\n50\n;\n'     Command X axis to move 200 counts reaching an ending speed of 200c/s in 50 samples\nPV\nA\nA\n= \n= \n300\n,\n0\n,\n50\n;\n'       Command X axis to move 300 counts reaching an ending speed of 0c/s in 50 samples\nPV\nB\nB\n= \n= \n300\n,\n0\n,\n50\n;\n'       Command Y axis to move 300 counts reaching an ending speed of 0c/s in 50 samples\nPV\nB\nB\n= \n= \n,\n,\n0\n;\n'            Exit PVT mode on Y axis\nPV\nA\nA\n= \n= \n,\n,\n0\n;\n'            Exit PVT mode on X axis\n'                    When the PVT mode is exited, the axis will be in the \"SH\" state\n'                     (assuming position error is not exceeded, etc)\nBT \nAB\nAB\n;\n'               Begin PVT on X and Y axis\nAM \nAB\nAB\n;\n'               Trip point will block until PVT motion on X AND Y is complete\nEN\n;\n'                 End program \nPV applies to DMC40x0,DMC42x0,DMC41x3,DMC30010,DMC500x0,DMC52xx0\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "PW",
        "Usage": [
            {
                "Example": "PW n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {},
        "Description": "The PW command sets the password used to lock the controller. Locking the controller prevents interrogation of the controller program space.",
        "Arguments": {
            "Argument": {
                "0": "str"
            },
            "Min": {
                "0": "0 chars"
            },
            "Max": {
                "0": "8 chars"
            },
            "Default": {
                "0": "\"\""
            },
            "Resolution": {
                "0": "String"
            },
            "Description": {
                "0": "String to be used for\rpassword"
            },
            "Notes": {
                "0": "Both parameters must match for the PW command\rto succeed."
            }
        },
        "Remarks": "\nThe password can only be changed when the controller is in the unlocked state. See the ^L^K for more details.\nThe password is burnable but cannot be interrogated. If you forget the password and the controller is locked you must master reset the controller to\ngain access.\nQuotes are not used to frame the password string. If quotes are used, they are part of the password.",
        "Examples": "\n'Galil DMC Code Example\n:\nPW \napple\n,\norange\n?\n:\nTC \n1\n138 Passwords not identical\n:\nPW \napple\n,\napple\n:\n^L^K\n \napple\n,\n1\n'Galil DMC Code Example\n:\nPW \ntest\n,\ntest\n;\n'            Set password to \"test\"\n:\n^L^K\n \ntest\n,\n1\n;\n'            Lock the program\n:\nED\n;\n'                     Attempt to edit program\n? \n:\nTC \n1\n106 Privilege violation \nPW applies to DMC40x0,DMC42x0,DMC41x3,RIO47xxx,DMC18x6,DMC30010,DMC500x0,DMC52xx0\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "QD",
        "Usage": [
            {
                "Example": "QD n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {},
        "Description": "The QD command transfers array data from the host computer to the controller. QD array[], start, end requires that the array name be specified along\nwith the index of the first element of the array and the index of the last element of the array.",
        "Arguments": [],
        "Remarks": "\nArray name must be a valid, dimensioned array name followed by empty [] brackets.\nThe array elements may be separated by a comma ( , ), a carriage return (\\r), or a carriage return and line feed (\\r\\n). Do not use spaces.\nThe downloaded array is terminated by a \\ character.\nQD is not supported in the Galiltools terminal\nIt is recommended to use the array download functions available through the GalilTools software and drivers rather than directly using the QD\ncommand.\nIssuing this command will pause the output of the Data Record until the command is completed.",
        "Examples": "\n'Galil DMC Code Example\n:\n'From a character-buffered terminal such as Telnet or Hyperterm\n:\nDM\n \narray\n[\n[\n3\n]\n]\n:\nQD\n \narray\n[\n[\n]\n]\n1,2,3\\:LA\narray[3]\n:\narray\n[\n[\n0\n]\n]\n= \n= \n?\n?\n \n1.0000\n:\narray\n[\n[\n1\n]\n]\n= \n= \n?\n?\n \n2.0000\n:\narray\n[\n[\n2\n]\n]\n= \n= \n?\n?\n \n3.0000\n:\nQD applies to DMC500x0,DMC52xx0,DMC40x0,DMC42x0,DMC41x3,DMC30010,DMC21x3,DMC18x6,DMC18x2,RIO47xxx\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "QH",
        "Usage": [
            {
                "Example": "QH mm",
                "Explanation": "Argument is an axis mask"
            }
        ],
        "Operands": {
            "Operands": [
                "_QHm"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "The QH command transmits the state of the Hall sensor inputs. The value is decimal and represented by a 3 bit value (see Remarks).",
        "Arguments": {
            "Argument": {
                "0": "mm"
            },
            "Min": {
                "0": "A"
            },
            "Max": {
                "0": "ABCDEFGH"
            },
            "Default": {
                "0": "ABCDEFGH"
            },
            "Resolution": {
                "0": "Multi-Axis Mask"
            },
            "Description": {
                "0": "Axes to return Hall status"
            },
            "Notes": {
                "0": "nan"
            }
        },
        "Remarks": "\nThe 3 bit value returned by QH is defined in the table below:\nBit\nStatus\n07\nUndefined (set to 0)\n06\nUndefined (set to 0)\n05\nUndefined (set to 0)\n04\nUndefined (set to 0)\n03\nUndefined (set to 0)\n02\nHall C State\n01\nHall B State\n00\nHall A State\nQH should return a value from 1 through 6 as valid Hall combinations. A value of 0 or 7 is invalid when using Hall sensors and will generate a Hall error\nwith OE set.\nThe valid sequence for Hall inputs is a greycode output (only one bit changes at a time):\n1,3,2,6,4,5 (or 5,4,6,2,3,1)\nTo disable Hall error checking, set the axis to brushed with a BR 1 command.\nWhen using an internal sine amplifier, the BA command must be issued before QH will report the Hall state status.\nOperand Usage\n_QHm Contains the state of the Hall sensor inputs for the specified axis",
        "Examples": "\n'Galil DMC Code Example\nQH \nA\nA\n;\n'       Query the A axis Hall state\nvar\n= \n= \n_QH\nB\nB\n;\n'  Set a variable var equal to the B axis Hall state \n'Galil DMC Code Example\n:\nQH \nA\nA\n;\n'   Query A axis Hall status\n7\n:\nTA \n1\n;\n'   Check for Hall errors in the amp\n1        \n:\n'A 1 indicates Hall error on axis A \nQH applies to DMC500x0,DMC40x0,DMC42x0,DMC41x3,DMC30010,DMC21x3\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "QP",
        "Usage": [
            {
                "Example": "QP",
                "Explanation": "Command takes no arguments"
            }
        ],
        "Operands": {},
        "Description": "Returns memory information for the controller.",
        "Arguments": [],
        "Remarks": "\nEach row of the QP response describes a parameter characteristic of the controller.\nThe data is provided in a comma separated list starting with a fixed ID string.\nQP is only valid on firmware Rev 1.2a and later.\nQP response row descriptions\nRow ID\nField 1\nField 2\nField 3\nField 4\nDescription of the row\n\"PR\"\ncharacters per line\nnumber of\nlines\nflash=1,\nram=0\nN/A\nDetermines the dimensions of the program and the runtime location\nof the program.\n\"VA\"\nnumber of array\nelements\nnumber of\narrays\nnumber of\nvariables\nnumber of\nlabels\nDetermines the dimensions of the variables and arrays.",
        "Examples": "\n'Galil DMC Code Example\n:\nQP\n;\n' only valid on firmware Rev 1.2a and later\nPR, 80, 4000, 0\nVA, 24000, 30, 510, 510\nQP applies to DMC500x0,DMC40x0,DMC42x0,DMC41x3,DMC30010,RIO47xxx,DMC18x6,DMC52xx0\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "QR",
        "Usage": [
            {
                "Example": "QR mm",
                "Explanation": "Argument is an axis mask"
            }
        ],
        "Operands": {},
        "Description": "The QR command causes the controller to return a record of information regarding controller status.\nThis status information includes 4 bytes of header information and specific blocks of information as specified by the command arguments. The details of\nthe status information is described in Chapter 4 of the user's manual.",
        "Arguments": {
            "Argument": {
                "0": "mm",
                "1": "Argument",
                "2": "mm",
                "3": "nan",
                "4": "nan",
                "5": "nan"
            },
            "Min": {
                "0": "A",
                "1": "Value",
                "2": "A-H",
                "3": "S",
                "4": "T",
                "5": "I"
            },
            "Max": {
                "0": "ABCDEFGHSTI",
                "1": "Description",
                "2": "Output axes A-H data record block",
                "3": "Output coordinated axis S data block",
                "4": "Output coordinated axis T data block",
                "5": "Output General IO data block"
            },
            "Default": {
                "0": "ABCDEFGHSTI",
                "1": "Notes",
                "2": "nan",
                "3": "nan",
                "4": "nan",
                "5": "nan"
            },
            "Resolution": {
                "0": "Multi-Axis\rMask",
                "1": "nan",
                "2": "nan",
                "3": "nan",
                "4": "nan",
                "5": "nan"
            },
            "Description": {
                "0": "Axes/Coordinated/IO data specified to\rdisplay in the data record",
                "1": "nan",
                "2": "nan",
                "3": "nan",
                "4": "nan",
                "5": "nan"
            },
            "Notes": {
                "0": "If no argument entered, mm =\r\"ABCDEFGHSTI\"",
                "1": "nan",
                "2": "nan",
                "3": "nan",
                "4": "nan",
                "5": "nan"
            }
        },
        "Remarks": "\nThe data returned by the QR command is in binary format and is unreadable in programs such as Galiltools.\nThe Galiltools API has specialized commands to parse the data record packet. See the Galiltools User Manual for more details.",
        "Examples": "\n'Galil DMC Code Example\nQR\n \nA\nA\n;\n'   Return the data record with A axis block only\nQR\n \nBI\nBI\n;\n'  Return the data record with B axis block and IO block\nQR\n \nST\nST\n;\n'  Return the data record with S and T coordinated axis blocks\nQR \n;\n'    Return the data record for all axes, including IO and S and T axis blocks \nQR applies to DMC40x0,DMC42x0,DMC41x3,DMC21x3,RIO47xxx,DMC18x6,DMC18x2,DMC30010,DMC500x0,DMC52xx0\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "QS",
        "Usage": [
            {
                "Example": "QS mm",
                "Explanation": "Argument is an axis mask"
            }
        ],
        "Operands": {
            "Operands": [
                "_QSm"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "The QS command reports the magnitude of error, in drive step counts, for axes in Stepper Position Maintenance mode. A step count is directly\nproportional to the micro-stepping resolution of the stepper drive.",
        "Arguments": {
            "Argument": {
                "0": "mm",
                "1": "m"
            },
            "Min": {
                "0": "A",
                "1": "A"
            },
            "Max": {
                "0": "ABCDEFGH",
                "1": "H"
            },
            "Default": {
                "0": "ABCDEFGH",
                "1": "N/A"
            },
            "Resolution": {
                "0": "Multi-Axis\rMask",
                "1": "Axis"
            },
            "Description": {
                "0": "Axes to query for step motor error\rmagnitude",
                "1": "Single Axis to query for error magnitude"
            },
            "Notes": {
                "0": "Default value used if mm is\rundefined.",
                "1": "nan"
            }
        },
        "Remarks": "\nThe result of QS is modularized so that result is never greater than 1/2 the revolution of the stepper motor.\nLargest possible QS result = 0.5*YA*YB\nIf present in embedded code, command execution will jump to #POSERR when QS is equal to 3 full motor steps (_YAm * 3)\nQSm=? will return the current error for axis m\nOperand Usage\n_QSm contains the error magnitude in drive step counts for the specified axis.",
        "Examples": "\n'Galil DMC Code Example\n'For an SDM-20620 microstepping drive, query the error of B axis:\n:\nQS \nB\nB\n \n253\n:\n' Above shows 253 step counts of error.\n:\n' The SDM-20620 resolution is 64 microsteps per full motor step\n:\n' nearly four full motor steps of error.\nQuery the value of all axes:\n:\nQS\n \n0,253,0,0,0,0,0,0\n:\n' Response shows all axes error values \nQS applies to DMC500x0,DMC40x0,DMC42x0,DMC41x3,DMC30010,DMC21x3,DMC18x6,DMC18x2\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "QU",
        "Usage": [
            {
                "Example": "QU n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {},
        "Description": "The QU command transfers array data from the controller to a host computer. The QU requires that the array name be specified along with the first\nelement of the array and last element of the array.",
        "Arguments": [],
        "Remarks": "\nArray name must be a valid, dimensioned array name followed by empty [] brackets.\nThe uploaded array will be followed by a <control>Z as an end of text marker.\nThe GalilTools array upload functions can be used to upload array data in .csv format.\nIssuing this command will pause the output of the Data Record until the command is completed.",
        "Examples": "\n'Galil DMC Code Example\nDM\n \ntest\n[\n[\n10\n]\n]\n;\n'     Dimension a 10 element sized array\nQU\n \ntest\n[\n[\n]\n]\n,\n0\n,\n1\n,\n1\n;\n' Upload first 2 elements\nQU\n \ntest\n[\n[\n]\n]\n,\n8\n,\n9\n,\n1\n;\n' Upload last 2 elements (size-2 and size-1 used for n1,n2)\nEN\n'Galil DMC Code Example\n:\nDM\n \narray\n[\n[\n5\n]\n]\n;\n'                            Dimension Array\n:\nQU\n \narray\n[\n[\n]\n]\n,\n0\n,\n4\n,\n1\n;\n'                       Upload Array\n0.0000, 0.0000, 0.0000, 0.0000, 0.0000\n:\narray\n[\n[\n0\n]\n]\n= \n= \n9\n;\n'                             Set value\n:\narray\n[\n[\n1\n]\n]\n= \n= \n1\n:\nQU\n \narray\n[\n[\n]\n]\n,\n0\n,\n4\n,\n1\n9.0000, 1.0000, 0.0000, 0.0000, 0.0000\n:\narray\n[\n[\n0\n]\n]\n= \n= \n?\n?\n;\n'                             Alternative method to return just one array value\n \n9.0000 \nQU applies to DMC500x0,DMC52xx0,DMC40x0,DMC42x0,DMC41x3,DMC30010,DMC21x3,DMC18x6,DMC18x2,RIO47xxx\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "QZ",
        "Usage": [
            {
                "Example": "QZ",
                "Explanation": "Command takes no arguments"
            }
        ],
        "Operands": {},
        "Description": "The QZ command is an interrogation command that returns information regarding the data record. The controller's response to this command will be the\nreturn of 4 integers separated by commas.",
        "Arguments": [],
        "Remarks": "\nThe four fields returned by QZ represent the following:\n1\n. \nFirst field returns the number of axes.\n2\n. \nSecond field returns the number of bytes to be transferred for general status\n3\n. \nThird field returns the number of bytes to be transferred for coordinated move status\n4\n. \nFourth field returns the number of bytes to be transferred for axis specific information",
        "Examples": "\n'Galil DMC Code Example\n:\nQZ\n;\n'             standard DMC-4143 example response\n \n4, 52, 26, 36 \nQZ applies to DMC500x0,DMC52xx0,DMC40x0,DMC42x0,DMC41x3,DMC30010,DMC21x3,DMC18x6,DMC18x2,RIO47xxx\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "RA",
        "Usage": [
            {
                "Example": "RA n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {},
        "Description": "The RA command selects the user arrays to be populated by the Record Array function. The data to be captured is specified by the RD command and\ntime interval by the RC command.",
        "Arguments": {
            "'Galil DMC Code Example\r'  try to start record array without defining array[]\r:RA array[]\r?\r:TC 1\r82 Undefined array\r:DM array[100]\r:RA array[]": {}
        },
        "Remarks": "\nThe array name str must be followed by the [] brackets. Those brackets must be empty.\nThe array name str must be a valid array defined by the DM command and reported by LA.",
        "Examples": "\n'Galil DMC Code Example\n'  try to start record array without defining array[]\n:\nRA\n \narray\n[\n[\n]\n]\n?\n:\nTC \n1\n82 Undefined array\n:\nDM\n \narray\n[\n[\n100\n]\n]\n:\nRA\n \narray\n[\n[\n]\n]\n'Galil DMC Code Example\n#record\n;\n'     Label\nDM\n \npos\n[\n[\n100\n]\n]\n;\n' Define array\nRA\n \npos\n[\n[\n]\n]\n;\n'    Specify Record Mode\nRD\n \n_TP\nA\nA\n;\n'     Specify data type for record\nRC\n \n1\n;\n'        Begin recording at 2 msec intervals\nPR\n \n1000\n;\nBG \n;\n'  Start motion\nEN\n;\n'          End\n'The record array mode is useful for recording the real-time motor position during motion.  \n'The data is automatically captured in the background and does not interrupt the program sequencer.  \n'The record mode can also be used for a teach or learn of a motion path.  \n'The GalilTools Realtime scope can often be used as an alternative to record array. \nRA applies to DMC500x0,DMC52xx0,DMC40x0,DMC42x0,DMC41x3,DMC30010,DMC21x3,DMC18x6,DMC18x2,RIO47xxx\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "RC",
        "Usage": [
            {
                "Example": "RC n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_RC"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "The RC command begins recording for the Automatic Record Array Mode. RC 0 stops recording. The record array mode loads source data specified by\nthe RD command into the arrays defined by the RA command. The address for the array element for the next recording can be interrogated with _RD.",
        "Arguments": {
            "Argument": {
                "0": "n0",
                "1": "n1"
            },
            "Min": {
                "0": "0",
                "1": "see Notes"
            },
            "Max": {
                "0": "8",
                "1": "see Notes"
            },
            "Default": {
                "0": "0",
                "1": "0"
            },
            "Resolution": {
                "0": "1",
                "1": "1"
            },
            "Description": {
                "0": "Specify the record array time interval\ras 2^n samples.",
                "1": "Specify the number of records to\rperform"
            },
            "Notes": {
                "0": "n0 = 0 stops recording.",
                "1": "n1 has special rules for the maximum\rsetting. See Remarks."
            }
        },
        "Remarks": "\nFirmware Note: Do not allocate or deallocate arrays (DM,DA) while the Automatic Record Array Mode is running.\nGalilTools Note: Do not download arrays from GalilTools, or call the arrayDownload() or arrayDownloadFile() functions while automatic record array\nmode is running.\nn\n0\n = non zero number automatically starts record mode.\nn\n0\n = ? returns status of recording. '1' if recording, '0' if not recording.\nSecond Parameter Rules\nn\n1\n specifies the last array element to use for record mode.\nIf arrays specified by RA have different sizes, the smallest array size is the maximum value for n\n1\nIf n\n1\n = 0 or not specified, the maximum value is used.\nA negative value for n\n1\n specifies circular (continuous) record over array addresses 0 to (n\n1\n-1).\nThe absolute value of the minimum n\n1\n allowed = maximum n\n1\n allowed\nOperand Usage\n_RC contains status of recording. '1' if recording, '0' if not recording.\nSetting up the record array mode\n1\n. \nDimension an array/arrays for storing data. Make sure you dimension the array with the number of elements required to capture data for your\napplication.\n2\n. \nSet the RA command with the arrays to be used for recording\n3\n. \nSet the RD command with the data sources to be applied to the arrays. The order of your arrays entered into RA will match the order of data sources\nset by RD\n4\n. \nSet the RC command to get the desired time between records and enable the recording.\n5\n. \nMonitor the _RC operand for a 0 to indicate recording is done.\n6\n. \nView the data in your embedded code, or extract the data using Galiltools software and the Upload array function.",
        "Examples": "\n'Galil DMC Code Example\n#record\n;\n'             Record label\nDM\n \ntorque\n[\n[\n1000\n]\n]\n;\n'     Define Array\nRA\n \ntorque\n[\n[\n]\n]\n;\n'         Specify Array to record data\nRD\n \n_TT\nA\nA\n;\n'             Specify Data Type\nRC\n \n2\n;\n'                Begin recording and set 4 msec between records\nJG\n \n1000\n;\nBG \n;\n'          Begin motion\n#a\n;\nJP\n \n#a\n,\n_RC\n=\n1\n;\n'      Loop until done\nMG\n \n\"DONE RECORDING\"\n;\n' Print message\nEN\n;\n'                  End program \nRC applies to DMC500x0,DMC52xx0,DMC40x0,DMC42x0,DMC41x3,DMC30010,DMC21x3,DMC18x6,DMC18x2,RIO47xxx\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "RD",
        "Usage": [
            {
                "Example": "variable= RD",
                "Explanation": "Holds a value"
            }
        ],
        "Operands": {
            "Operands": [
                "_RD"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "The RD command specifies the data type to be captured for the Record Array (RA) mode. The data defined in this command is stored in arrays defined\nby the RA command at the time interval specified with the RC command.",
        "Arguments": {
            "Argument": {
                "0": "arg",
                "1": "nan",
                "2": "nan",
                "3": "nan",
                "4": "nan"
            },
            "Value": {
                "0": "TIME",
                "1": "_AFm",
                "2": "_DEm",
                "3": "_TPm",
                "4": "_TEm"
            },
            "Description": {
                "0": "Time in\rservo\rsamples",
                "1": "Analog input\rdigital value",
                "2": "Auxiliary\rencoder\rposition",
                "3": "Encoder\rposition",
                "4": "Position\rerror"
            },
            "Notes": {
                "0": "Value as read by the TIME command",
                "1": "Data range is -32768 to 32767. The analog inputs are limited to those which correspond to an axis on the\rcontroller. Syntax Note: Unlike the operand _AFm, the symbol _AFm in the context of RD records the ADC\rvalue, not the AF setting.",
                "2": "_DEm and _TDm capture the same data",
                "3": "nan",
                "4": "nan"
            }
        },
        "Remarks": "\nArguments listed as _XXm are valid when m is a valid axis mask\nThe order of args specified in RD corresponds with the array order specified in the RA command.\nthe operand \n_RD\n contains the address for the next array element for recording.\nWhen recording _AFm, the returned value is signed. This means that when AQ is used to set unipolar inputs, values on the upper half of the voltage\nrange are sign extended. Anding the value with $0000FFFF will return the expected unsigned value.",
        "Examples": "\n'Galil DMC Code Example\nDM\n \nerrora\n[\n[\n50\n]\n]\n,\nerrorb\n[\n[\n50\n]\n]\n;\n'      Define arrays\nRA\n \nerrora\n[\n[\n]\n]\n,\nerrorb\n[\n[\n]\n]\n;\n'          Specify arrays to be recorded\nRD\n \n_TE\nA\nA\n,\n_TE\nB\nB\n;\n'                  Specify data source\nRC\n \n1\n;\n'                          Begin recording, period is once every other servo sample\nJG\n \n1000\n;\nBG \n;\n'                    Begin motion\n'The GalilTools Realtime scope can often be used as an alternative to record array. \nRD applies to DMC500x0,DMC52xx0,DMC40x0,DMC42x0,DMC41x3,DMC30010,DMC21x3,DMC18x6,DMC18x2,RIO47xxx\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "RE",
        "Usage": [
            {
                "Example": "RE n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {},
        "Description": "The RE command is used to end subroutines in application code. An RE at the end of these routines causes a return to the main program. Specific\nautomatic error subroutines require the use of the RE command to end the code correctly.",
        "Arguments": {
            "Automatic Subroutines Used": {
                "0": "#AMPERR",
                "1": "#LIMSWI",
                "2": "#POSERR",
                "3": "#SERERR",
                "4": "#TCPERR"
            },
            "Notes": {
                "0": "Only when using internal amps",
                "1": "nan",
                "2": "nan",
                "3": "Only when equipped with serial encoder firmware support",
                "4": "nan"
            }
        },
        "Remarks": "\nThe RE command is used to end the following error automatic subroutines.\nAutomatic Subroutines Used\nNotes\n#AMPERR\nOnly when using internal amps\n#LIMSWI\n#POSERR\n#SERERR\nOnly when equipped with serial encoder firmware support\n#TCPERR\nCare should be taken to ensure the error conditions are cleared when finishing the subroutine to avoid immediate re-entering of the error routine.\nTo avoid returning to the main program on an interrupt, use the ZS command to zero the subroutine stack, then use JP to return to the desired\nlocation in code.\nRE 1 restores the trippoint that was interrupted by an automatic subroutine (like WT)\nA motion trippoint like MF or MR requires the axis to be actively profiling in order to be restored with the RE 1 command.",
        "Examples": "\n'Galil DMC Code Example\nREM dummy loop\n#a\nJP\n \n#a\nEN\n#POSERR\n#POSERR\n;\n'       Begin Error Handling Subroutine\nMG\n \n\"ERROR\"\n;\n'    Print message\nSB \n1\n;\n'           Set output bit 1\nRE\n;\n'            Return to main program and clear trippoint \nRE applies to DMC500x0,DMC52xx0,DMC40x0,DMC42x0,DMC41x3,DMC30010,DMC21x3,DMC18x6,DMC18x2,RIO47xxx\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "REM",
        "Usage": [],
        "Operands": {},
        "Description": "REM is used for comment lines. The REM statement is NOT a controller command. Rather, it is recognized by Galil PC software, which strips away the REM\nlines before downloading the DMC file to the controller.",
        "Arguments": {
            "Argument": {
                "0": "str"
            },
            "Value": {
                "0": "String"
            },
            "Description": {
                "0": "Comment to be removed from code prior to\rdownload"
            },
            "Notes": {
                "0": "This comment is not limited by the character limit of the controller, as it is\rnever downloaded"
            }
        },
        "Remarks": "\nREM differs from NO (or ') in the following ways:\nNO (or ') comments are downloaded to the controller and REM comments are not.\nNO (or ') comments take up execution time and REM comments don't; therefore, REM should be used for code that needs to run fast.\nREM comments cannot be recovered when uploading a program but NO (or ') comments are recovered. Thus the uploaded program is less\nreadable with REM.\nNO (or ') comments take up program line space and REM lines do not.\nREM comments must be the first and only thing on a line, whereas NO (or ') can be used to place comments to the right of code (after a\nsemicolon) on the same line\nSpecial Strings\nREM DISABLE COMPRESSION\nInserting this line into the beginning of your application code disables Galiltools download compression utility. This is not a controller function.",
        "Examples": "\n'Galil DMC Code Example\nREM This comment will be stripped when downloaded to the controller\n'This comment will be downloaded and takes some execution time\nPR\nA\nA\n= \n= \n1000\n \n;\n'this comment is to the right of the code \nREM applies to DMC500x0,DMC52xx0,DMC40x0,DMC42x0,DMC41x3,DMC30010,DMC21x3,DMC18x6,DMC18x2,RIO47xxx\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "RI",
        "Usage": [
            {
                "Example": "RI n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {},
        "Description": "The RI command is used to end the input interrupt subroutine.\nThe input interrupt subroutine begins with the label #ININT. An RI at the end of this routine causes a return to the main program.",
        "Arguments": [],
        "Remarks": "\nTo avoid returning to the main program on an interrupt, use the command ZS to zero the subroutine stack. This turns the jump subroutine into a\njump only. \nRefer to Application Note 2418.\nhttp://www.galil.com/learn/application-notes\nIf the program sequencer was interrupted while waiting for a trippoint, such as WT, RI 1 restores the trippoint on the return to the program. RI 0\nclears the trippoint.\nA motion trippoint like MF or MR requires the axis to be actively profiling in order to be restored with the RI1 command.\nThe RI command re-enables input interrupts.",
        "Examples": "\n'Galil DMC Code Example\n#a\n;\nII \n1\n;\nJP\n \n#a\n;\nEN\n;\n' Program label\n#ININT\n#ININT\n;\n' Begin interrupt subroutine\nMG\n \n\"INPUT INTERRUPT\"\n;\n' Print Message\nSB\n \n1\n;\n' Set output line 1\nRI\n \n1\n;\n' Return to the main program and restore trippoint \nRI applies to DMC500x0,DMC52xx0,DMC40x0,DMC42x0,DMC41x3,DMC30010,DMC21x3,DMC18x6,DMC18x2,RIO47xxx\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "RL",
        "Usage": [
            {
                "Example": "RL mm",
                "Explanation": "Argument is an axis mask"
            }
        ],
        "Operands": {
            "Operands": [
                "_RLm"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "The RL command will return the last position captured by the latch. The latch must first be armed by the AL command and then the appropriate input\nmust be activated. Each axis uses a specific general input for the latch input; see the AL command for information on latch inputs.",
        "Arguments": {
            "Argument": {
                "0": "mm"
            },
            "Min": {
                "0": "A"
            },
            "Max": {
                "0": "ABCDEFGH"
            },
            "Default": {
                "0": "ABCDEFGH"
            },
            "Resolution": {
                "0": "Multi-Axis Mask"
            },
            "Description": {
                "0": "Axes to query for latched position"
            },
            "Notes": {
                "0": "nan"
            }
        },
        "Remarks": "\nThe armed state of the latch can be configured using the CN command.\nThe Latch Function works with the main or auxiliary encoder.\nSee the DMC-40x0 user manual for a description of RL with sinusoidal encoders (-SIN firmware).\nCapturing Stepper Position using the Latch\nWhen working with a stepper motor without an encoder, the latch can be used to capture the stepper position. Follow the steps below to achieve\nthis.\n1\n. \nPlace a wire from the controller Step (PWM) output into the main encoder input, channel A+.\n2\n. \nConnect the Direction (sign) output into the channel B+ input.\n3\n. \nConfigure the main encoder for Step/Direction using the CE command.\n4\n. \nThe latch will now capture the stepper position based on the pulses generated by the controller.\nOperand Usage\n_RLm contains the latched position of the specified axis.",
        "Examples": "\n'Galil DMC Code Example\n:\nJG\n \n,\n5000\n;\n' Set up to jog the B-axis\n:\nBG\n \nB\nB\n;\n'    Begin jog\n:\nAL\n \nB\nB\n;\n'    Arm the B latch, assume that after about 2 seconds, input goes low\n:\nRL\n \nB\nB\n;\n'    Report the latch\n10000 \nRL applies to DMC40x0,DMC42x0,DMC41x3,DMC21x3,DMC18x6,DMC18x2,DMC30010,DMC500x0,DMC52xx0\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "RP",
        "Usage": [
            {
                "Example": "RP mm",
                "Explanation": "Argument is an axis mask"
            }
        ],
        "Operands": {
            "Operands": [
                "_RPm"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "The RP command returns the commanded reference position of the motor(s). RP command is useful when operating step motors since it provides the\ncommanded position in steps when operating in stepper mode.",
        "Arguments": {
            "Argument": {
                "0": "mm",
                "1": "nan"
            },
            "Min": {
                "0": "A",
                "1": "M"
            },
            "Max": {
                "0": "ABCDEFGH",
                "1": "N"
            },
            "Default": {
                "0": "ABCDEFGH",
                "1": "N/A"
            },
            "Resolution": {
                "0": "Multi-Axis Mask",
                "1": "Multi-Axis Mask"
            },
            "Description": {
                "0": "Axes to report commanded position",
                "1": "Virtual axes to report commanded position"
            },
            "Notes": {
                "0": "nan",
                "1": "nan"
            }
        },
        "Remarks": "\nThe relationship between RP, TP and TE: TEA equals the difference between the reference position, RPA, and the actual position, TPA.\nTE = RP - TP\n_RPm contains the commanded reference position for the specified axis.",
        "Examples": "\n'Galil DMC Code Example\n'Assume that A axis is commanded to be at the position 200\n'The returned units are in quadrature counts.\n:\nPF\n \n7\n;\n' Position format of 7\n:\nRP\n200 \n:\nRP \nA\nA\n200 Return the A motor reference position\n:\nPF \n-\n6.0\n;\n' Change to hex format\n:\nRP\n$0000C8\n:\nposition\n \n= \n= \n_RP\nA\nA\n;\n' Assign the variable, position, the value of RPA \n'Galil DMC Code Example\n'Assume that ABC and D axes are commanded to be at the positions 200, -10, 0, -110 \n'respectively.  The returned units are in quadrature counts.\n:\nPF\n \n7\n;\n' Position format of 7\n:\nRP \n;\n'   Return A,B,C,D reference positions\n200,-10,0,-110\n:\nRP \nA\nA\n200 Return the A motor reference position\n:\nRP \nB\nB\n-10 Return the B motor reference position\n:\nPF \n-\n6.0\n;\n' Change to hex format\n:\nRP\n$0000C8,$FFFFF6,$000000,$FFFF93 Return A,B,C,D in hex \n:\nposition\n \n= \n= \n_RP\nA\nA\n;\n' Assign the variable, position, the value of RPA \n'Galil DMC Code Example\n:\nGA \nN\nN\n;\n'     make A axis slave to N imaginary axis\n:\nGR \n-\n1\n;\n'    1:-1 gearing\n:\nSP\nN\nN\n= \n= \n10000\n:\nPR\nN\nN\n= \n= \n10000\n:\nBG \nN\nN\n;\n'     Begin motion\n:\nRP \nN\nN\n;\n'     Get master position\n \n10000\n:\nRP \nA\nA\n;\n'     Get slave commanded position\n-10000 \nRP applies to DMC40x0,DMC42x0,DMC41x3,DMC21x3,DMC18x6,DMC18x2,DMC30010,DMC500x0,DMC52xx0\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "RS",
        "Usage": [
            {
                "Example": "RS n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_RS"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "The RS command resets the state of the processor to its power-on condition. The previously saved state of the hardware, along with parameter values\nand saved program, are restored.",
        "Arguments": {
            "Argument": {
                "0": "n"
            },
            "Min": {
                "0": "-1"
            },
            "Max": {
                "0": "0"
            },
            "Default": {
                "0": "0"
            },
            "Resolution": {
                "0": "1"
            },
            "Description": {
                "0": "Set behavior of RS\rcommand"
            },
            "Notes": {
                "0": "n = 0 peforms normal reset. n = -1 performs soft master\rreset. See Remarks."
            }
        },
        "Remarks": "\nA soft master reset performed by issuing RS -1 restores factory default settings without erasing the EEPROM. To restore saved EEPROM settings use\nRS with no arguments, or RS 0.\nOperand Usage\n_RS returns the state of the processor on its last power-up condition. The value returned is the decimal equivalent of the 4 bit binary value shown\nbelow.\nBit 3 For master reset error\nBit 2 For program checksum error\nBit 1 For parameter checksum error\nBit 0 For variable checksum error\nAt startup the controller operating system verifies the firmware sector. If there is a checksum error shown by _RS in firmware, it is not loaded and the\ncontroller will boot to monitor mode.\nThe #AUTOERR automatic subroutine will run if this error occurs and the subroutine is located in the program space.",
        "Examples": "\n'Galil DMC Code Example\n:\nRS\n;\n'     Reset the hardware\n:\nRS \n-\n1\n;\n'   Perform a soft master reset\n:\nRS applies to DMC500x0,DMC40x0,DMC42x0,DMC41x3,DMC30010,DMC21x3,RIO47xxx,DMC18x6,DMC18x2,RIO574x0,DMC52xx0\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "SA",
        "Usage": [
            {
                "Example": "SAm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            }
        ],
        "Operands": {},
        "Description": "SA sends a command, and optionally receives a response, from one controller to another via Ethernet.",
        "Arguments": {
            "Argument": {
                "0": "m",
                "1": "str",
                "2": "n"
            },
            "Min": {
                "0": "A",
                "1": "1 char",
                "2": "-2,147,483,648"
            },
            "Max": {
                "0": "H",
                "1": "74 chars",
                "2": "2,147,483,647"
            },
            "Default": {
                "0": "N/A",
                "1": "\"\"",
                "2": "0"
            },
            "Resolution": {
                "0": "Handle",
                "1": "String",
                "2": "1"
            },
            "Description": {
                "0": "Handle to specify for message output",
                "1": "String to send over handle",
                "2": "Value to send for the specified parameter"
            },
            "Notes": {
                "0": "nan",
                "1": "nan",
                "2": "nan"
            }
        },
        "Remarks": "\nStrings are encapsulated by quotations. This will typically begin an SA command.\nn is a number, controller operand, variable, mathematical function, or string. The range for numeric values is 4 bytes of integer followed by two bytes\nof fraction.\nTypical usage would have the first argument as a string such as \"KI\" and the subsequent arguments as the arguments to the command:\nExample SAF=\"KI\", 1, 2 would send the command: KI1,2\nSA automatically adds commas between two number values being sent.\nThere is a 78 character maximum payload length for the SA command.\nOperational Notes\n1\n. \nSA is non-blocking. A wait (e.g. WT10) must occur between successive calls to SA.\n2\n. \nSA is not valid over a handle configured for Modbus (port 502).\n3\n. \nWhen writing multi-threaded DMC code, send all traffic from only one thread.\n4\n. \nSA command functionality is provided to assist with controller to controller communications under error handling conditions. \nRecommended\ncommands for use with SA include, but are not limited to: HX, XQ, ST, and AB. \nPlease contact a Galil Applications Engineer for additional details.",
        "Examples": "\n'Galil DMC Code Example\n#a\nIH\nA\nA\n= \n= \n10\n,\n0\n,\n0\n,\n12\n;\n'     Configures handle A to be connected to a controller with IP 10.0.0.12\n#b\n;\nJP \n#b\n,\n_IH\nA\nA\n2\n<>\n-\n2\n;\n' Wait for connection\nSA\nA\nA\n= \n= \n\"KI\"\n,\n \n1\n,\n \n2\n;\n'    Sends the command to handle A (slave controller):  KI 1,2\nWT \n10\nEN\n;\n'                End Program \nSA applies to DMC40x0,DMC42x0,DMC41x3,DMC21x3,RIO47xxx,DMC30010,DMC500x0,DMC52xx0\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "SB",
        "Usage": [
            {
                "Example": "SB n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {},
        "Description": "The SB command sets a particular digital output. The SB and CB (Clear Bit) instructions can be used to control the state of output lines.",
        "Arguments": {
            "Argument": {
                "0": "n",
                "1": "n",
                "2": "n"
            },
            "Min": {
                "0": "1",
                "1": "17",
                "2": "1,000"
            },
            "Max": {
                "0": "16",
                "1": "48",
                "2": "8,999"
            },
            "Default": {
                "0": "N/A",
                "1": "N/A",
                "2": "N/A"
            },
            "Resolution": {
                "0": "1",
                "1": "1",
                "2": "1"
            },
            "Description": {
                "0": "General output bit to be set",
                "1": "Extended I/O output bit to be\rset",
                "2": "Set Modbus slave bit"
            },
            "Notes": {
                "0": "Max value is 8 for 1-4 axis controllers",
                "1": "I/O must be configured for outputs, see CO\rcommand",
                "2": "See \"SB via Modbus Slave\" in Remarks"
            }
        },
        "Remarks": "\nThe state of the output can be read with the @OUT[] command.\nUsing SB with a Modbus Slave\nn = (SlaveAddress*10000) + (HandleNum*1000) + ((Module-1)*4) + (Bitnum-1)\nSlave Address is used when the ModBus device has slave devices connected to it and specified as Addresses 0 to 255. Please note that the use\nof slave devices for modbus are very rare and this number will usually be 0.\nHandleNum is the handle specifier where A is 1, B is 2 and so on.\nModule is the position of the module in the rack from 1 to 16.\nBitNum is the I/O point in the module from 1 to 4",
        "Examples": "\n'Galil DMC Code Example\n#main\nSB\n \n5\n;\n'     Set digital output 5\nSB\n \n1\n;\n'     Set digital output 1\nCB\n \n5\n;\n'     Clear digital output 5\nCB\n \n1\n;\n'     Clear digital output 1\nEN\n'Galil DMC Code Example\n#modbus\nREM connect to modubs slave at IP address 192.168.1.50\nIH\nH\nH\n= \n= \n192\n,\n168\n,\n1\n,\n50\n<\n502\n>\n2\nWT \n100\nSB\n \n8001\n;\n'set bit 1 on modbus slave\nWT\n \n10\nCB\n \n8003\n;\n'set bit 3 on modbus slave\nEN\nFor detailed information on connecting to a Modbus slave, see:\nhttp://www.galil.com/news/dmc-programming-io-control/setting-rio-pocket-plc-or-generic-modbus-slave-extended-io\nSB applies to DMC500x0,DMC40x0,DMC42x0,DMC41x3,DMC30010,DMC21x3,RIO47xxx,DMC18x6,DMC18x2,RIO574x0,DMC52xx0\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "SC",
        "Usage": [
            {
                "Example": "SC mm",
                "Explanation": "Argument is an axis mask"
            }
        ],
        "Operands": {
            "Operands": [
                "_SCm"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "The Stop Code command returns a number indicating why a motor has stopped.",
        "Arguments": {
            "Argument": {
                "0": "mm"
            },
            "Min": {
                "0": "A"
            },
            "Max": {
                "0": "ABCDEFGH"
            },
            "Default": {
                "0": "N/A"
            },
            "Resolution": {
                "0": "Multi-Axis Mask"
            },
            "Description": {
                "0": "Axis to query stop code"
            },
            "Notes": {
                "0": "Omitting argument shows stop code for all axes"
            }
        },
        "Remarks": "\nWhen SC is issued, the controller reponds with a number for the axis queried. The number is interpreted as follows:\nStop Code Table\nStop Code Number\nMeaning\n0\nMotors are running, independent mode\n1\nMotors decelerating or stopped at commanded independent position\n2\nDecelerating or stopped by FWD limit switch or soft limit FL\n3\nDecelerating or stopped by REV limit switch or soft limit BL\n4\nDecelerating or stopped by Stop Command (ST)\n6\nStopped by Abort input\n7\nStopped by Abort command (AB)\n8\nDecelerating or stopped by Off on Error (OE1)\n9\nStopped after finding edge (FE)\n10\nStopped after homing (HM) or Find Index (FI)\n11\nStopped by selective abort input\n12\nDecelerating or stopped by encoder failure (OA1) (For controllers supporting OA/OV/OT)\n15\nAmplifier Fault (For controllers with internal drives)\n16\nStepper position maintenance error\n30\nRunning in PVT mode\n31\nPVT mode completed normally\n32\nPVT mode exited because buffer is empty\n50\nContour Running\n51\nContour Stopped\n60\nECAM Running\n61\nECAM Stopped\n70\nStopped due to \nEtherCAT communication failure\n71\nStopped due to EtherCAT drive fault\n99\nMC timeout\n100\nVector Sequence running\n101\nVector Sequence stopped\n_SCm contains the value of the stop code for the specified axis.",
        "Examples": "\n'Galil DMC Code Example\ntom\n \n= \n= \n_SC\nA\nA\n;\n'      Assign the Stop Code of A axis to variable tom \n'Galil DMC Code Example\n:\nJG \n10000\n:\nBG \nA\nA\n:\nSC \nA\nA\n \n0             //Axis is running in independent mode\n:\nST \nA\nA\n:\nSC \nA\nA\n \n4             //Axis is stopped by ST command\n:\nSC applies to DMC40x0,DMC42x0,DMC41x3,DMC21x3,DMC18x6,DMC18x2,DMC30010,DMC500x0,DMC52xx0\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "SD",
        "Usage": [
            {
                "Example": "SDm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "SD n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_SDm"
            ],
            "Explanation": "Operand holds the value last set by the command"
        },
        "Description": "The Limit Switch Deceleration command (SD) sets the linear deceleration rate of the motors when a limit switch has been reached.",
        "Arguments": {
            "Argument": {
                "0": "m",
                "1": "n"
            },
            "Min": {
                "0": "A",
                "1": "1,024"
            },
            "Max": {
                "0": "H",
                "1": "1,073,740,800"
            },
            "Default": {
                "0": "N/A",
                "1": "256,000"
            },
            "Resolution": {
                "0": "Axis",
                "1": "1,024"
            },
            "Description": {
                "0": "Axis to assign value",
                "1": "Value of switch deceleration"
            },
            "Notes": {
                "0": "nan",
                "1": "Resolution changes with TM, see Remarks"
            }
        },
        "Remarks": "\nThe resolution of the SD command is dependent upon the update rate setting (TM). With the default rate of TM 1000 the resolution is 1024\ncnts/second^2. The equation to calculate the resolution of the AC command is:\nResolution = 1024*(1000/TM)^2\nExample:\nWith TM 500 the minimum AC setting and resolution is 4096 cnts/second^2\nresolution = 1024*(1000/500)^2 = 4096\nThe SD command may be changed during the move in JG move, but not in PR or PA move.",
        "Examples": "\n'Galil DMC Code Example\n#main\nPR\n \n10000\n;\n' Specify position\nAC\n \n2000000\n;\n' Specify acceleration rate\nDC\n \n1000000\n;\n' Specify deceleration rate\nSD\n \n5000000\n;\n' Specify Limit Switch Deceleration Rate\nSP\n \n5000\n;\n' Specify slew speed\nEN\nSD applies to DMC40x0,DMC42x0,DMC41x3,DMC18x6,DMC30010,DMC500x0,DMC52xx0\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "SH",
        "Usage": [
            {
                "Example": "SH mm",
                "Explanation": "Argument is an axis mask"
            }
        ],
        "Operands": {},
        "Description": "The SH commands tells the controller to use the current motor position as the command position and to enable servo control at the current position.",
        "Arguments": {
            "Argument": {
                "0": "mm"
            },
            "Min": {
                "0": "A"
            },
            "Max": {
                "0": "ABCDEFGH"
            },
            "Default": {
                "0": "ABCDEFGH"
            },
            "Resolution": {
                "0": "Multi-Axis Mask"
            },
            "Description": {
                "0": "Axes to enable"
            },
            "Notes": {
                "0": "nan"
            }
        },
        "Remarks": "\nThe SH command changes the coordinate system.\nTherefore, all position commands given prior to SH, must be repeated. Otherwise, the controller produces incorrect motion.\nThis command can be useful when the position of a motor has been manually adjusted following a motor off (MO) command.",
        "Examples": "\n'Galil DMC Code Example\nSH \n;\n' Servo A,B,C,D motors\nSH \nA\nA\n;\n' Only servo the A motor, the B,C and D motors remain in its previous state.\nSH \nB\nB\n;\n' Servo the B motor, leave the A,C and D motors unchanged\nSH \nC\nC\n;\n' Servo the C motor, leave the A,B and D motors unchanged\nSH \nD\nD\n;\n' Servo the D motor, leave the A,B and C motors unchanged \n'Galil DMC Code Example\n'show how issuing SH clears position error\n'by resetting the coordinate system\n:\nMO \nA\nA\n;\n'  disable the A axis\n:\nTE \nA\nA\n;\n'  check error on A axis\n-12435\n:\nTP \nA\nA\n;\n'  Check position\n \n12435\n:\nSH \nA\nA\n;\n'  enable A axis, doing so clears the error\n:\nTE \nA\nA\n;\n'  check error again\n \n0\n:\nTP \nA\nA\n;\n'  confirm position hasn't changed\n \n12435 \nSH applies to DMC500x0,DMC40x0,DMC42x0,DMC41x3,DMC30010,DMC21x3,DMC18x6,DMC18x2,DMC52xx0\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "SI",
        "Usage": [
            {
                "Example": "SIm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            }
        ],
        "Operands": {
            "Operands": [
                "_SIm"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "The SI command enables and configures the controller to read SSI encoder data. Synchronous Serial Interface (SSI) allows for serial transmission of\nabsolute position data (either binary or Gray code) from the encoder based on a timed clock pulse train from the controller. Connection between the\ncontroller and encoder is based on two signal lines, clock and data, which are usually differential for increased noise immunity. For each sequential clock\npulse of the controller, the encoder transmits one data bit from shift registers on the encoder.\nSSI Timing\nDuring the controller's control loop, a clock will be transmitted for encoders configured for SSI. \nThe SSI encoder responds by transmitting a serial data\nstream synchronized to the controller's clock. \nThe data stream has 2 important features as described below.\n1\n. \nData.\n \nShown in the above timing diagrams, \nData\n contains the absolute position of the SSI encoder. \nData\n is used for the n\n2\n argument of the SI\ncommand\n2\n. \nStatus\n \n(if applicable)\n. \nShown above in the latter two timing diagrams, \nStatus\n is used for the n\n3\n argument of the SI command. \nThe meaning of the\nStatus\n and the is defined by the encoder manufacturer. \nThe controller provides access to this value via the _SIm operand.\nThe sign of argument n\n3\n selects if the \nStatus\n are at the beginning of the SSI data or at the end. \nThis is shown in the above timing diagrams and\nis based on the encoder's manufacturer.",
        "Arguments": [],
        "Remarks": "",
        "Examples": ""
    },
    {
        "Command": "option.",
        "Usage": [],
        "Operands": {
            "Operands": [
                "_SIm returns",
                "the value of the SSI encoder's status bits, as defined in n",
                "3",
                ". The returned decimal number represents an 8 bit",
                "binary value. The meaning",
                "of the status bits is defined by the encoder manufacturer.",
                "Examples",
                "'Galil DMC Code Example",
                "SI",
                "A",
                "A",
                "=",
                "=",
                "",
                "1",
                ",",
                "25",
                ",",
                "25",
                ",",
                "0",
                "<",
                "4",
                ">",
                "1",
                ";",
                "' Encoder on axis A replaces main encoder (TP), 25 bits total, all single turn, no status",
                "'Galil DMC Code Example",
                "SI",
                "A",
                "A",
                "=",
                "=",
                "",
                "0",
                ";",
                "'           Disable SSI on axis A",
                "SI applies to SER",
                "\u00a92017 Galil Motion Control. Corrections, Feedback:",
                "documentation@galilmc.com",
                "Galil Motion Control",
                "SI"
            ],
            "Explanation": "273/328"
        },
        "Description": "",
        "Arguments": {
            "'Galil DMC Code Example\rSIA= 0;'           Disable SSI on axis A": {}
        },
        "Remarks": "",
        "Examples": "\n'Galil DMC Code Example\nSI\nA\nA\n=\n=\n \n1\n,\n25\n,\n25\n,\n0\n<\n4\n>\n1\n;\n' Encoder on axis A replaces main encoder (TP), 25 bits total, all single turn, no status \n'Galil DMC Code Example\nSI\nA\nA\n=\n=\n \n0\n;\n'           Disable SSI on axis A \nSI applies to SER\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "SL",
        "Usage": [
            {
                "Example": "SL n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {},
        "Description": "The SL command is used to single-step through a program for debugging purposes. SL can be used after execution has paused at a breakpoint (BK). The\nargument n allows user to specify the number of lines to execute before pausing again.",
        "Arguments": {
            "'Galil DMC Code Example\r:BK 3;' Pause at line 3 (the 4th line) in thread 0\r:BK 5;' Continue to line 5\r:SL;' Execute the next line\r:SL 3;' Execute the next 3 lines\r:BK;' Resume normal execution": {}
        },
        "Remarks": "\nThe BK command resumes normal program execution.",
        "Examples": "\n'Galil DMC Code Example\n:\nBK\n \n3\n;\n' Pause at line 3 (the 4th line) in thread 0\n:\nBK\n \n5\n;\n' Continue to line 5\n:\nSL\n;\n' Execute the next line\n:\nSL\n \n3\n;\n' Execute the next 3 lines\n:\nBK\n;\n' Resume normal execution \nSL applies to DMC500x0,DMC52xx0,DMC40x0,DMC42x0,DMC41x3,DMC30010,DMC21x3,DMC18x6,DMC18x2,RIO47xxx\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "SM",
        "Usage": [
            {
                "Example": "SM n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_SM0"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "The SM command assigns a subnet mask to the controller. All packets sent to the controller whose source IP address is not on the subnet will be ignored\nby the controller. For example, for SM 255,255,0,0 and IA 10,0,51,1, only packets from IP addresses of the form 10.0.xxx.xxx will be accepted.",
        "Arguments": {
            "Argument": {
                "0": "n0",
                "1": "n1",
                "2": "n2",
                "3": "n3",
                "4": "n"
            },
            "Min": {
                "0": "0",
                "1": "0",
                "2": "0",
                "3": "0",
                "4": "-\r2,147,483,648"
            },
            "Max": {
                "0": "255",
                "1": "255",
                "2": "255",
                "3": "255",
                "4": "2,147,483,647"
            },
            "Default": {
                "0": "0",
                "1": "0",
                "2": "0",
                "3": "0",
                "4": "0"
            },
            "Resolution": {
                "0": "1",
                "1": "1",
                "2": "1",
                "3": "1",
                "4": "1"
            },
            "Description": {
                "0": "Byte 3 of the Subnet mask",
                "1": "Byte 2 of the Subnet mask",
                "2": "Byte 1 of the Subnet mask",
                "3": "Byte 0 of the Subnet mask",
                "4": "The full subnet mask specified as a signed 32 bit two's\rcomplement integer"
            },
            "Notes": {
                "0": "nan",
                "1": "nan",
                "2": "nan",
                "3": "nan",
                "4": "nan"
            }
        },
        "Remarks": "\nn = ? will return the subnet mask of the controller as n\n0\n,n\n1\n,n\n2\n,n\n3\n_SM0 contains the subnet mask representing a 32 bit signed number (Two's complement)\nUse the following equation to change the 4 byte subnet (n\n0\n,n\n1\n,n\n2\n,n\n3\n) to a single 32 bit number, n\nn = (n\n0\n*2^24) + (n\n1\n*2^16) + (n\n2\n*2^8) + n\n3\nFor more information, see \nhttp://www.galil.com/news/dmc-programming-software/blocking-unwanted-ethernet-devices-connecting",
        "Examples": "\n'Galil DMC Code Example\nSM\n \n255\n,\n255\n,\n255\n,\n255\n;\n' Ignore all incoming Ethernet packets\nSM\n \n0\n,\n0\n,\n0\n,\n0\n;\n' Process all incoming Ethernet packets \nSM applies to DMC40x0,DMC42x0,DMC41x3,RIO47xxx,DMC30010,DMC500x0,DMC52xx0\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "SP",
        "Usage": [
            {
                "Example": "SPm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "SP n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_SPm"
            ],
            "Explanation": "Operand holds the value last set by the command"
        },
        "Description": "The SP command sets the slew speed of any or all axes for independent moves.",
        "Arguments": {
            "Argument": {
                "0": "m",
                "1": "nan",
                "2": "n",
                "3": "nan",
                "4": "nan"
            },
            "Min": {
                "0": "A",
                "1": "M",
                "2": "0",
                "3": "0",
                "4": "0"
            },
            "Max": {
                "0": "H",
                "1": "N",
                "2": "22,000,000",
                "3": "6,000,000",
                "4": "50,000,000"
            },
            "Default": {
                "0": "N/A",
                "1": "N/A",
                "2": "25,000",
                "3": "25,000",
                "4": "25,000"
            },
            "Resolution": {
                "0": "Axis",
                "1": "Axis",
                "2": "2",
                "3": "2",
                "4": "2"
            },
            "Description": {
                "0": "Axis to assign value",
                "1": "Virtual axis to assign\rvalue",
                "2": "Value of jog speed in\rcnts/second",
                "3": "Value of jog speed in\rcnts/second",
                "4": "Vale of jog speed in\rcnts/second"
            },
            "Notes": {
                "0": "nan",
                "1": "nan",
                "2": "For MT settings of 1,-1,1.5 and -1.5 (Servos) - See\rRemarks for Resolution details",
                "3": "For MT settings of 2,-2,2.5 and -2.5 (Steppers) - See\rRemarks for Resolution details",
                "4": "ICM-42100 with AF>=5 - See Remarks for Resolution\rdetails"
            }
        },
        "Remarks": " for Resolution details\n0\n6,000,000\n25,000\n2\nValue of jog speed in\ncnts/second\nFor MT settings of 2,-2,2.5 and -2.5 (Steppers) - See\nRemarks for Resolution details\n0\n50,000,000\n25,000\n2\nVale of jog speed in\ncnts/second\nICM-42100 with AF>=5 - See Remarks for Resolution\ndetails\nRemarks\nNegative values will be interpreted as the absolute value\nResolution\nThe resolution of the SP command is dependent upon the update rate setting (TM).\nWith the default rate of TM 1000 the resolution is 2 cnts/second.\nThe equation to calculate the resolution of the SP command is:\nresolution = 2*(1000/TM)\nexample:\nWith TM 250 the resolution of the SP command is 8 cnts/second\nresolution = 2*(1000/250) = 8",
        "Examples": "\n'Galil DMC Code Example\nPR\n \n2000\n,\n3000\n,\n4000\n,\n5000\n;\n'          Specify a,b,c,d parameter \nSP\n \n5000\n,\n6000\n,\n7000\n,\n8000\n;\n'   Specify a,b,c,d speeds \nBG \n;\n'                              Begin motion of all axes\nAM\n \nC\nC\n;\n'                            After C motion is complete\n'\n'\n'For vector moves, use the vector speed command (VS) to change the speed.\n'SP is not a \"mode\" of motion like JOG (JG).\n'Note:  2 is the minimum non-zero speed. \nSP applies to DMC40x0,DMC42x0,DMC41x3,DMC21x3,DMC18x6,DMC18x2,DMC30010,DMC500x0,DMC52xx0\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "SS",
        "Usage": [
            {
                "Example": "SSm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            }
        ],
        "Operands": {
            "Operands": [
                "_SSm"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "The SS command enables and configures the controller to read BiSS encoder data. BiSS is an open-source, digital interface for encoders. BiSS is hardware\ncompatible to the industrial standard SSI (Serial Synchronous Interface) but offers additional features and options.\nBiSS Timing\nDuring the controller's servo interrupt, a clock will be transmitted for encoders configured for BiSS. The BiSS encoder responds by transmitting a serial\ndata stream synchronized to the controllers's clock. The data stream has five important features as described below.\n1\n. \nData\n. Shown in the above timing diagram as the bit stream between \na\n and \nb\n, \nData\n contains the absolute position of the BiSS encoder. The length of\nthe \nData\n, in bits, is used for both the n\n1\n and n\n2\n arguments of the SS command.\n2\n. \nZero Padding\n. Some encoder manufacturers (Hengstler and possibly others) pad the encoder data with trailing zero bits in the \nData\n stream. This bit\nsegment is shown between \nc\n and \nd\n above. The number of zero padding bits is the n\n3\n argument of the SS command.\n3\n. \nError Bit\n. Shown above as \nE\n, BiSS defines an Error bit that is transmitted by the encoder. It can be active high or low, depending on the\nmanufacturer. The controller provides access to the Error bit via the _SSm operand.\n4\n. \nWarning Bit\n. Shown above as \nW\n, BiSS also defines a Warning bit that is transmitted by the encoder. It is also active high or low based on the\nencoder. \nThe controller provides access to the Warning bit via the _SSm operand.\n5\n. \nCRC\n. The \nData\n, \nE\n and \nW\n bits are all checked for validity via a 6-bit cyclic redundancy check, shown above as \nCRC\n. The controller provides access to\nthe CRC validity via the _SSm operand.",
        "Arguments": [],
        "Remarks": "",
        "Examples": ""
    },
    {
        "Command": "Required Hardware and Firmware",
        "Usage": [
            {
                "Example": "_SSm Returns 4 bits of axis status data where m is the axis.",
                "Explanation": "_SSm Bit Map"
            },
            {
                "Example": "Bit Position",
                "Explanation": "Bit Meaning"
            },
            {
                "Example": "Bit value = 0",
                "Explanation": "Bit value = 1"
            }
        ],
        "Operands": {},
        "Description": "",
        "Arguments": {
            "Unnamed: 0": {},
            "Unnamed: 1": {},
            "Unnamed: 2": {},
            "Unnamed: 3": {},
            "Unnamed: 4": {}
        },
        "Remarks": "",
        "Examples": "\n'Galil DMC Code Example\n'Setup Renishaw RESOLUTE 26-bit linear encoder\n'Renishaw encoders have active low error and warning bits\n'If the error bit is active or CRC fails \n'the encoder data should not be considered valid\n'Turn off output 1 and 3 if position data is not valid\n#start\nSY\nA\nA\n= \n= \n0\n;\n' Set Error bit = Active Low - Set Warning bit = Active Low\nSS\nA\nA\n= \n= \n1\n,\n27\n,\n27\n,\n0\n<\n4\n;\n' 26-bit linear encoder, add 1 bit for leading zero on Renishaw\nTP \n;\n'Get absolute position\n'... continue setup\nEN\n#SERERR\n#SERERR\n;\n' display error, shutdown axis if data is invalid\nMG\n \n\"SERERR \"\n,\n \n_SS\nA\nA\n{$4}\n;\n'Display hex value of SS bit mask\nMG\n \n\"TC: \"\n,\n \n_TC\n;\n'Display any TC error codes\nbisscode\n \n=\n=\n \n_SS\nA\nA\n;\n'Query SS bit mask\nIF\n \n(\n(\nbisscode\n \n&\n \n$1\n)\n)\n;\n'First bit in the mask is the Timout bit\n MG\n \n\"BiSS Timeout\"\n;\n 'Add timeout code here\n SS\nA\nA\n= \n= \n0\n;\n'Turn off BiSS encoder\nENDIF\nIF\n \n(\n(\nbisscode\n \n&\n \n$2\n)\n)\n;\n'Second bit in the mask is the CRC validity bit\n MG\n \n\"Invalid CRC\"\n 'Add CRC failure code here, make the system safe\n SS\nA\nA\n= \n= \n0\n;\n'Turn off BiSS\n CB\n \n1\n;\n'Turn off output 1\n CB\n \n3\n;\n'Turn off output 3\n AB\n;\n'Abort motion and program operation\nENDIF\nIF\n \n(\n(\nbisscode\n \n&\n \n$4\n)\n)\n;\n'Third bit in the mask is the error bit\n MG\n \n\"Error Bit Set\"\n;\n 'Add Error code here, make the system safe\n SS\nA\nA\n= \n= \n0\n;\n'Turn off BiSS\n CB\n \n1\n;\n'Turn off output 1\n CB\n \n3\n;\n'Turn off output 3\n AB\n;\n'Abort motion and program operation\nENDIF\nIF\n \n(\n(\nbisscode\n \n&\n \n$8\n)\n)\n;\n'Fourth bit in the mask is the warning bit\n MG\n \n\"Warning Bit Set\"\n;\n 'Add Warning code here, Notify and log but don't stop motion"
    },
    {
        "Command": "#logwarn",
        "Usage": [],
        "Operands": {},
        "Description": "",
        "Arguments": [],
        "Remarks": "",
        "Examples": ""
    },
    {
        "Command": "ST",
        "Usage": [
            {
                "Example": "ST mm",
                "Explanation": "Argument is an axis mask"
            }
        ],
        "Operands": {},
        "Description": "The ST command stops motion on the specified axis. Motors will come to a decelerated stop.",
        "Arguments": {
            "Argument": {
                "0": "mm"
            },
            "Min": {
                "0": "A"
            },
            "Max": {
                "0": "ABCDEFGHMNST"
            },
            "Default": {
                "0": "ABCDEFGH"
            },
            "Resolution": {
                "0": "Multi-Axis Mask"
            },
            "Description": {
                "0": "Axes to command to stop motion"
            },
            "Notes": {
                "0": "nan"
            }
        },
        "Remarks": "\nIf ST is sent from the host without an axis specification, program execution will stop in addition to motion.",
        "Examples": "\n'Galil DMC Code Example\nST\n \nA\nA\n;\n' Stop A-axis motion\nST\n \nS\nS\n;\n' Stop coordinate plane S\nST\n \nABCD\nABCD\n;\n' Stop A,B,C,D motion\nST\n \nSCD\nSCD\n;\n' Stop coordinate plane S, as well as axes C and D\nST \n;\n' Stop motion on all axes including any virtual axes and coordinate planes\n'Use the after motion complete command, AM, to wait for motion to be stopped. \n'Galil DMC Code Example\n:\nST\n \nA\nA\n;\n'       Stop motion on the A axis\n:\nSC\n \nA\nA\n;\n'       Query A axis status\n \n4            Indicates stopped by ST command\n:\nMG\n \n_NO\n;\n'     Check if code is running\n \n1            Thread 0 running\n:\nST\n \n;\n'        General stop\n:\nMG\n \n_NO\n;\n'     check code again\n \n0            Thread 0 stopped \nST applies to DMC40x0,DMC42x0,DMC41x3,DMC21x3,DMC18x6,DMC18x2,DMC30010,DMC500x0,DMC52xx0\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "SY",
        "Usage": [
            {
                "Example": "SYm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "SY n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_SYm"
            ],
            "Explanation": "Operand holds the value last set by the command"
        },
        "Description": "This command is used to designate the active level of the Error and Warning bits when using the Galil BiSS upgrade. The BiSS protocol defines two bits\nwhich can be used by the encoder to signal various events.",
        "Arguments": {
            "Argument": {
                "0": "m",
                "1": "Argument",
                "2": "n",
                "3": "nan",
                "4": "nan",
                "5": "nan"
            },
            "Min": {
                "0": "A",
                "1": "Value",
                "2": "0",
                "3": "1",
                "4": "2",
                "5": "3"
            },
            "Max": {
                "0": "H",
                "1": "Description",
                "2": "Warning bit = Active Low; Error bit = Active Low",
                "3": "Warning bit = Active Low; Error bit = Active High",
                "4": "Warning bit = Active High; Error bit = Active Low",
                "5": "Warning bit = Active High; Error bit = Active High"
            },
            "Default": {
                "0": "N/A",
                "1": "Notes",
                "2": "nan",
                "3": "nan",
                "4": "nan",
                "5": "Default"
            },
            "Resolution": {
                "0": "Axis",
                "1": "nan",
                "2": "nan",
                "3": "nan",
                "4": "nan",
                "5": "nan"
            },
            "Description": {
                "0": "Axis to assign value",
                "1": "nan",
                "2": "nan",
                "3": "nan",
                "4": "nan",
                "5": "nan"
            },
            "Notes": {
                "0": "nan",
                "1": "nan",
                "2": "nan",
                "3": "nan",
                "4": "nan",
                "5": "nan"
            }
        },
        "Remarks": "\nThe SY mask should be set appropriately to ensure that the #SERERR automatic subroutine will run when the bits are active, and that the _SSn\noperand reports the fault state of the encoder correctly.\nExample of Warning and Alarm/Error bit use, Quoted from Renishaw Data Sheet L-9709-9005-03-A\nError (1 bit) \"The error bit is active low: \"1\" indicates that the transmitted position information has been verified by the readhead's internal\nsafety checking algorithm and is correct; \"0\" indicates that the internal check has failed and the position information should not be trusted. The\nerror bit is also set to \"0\" if the temperature exceeds the maximum specification for the product.\"\nWarning (1 bit) \"The warning bit is active low: \"0\" indicates that the encoder scale (and/or reading window) should be cleaned. Note that the\nwarning bit is not an indication of the trustworthiness of the position data. Only the error bit should be used for this purpose.\"",
        "Examples": "\n'Galil DMC Code Example\n'configure SY for Renishaw Resolute encoder\nSY\nA\nA\n= \n= \n0\n'Galil DMC Code Example\n'Setup Renishaw RESOLUTE 26-bit linear encoder\n'Renishaw encoders have active low error and warning bits\n'If the error bit is active or CRC fails \n'the encoder data should not be considered valid\n'Turn off output 1 and 3 if position data is not valid\n#start\nSY\nA\nA\n= \n= \n0\n;\n' Set Error bit = Active Low - Set Warning bit = Active Low\nSS\nA\nA\n= \n= \n1\n,\n27\n,\n27\n,\n0\n<\n4\n;\n' 26-bit linear encoder, add 1 bit for leading zero on Renishaw\nTP \n;\n'Get absolute position\n'... continue setup\nEN\n#SERERR\n#SERERR\n;\n' display error, shutdown axis if data is invalid\nMG\n \n\"SERERR \"\n,\n \n_SS\nA\nA\n{$4}\n;\n'Display hex value of SS bit mask\nMG\n \n\"TC: \"\n,\n \n_TC\n;\n'Display any TC error codes\nbisscode\n \n=\n=\n \n_SS\nA\nA\n;\n'Query SS bit mask\nIF\n \n(\n(\nbisscode\n \n&\n \n$1\n)\n)\n;\n'First bit in the mask is the Timout bit\n MG\n \n\"BiSS Timeout\"\n;\n 'Add timeout code here\n SS\nA\nA\n= \n= \n0\n;\n'Turn off BiSS encoder\nENDIF\nIF\n \n(\n(\nbisscode\n \n&\n \n$2\n)\n)\n;\n'Second bit in the mask is the CRC validity bit\n MG\n \n\"Invalid CRC\"\n 'Add CRC failure code here, make the system safe\n SS\nA\nA\n= \n= \n0\n;\n'Turn off BiSS\n CB\n \n1\n;\n'Turn off output 1\n CB\n \n3\n;\n'Turn off output 3\n AB\n;\n'Abort motion and program operation\nENDIF\nIF\n \n(\n(\nbisscode\n \n&\n \n$4\n)\n)\n;\n'Third bit in the mask is the error bit\n MG\n \n\"Error Bit Set\"\n;\n 'Add Error code here, make the system safe\n SS\nA\nA\n= \n= \n0\n;\n'Turn off BiSS\n CB\n \n1\n;\n'Turn off output 1\n CB\n \n3\n;\n'Turn off output 3"
    },
    {
        "Command": ";",
        "Usage": [],
        "Operands": {},
        "Description": "",
        "Arguments": [],
        "Remarks": "",
        "Examples": ""
    },
    {
        "Command": "TA",
        "Usage": [
            {
                "Example": "TA n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_TA0",
                "_TA1",
                "_TA2",
                "_TA3"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "The command returns the amplifier error status. The value is decimal and represents an 8 bit value. Bit 7 is most significant bit, 0 is least.",
        "Arguments": {
            "Argument": {
                "0": "n"
            },
            "Min": {
                "0": "0"
            },
            "Max": {
                "0": "3"
            },
            "Default": {
                "0": "N/A"
            },
            "Resolution": {
                "0": "1"
            },
            "Description": {
                "0": "Selects amp status byte to return"
            },
            "Notes": {
                "0": "nan"
            }
        },
        "Remarks": "\n_TAn Contains the amplifier error status. n = 0,1,2, or 3\nIf a brushed-type servo motor is disabling and TA1 shows a Hall error, use the BR command to set the axis as a brushed axis. This causes the\ncontroller to ignore invalid Hall states.",
        "Examples": "\n'Galil DMC Code Example\n:\nTA \n1\n5 'Hall error for axis A and C \n'Galil DMC Code Example\n:\nTA \n1\n1   'bit 0 means Hall error for A axis\n:\nTA \n0\n8   'bit 3 means under voltage error for amp \nTA applies to DMC500x0,DMC40x0,DMC41x3,DMC30010,DMC21x3\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "TB",
        "Usage": [
            {
                "Example": "TB",
                "Explanation": "Command takes no arguments"
            }
        ],
        "Operands": {
            "Operands": [
                "_TB"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "The TB command returns status information from the controller as a decimal number. Each bit of the status byte denotes an active condition when the\nbit is set (high):",
        "Arguments": {
            "Bit #": {
                "0": "Bit 7",
                "1": "Bit 6",
                "2": "Bit 5",
                "3": "Bit 4",
                "4": "Bit 3",
                "5": "Bit 2",
                "6": "Bit 1",
                "7": "Bit 0"
            },
            "Status": {
                "0": "Executing application program",
                "1": "N/A",
                "2": "Contouring",
                "3": "Executing error or limit switch routine",
                "4": "Input Interrupt enabled",
                "5": "Executing input interrupt routine",
                "6": "N/A",
                "7": "Echo on"
            }
        },
        "Remarks": "\n_TB Contains the status byte reported by the TB command",
        "Examples": "\n'Galil DMC Code Example\n:\nTB\n33'      Contouring on and Echo is on (2^5 + 2^0 = 32 + 1 = 33) \n'Galil DMC Code Example\n:\nTB\n;\n'      Tell status information\n129'     Executing program and echo on (2^7 + 2^0 = 128 + 1 = 129) \nTB applies to DMC500x0,DMC52xx0,DMC40x0,DMC42x0,DMC41x3,DMC30010,DMC21x3,DMC18x6,DMC18x2,RIO47xxx\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "TC",
        "Usage": [
            {
                "Example": "TC n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_TC"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "The TC command reports programming or command errors detected by the controller. The TC command returns a number between 1 and 255. This\nnumber is a code that reflects why a command was not accepted by the controller. This command is useful when the controller halts execution of a\nprogram or when the response to a command is a question mark.",
        "Arguments": {
            "Argument": {
                "0": "n",
                "1": "nan"
            },
            "Value": {
                "0": "0",
                "1": "1"
            },
            "Description": {
                "0": "Return the numerical code only",
                "1": "Return the numerical code and human-readable message"
            },
            "Notes": {
                "0": "Default",
                "1": "nan"
            }
        },
        "Remarks": "",
        "Examples": ""
    },
    {
        "Command": "Download error - line too long or too many lines",
        "Usage": [],
        "Operands": {},
        "Description": "",
        "Arguments": {
            "Unnamed: 0": {
                "0": "84",
                "1": "90",
                "2": "97",
                "3": "98",
                "4": "99",
                "5": "100",
                "6": "101",
                "7": "102",
                "8": "103",
                "9": "104",
                "10": "105",
                "11": "106",
                "12": "110",
                "13": "111",
                "14": "112",
                "15": "113"
            },
            "Unnamed: 1": {
                "0": "Too many elements",
                "1": "Only A B C D valid operand",
                "2": "Bad Binary Command Format",
                "3": "Binary Commands not valid in application program",
                "4": "Bad binary command number",
                "5": "Not valid when running ECAM",
                "6": "Improper index into ET",
                "7": "No master axis defined for ECAM",
                "8": "Master axis modulus greater than 256 EP value",
                "9": "Not valid when axis performing ECAM",
                "10": "EB1 command must be given first",
                "11": "Privilege Violation",
                "12": "No hall effect sensors detected",
                "13": "Must be made brushless by BA command",
                "14": "BZ command timeout",
                "15": "No movement in BZ command"
            },
            "Unnamed: 2": {
                "0": "nan",
                "1": "nan",
                "2": "nan",
                "3": "nan",
                "4": "nan",
                "5": "nan",
                "6": "nan",
                "7": "nan",
                "8": "nan",
                "9": "nan",
                "10": "nan",
                "11": "nan",
                "12": "nan",
                "13": "nan",
                "14": "nan",
                "15": "nan"
            }
        },
        "Remarks": "",
        "Examples": ""
    },
    {
        "Command": "Invalid EtherCAT configuration",
        "Usage": [],
        "Operands": {},
        "Description": "",
        "Arguments": [],
        "Remarks": "\nTC command accepts ? as a query. This is equivalent to TC or TC 0\nAfter TC has been read, the error code is set to zero.\n_TC contains the value of the error code. Use of the operand does not clear the error code.",
        "Examples": "\n'Galil DMC Code Example\n:\nGF32\n;\n'   Bad command\n?\n:\nTC \n1\n;\n'    Tell error code\n1       Unrecognized command\n:\nTC applies to DMC500x0,DMC40x0,DMC42x0,DMC41x3,DMC30010,DMC21x3,RIO47xxx,DMC18x6,DMC18x2,DMC52xx0,RIO574x0\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "TD",
        "Usage": [
            {
                "Example": "TD mm",
                "Explanation": "Argument is an axis mask"
            }
        ],
        "Operands": {
            "Operands": [
                "_TDm"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "The TD command returns the current position of the dual (auxiliary) encoder input. When operating with stepper motors, the TD command returns the\nnumber of counts that have been output by the controller.",
        "Arguments": {
            "Argument": {
                "0": "mm"
            },
            "Min": {
                "0": "A"
            },
            "Max": {
                "0": "ABCDEFGH"
            },
            "Default": {
                "0": "ABCDEFGH"
            },
            "Resolution": {
                "0": "Multi-Axis Mask"
            },
            "Description": {
                "0": "Axes to report dual (auxiliary) encoder position."
            },
            "Notes": {
                "0": "nan"
            }
        },
        "Remarks": "\nAuxiliary encoders are not available for a stepper axis or for the axis where output compare is used.\nOperand Usage\n_TDm reports the dual encoder position for the specified axis.",
        "Examples": "\n'Galil DMC Code Example\n:\nTD \n;\n' Return A,B,C,D Dual encoders\n \n200, -10, 0, -110 \n:\nTD \nA\nA\n;\n' Return the A motor Dual encoder\n \n200 \n:\ndual\n= \n= \n_TD\nA\nA\n;\n' Assign the variable, DUAL, the value of TDA \nTD applies to DMC500x0,DMC40x0,DMC42x0,DMC41x3,DMC30010,DMC21x3,DMC18x6,DMC18x2\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "TE",
        "Usage": [
            {
                "Example": "TE mm",
                "Explanation": "Argument is an axis mask"
            }
        ],
        "Operands": {
            "Operands": [
                "_TEm"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "The TE command returns the current error in the control loop.\nThe command returns the position error of the motor(s), which is the difference between commanded (RP) and actual (TP) position.",
        "Arguments": {
            "Argument": {
                "0": "mm"
            },
            "Min": {
                "0": "A"
            },
            "Max": {
                "0": "ABCDEFGH"
            },
            "Default": {
                "0": "ABCDEFGH"
            },
            "Resolution": {
                "0": "Multi-Axis Mask"
            },
            "Description": {
                "0": "Axes to report position error"
            },
            "Notes": {
                "0": "nan"
            }
        },
        "Remarks": "\nUnder normal operating conditions with servo control, the position error should be small. The position error is typically largest during acceleration and\ndeceleration.\nThe Tell Error command is not valid for step motors since they operate open-loop.\nOperand Usage\n_TEm contains the current position error value for the specified axis.",
        "Examples": "\n'Galil DMC Code Example\n:\nTE \n;\n' Return all position errors\n \n5, -2, 0, 6 \n:\nTE \nA\nA\n;\n' Return the A motor position error\n \n5 \n:\nTE \nB\nB\n;\n' Return the B motor position error\n \n-2 \n:\nerror\n \n= \n= \n_TE\nA\nA\n;\n' Sets the variable, Error, with the A-axis position error \nTE applies to DMC500x0,DMC52xx0,DMC40x0,DMC42x0,DMC41x3,DMC30010,DMC21x3,DMC18x6,DMC18x2,RIO47xxx\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "TH",
        "Usage": [
            {
                "Example": "TH",
                "Explanation": "Command takes no arguments"
            }
        ],
        "Operands": {},
        "Description": "The TH command returns a list of data pertaining to the Galil's Ethernet connection. This list begins with the IP address and Ethernet address (physical\naddress), followed by the status of each handle indicating connection type and IP address.",
        "Arguments": [],
        "Remarks": "\nIf no handles are shown as \nAVAILABLE\n, the controller will be unable to create or accept more Ethernet connections with TCP or UDP. Ping will still\nfunction when all handles are taken.",
        "Examples": "\n'Galil DMC Code Example\n:\nTH\nCONTROLLER IP ADDRESS 10,51,0,87 ETHERNET ADDRESS 00-50-4C-08-01-1F\nIHA TCP PORT 1050 TO IP ADDRESS 10,51,0,89 PORT 1000 \nIHB TCP PORT 1061 TO IP ADDRESS 10,51,0,89 PORT 1001 \nIHC TCP PORT 1012 TO IP ADDRESS 10,51,0,93 PORT 1002 \nIHD TCP PORT 1023 TO IP ADDRESS 10,51,0,93 PORT 1003 \nIHE TCP PORT 1034 TO IP ADDRESS 10,51,0,101 PORT 1004\nIHF TCP PORT 1045 TO IP ADDRESS 10,51,0,101 PORT 1005\nIHG AVAILABLE\nIHH AVAILABLE \nTH applies to DMC40x0,DMC42x0,DMC41x3,DMC21x3,RIO47xxx,DMC30010,DMC500x0,DMC52xx0\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "TI",
        "Usage": [
            {
                "Example": "TI n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_TI0",
                "_TI1",
                "_TI2",
                "_TI3",
                "_TI4",
                "_TI5",
                "_TI10",
                "_TI11"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "The TI command returns the state of the inputs in banks of 8 bits, or 1 byte. The value returned by this command is decimal and represents an 8 bit\nvalue (decimal value ranges from 0 to 255). Each bit represents one input where the LSB is the lowest input number and the MSB is the highest input bit.",
        "Arguments": {
            "Argument": {
                "0": "n",
                "1": "nan",
                "2": "nan",
                "3": "nan",
                "4": "nan",
                "5": "nan",
                "6": "nan"
            },
            "Value": {
                "0": "0",
                "1": "1",
                "2": "2",
                "3": "3",
                "4": "4",
                "5": "5",
                "6": "10"
            },
            "Description": {
                "0": "Report status of Inputs 1-8",
                "1": "Report status of Inputs 9-16",
                "2": "Report status of Inputs 17-24",
                "3": "Report status of Inputs 25-32",
                "4": "Report status of Inputs 31-40",
                "5": "Report status of Inputs 41-48",
                "6": "Report status of Inputs 81-88"
            },
            "Notes": {
                "0": "Default",
                "1": "Only valid for 5-8 axis controllers",
                "2": "Must have extended IO configured as inputs for valid values. See Remarks",
                "3": "Must have extended IO configured as inputs for valid values. See Remarks",
                "4": "Must have extended IO configured as inputs for valid values. See Remarks",
                "5": "Must have extended IO configured as inputs for valid values. See Remarks",
                "6": "Auxiliary encoder inputs. See Remarks"
            }
        },
        "Remarks": "\nFor n = 2 to n = 5, no additional hardware is required for extended IO support\nExtended IO blocks must be configured as inputs with the CO command before using TI\nFor n = 10 and n = 11, the auxiliary encoder channels A and B can be used as additional IO. Only 2 * the number of axes worth of inputs are\navailable.\nSee the User manual for more details.\nOperand Usage\n_TIn contains the status byte of the input block specified by 'n'.\nNote that the operand can be masked to return only specified bit information - see section on Bit-wise operations.",
        "Examples": "\n'Galil DMC Code Example\n:\nTI \n1\n;\n'             Tell input state on bank 1\n8                  Bit 3 is high, others low\n:\nTI \n0\n0                  All inputs on bank 0 low\n:\ninput\n= \n= \n_TI1\n;\n'     Sets the variable, Input, with the TI1 value\n:\ninput\n= \n= \n?\n?\n8.0000 \nTI applies to DMC500x0,DMC40x0,DMC42x0,DMC41x3,DMC30010,DMC21x3,RIO47xxx,DMC18x6,DMC18x2,RIO574x0,DMC52xx0\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "TIME",
        "Usage": [
            {
                "Example": "variable= TIME",
                "Explanation": "Holds a value"
            }
        ],
        "Operands": {
            "Operands": [
                "TIME"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "The TIME operand returns the value of the internal free running, real time clock.\nThe returned value represents the number of servo loop updates and is based on the TM command. The default value for the TM command is 1000. With\nthis update rate, the operand TIME will increase by 1 count every update of approximately 1000usec. The clock is reset to 0 with a standard reset or a\nmaster reset.",
        "Arguments": {
            "'Galil DMC Code Example\rMG TIME;'  Display the value of the internal clock\rt1= TIME;'  Sets the variable t1 to the TIME value": {}
        },
        "Remarks": "\nThe keyword, TIME, does not require an underscore (_) as with the other operands.\nTIME will increment up to +2,147,483,647 before rolling over to -2,147,483,648 and continuing to count up.\nTIME rollover occurs after ~24-25 days of on-time at TM 1000 with no reset.\nTM 1000 will actually set an update rate of 976 microseconds. Thus the value returned by the TIME operand will be off by 2.4% of the actual time.",
        "Examples": "\n'Galil DMC Code Example\nMG\n \nTIME\n;\n'  Display the value of the internal clock\nt1\n= \n= \nTIME\n;\n'  Sets the variable t1 to the TIME value \nTIME applies to DMC500x0,DMC52xx0,DMC40x0,DMC42x0,DMC41x3,DMC30010,DMC21x3,DMC18x6,DMC18x2,RIO47xxx\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "TK",
        "Usage": [
            {
                "Example": "TKm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "TK n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_TKm"
            ],
            "Explanation": "Operand holds the value last set by the command"
        },
        "Description": "The TK command sets the peak torque limit on the motor command output. This command works with the TL command which sets the continuous\ntorque limit. When the average torque is below TL, the motor command signal can go up to the TK (Peak Torque) limit for a short amount of time.",
        "Arguments": {
            "Argument": {
                "0": "m",
                "1": "n"
            },
            "Min": {
                "0": "A",
                "1": "0"
            },
            "Max": {
                "0": "H",
                "1": "9.9982"
            },
            "Default": {
                "0": "N/A",
                "1": "0"
            },
            "Resolution": {
                "0": "Axis",
                "1": "20/65,536"
            },
            "Description": {
                "0": "Axis to assign value",
                "1": "Value of peak torque limit"
            },
            "Notes": {
                "0": "nan",
                "1": "n = 0 disables the peak torque limit"
            }
        },
        "Remarks": "\nTK provides the absolute value of the peak torque limit for -/+ torque outputs\nPeak torque can be achieved for approximately 1000 samples upon initial command from 0V torque.\nIf TK is set lower than TL, then TL is the maximum command output under all circumstances.",
        "Examples": "\n'Galil DMC Code Example\nTL\nA\nA\n=\n=\n \n7\n;\n'   Limit A-axis to a 7 volt average torque output\nTK\nA\nA\n=\n=\n \n9.99\n;\n'  Limit A-axis to a 9.99 volt peak torque output \nTK applies to DMC500x0,DMC40x0,DMC42x0,DMC41x3,DMC30010,DMC21x3,DMC18x6,DMC18x2\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "TL",
        "Usage": [
            {
                "Example": "TLm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "TL n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_TLm"
            ],
            "Explanation": "Operand holds the value last set by the command"
        },
        "Description": "The TL command sets the limit on the motor command output. This limit is designed to prevent over current to motors with lower current rating than the\ndrive.\nTL works along with the TK (Peak torque) command to control output current to the motor.",
        "Arguments": {
            "Argument": {
                "0": "m",
                "1": "n"
            },
            "Min": {
                "0": "A",
                "1": "0"
            },
            "Max": {
                "0": "H",
                "1": "9.9982"
            },
            "Default": {
                "0": "N/A",
                "1": "9.9982"
            },
            "Resolution": {
                "0": "Axis",
                "1": "20/65,536"
            },
            "Description": {
                "0": "Axis to assign value",
                "1": "Value of torque limit"
            },
            "Notes": {
                "0": "nan",
                "1": "nan"
            }
        },
        "Remarks": "\nTL sets the absolute torque maximum for negative and positive torque\nFor example, TL of 5 limits the motor command output to 5 volts maximum and -5 volts minimum\nTL With Internal Drives\nThe maximum torque limit is different for certain amplifier configurations at a specific AG setting. These cases are listed below.\nAmplifier\nAG setting (current rating)\nTL limit\nAMP-430x0\n2 (1.0 A/V)\n7.0000\nAMP-43240\n2 (2.0 A/V)\n5.0000\nAMP-43540\n2 (1.6 A/V)\n5.0000\nAMP-43640\nN/A (0.2 A/V)\n5.0000\nAMP-43740\n2 (3.2 A/V)\n5.0000",
        "Examples": "\n'Galil DMC Code Example\n:\nTL\n \n1\n,\n5\n,\n9\n,\n7.5\n;\n' Limit A-axis to 1 volt. Limit B-axis to 5 volts. Limit C-axis to 9 volts. Limit D-axis to 7.5 volts.\n:\nTL\n \n?\n?\n,\n?\n?\n,\n?\n?\n,\n?\n?\n;\n' Return limits\n1.0000,5.0000,9.0000,7.5000 \n:\nTL\n \n?\n?\n;\n'  Return A-axis limit\n1.0000 \nTL applies to DMC500x0,DMC40x0,DMC42x0,DMC41x3,DMC30010,DMC21x3,DMC18x6,DMC18x2\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "TM",
        "Usage": [
            {
                "Example": "TM n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_TM"
            ],
            "Explanation": "Operand holds the value last set by the command"
        },
        "Description": "The TM command sets the sampling period of the control loop. The units of this command are microseconds. A negative number turns off the servo loop.",
        "Arguments": {
            "Argument": {
                "0": "n"
            },
            "Min": {
                "0": "62.5"
            },
            "Max": {
                "0": "5,000"
            },
            "Default": {
                "0": "1,000"
            },
            "Resolution": {
                "0": "31.25"
            },
            "Description": {
                "0": "Set the sample time\rin usecs"
            },
            "Notes": {
                "0": "The minimum value varies based on axis count and\rfirmware usage. See Remarks"
            }
        },
        "Remarks": "\nTM 1000 will actually set an update rate of 976 microseconds. Thus the value returned by the TIME operand will be off by 2.4% of the actual time.\nIf a higher sampling frequency is required, please contact Galil.\nThe minimum allowed TM setting for the controller is listed in the tables below.\nThe following commands are automatically scaled to adjust for changes in sample time.\nAC\nAS\nAT\nDC\nFA\nFV\nHV\nJG\nKP\nNB\nNF\nNZ\nPL\nSD\nSP\nVA\nVD\nVS\nWT\nThe following commands are NOT automatically scaled to adjust for changes in sample time\nBW\nDR\nDT\nIT\nKD\nKI\nTIME\nTK\nTV\nTW\nFor more infomation see:\n[\nhttp://www.galil.com/news/dmc-programming-motion-controllers/time-based-commands-accelera-motion-controllers\n]\nAxis Count\nMinimum TM\n1-2\n62.5\n3-4\n125\n5-6\n156.25\n7-8\n187.5",
        "Examples": "\n'Galil DMC Code Example\n:\nTM\n \n2000\n;\n' Set sample rate to 2000 msec\n:\nTM\n \n1000\n;\n' Return to default sample rate\n:\nTM applies to DMC40x0,DMC42x0,DMC41x3,DMC21x3,DMC18x6,DMC18x2,DMC30010,DMC500x0,DMC52xx0\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "TN",
        "Usage": [
            {
                "Example": "TN n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_TNm"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "The TN command describes the tangent axis to the coordinated motion path. n\n0\n is the scale factor in counts/degree of the tangent axis. n\n1\n is the\nabsolute position of the tangent axis where the tangent axis is aligned with zero degrees in the coordinated motion plane. The tangent function is useful\nfor cutting applications where a cutting tool must remain tangent to the part.",
        "Arguments": {
            "Argument": {
                "0": "n0",
                "1": "n1"
            },
            "Min": {
                "0": "-127",
                "1": "-8,388,608"
            },
            "Max": {
                "0": "127",
                "1": "8,388,607"
            },
            "Default": {
                "0": "0",
                "1": "0"
            },
            "Resolution": {
                "0": "0.004",
                "1": "1.0"
            },
            "Description": {
                "0": "Scale factor in counts/degree of the tangent axis",
                "1": "Absolute position of tangent axis where the tangent angle is 0"
            },
            "Notes": {
                "0": "nan",
                "1": "nan"
            }
        },
        "Remarks": "\nWhen operating with stepper motors, n\n0\n is the scale factor in steps / degree\nThe tangent axis is specified with the VMm0m1m2 command where m2 is the tangent axis.\nFor example, VMABD specifies the D axis as the tangent axis\nOperand Usage\n_TNm (where m = S or T) contains the first position value for the tangent axis in the specified vector plane. This allows the user to correctly position\nthe tangent axis before the motion begins.\n_TNm will change based upon the vector path described in the VM declaration. See the example below.\nn\n0\n = ? also reports this value",
        "Examples": "\nUse a 2D table with a tangent cutting blade to cut a half circle. Ensure that the blade is oriented before turning on the saw. The saw is activated with\noutput 1.\n'Galil DMC Code Example\n#example\nVM\n \nABC\nABC\n;\n'           Z axis is tangent\nVS\nS\nS\n= \n= \n500\n;\n'          Set vector speed\nm\n= \n= \n1000\n/\n360\n;\n'       Z axis encoder is 1000 counts per full revolution\nn\n= \n= \n0\n;\n'              When TPZ=0, blade is oriented to cut along X axis\nTN\n \nm\n,\nn\n;\n'           Set these tangent characteristics\nCR\n \n1000\n,\n0\n,\n180\n;\n'    Profile a circle with radius 1000 counts, \n'                   starting at 0 degrees\n'                   and spanning 180 degrees\nVE\n;\n'               End the vector path\nMG \n_TN\nS\nS\n;\n'            Print the calculated initial tangent entry point (250)\nPA\nC\nC\n= \n= \n_TN\nS\nS\n;\n'          Profile a move to orient the Z axis to begin\nBG \nC\nC\n;\n'              Move the blade into place\nAM \nC\nC\n;\n'              Wait until the blade motion is done\nSB \n1\n;\n'              Turn on the saw\nWT \n1000\n;\n'           Wait for saw to spin up\nBG \nS\nS\n;\n'              Begin vector motion, saw will stay tangent\nAM \nS\nS\n;\n'              Wait for the cut to complete\nCB \n0\n;\n'              Turn off the saw\nMG\n \n\"ALL DONE\"\n;\n'    Print a message\nEN\nTN applies to DMC40x0,DMC42x0,DMC41x3,DMC21x3,DMC18x6,DMC18x2,DMC500x0,DMC52xx0\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "TP",
        "Usage": [
            {
                "Example": "TP mm",
                "Explanation": "Argument is an axis mask"
            }
        ],
        "Operands": {
            "Operands": [
                "_TPm"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "The TP command returns the current position of the motor.",
        "Arguments": [],
        "Remarks": "\n_TPm contains the current position value for the specified axis.\nOmitting mm returns the position of all axes",
        "Examples": "\n'Galil DMC Code Example\n'Assume the A-axis is at the position 200 (decimal), the B-axis is at the position -10 (decimal)\n'the C-axis is at position 0, and the D-axis is at -110 (decimal).  The returned parameter units are in quadrature counts.\n:\nPF\n \n7\n;\n' Position format of 7\n:\nTP \n;\n' Return A,B,C,D positions\n \n200, -10, 0, -110 \n:\nTP \nA\nA\n;\n' Return the A motor position\n \n200 \n:\nTP \nB\nB\n;\n' Return the B motor position\n \n-10 \n:\nPF \n-\n6.0\n;\n' Change to hex format\n:\nTP \n;\n' Return A,B,C,D in hex\n$0000C8,$FFFFF6,$000000,$FFFF93 \n:\nposition\n \n= \n= \n_TP\nA\nA\n;\n' Assign the variable, Position, the value of TPA \nTP applies to DMC40x0,DMC42x0,DMC41x3,DMC21x3,DMC18x6,DMC18x2,DMC30010,DMC500x0,DMC52xx0\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "TR",
        "Usage": [
            {
                "Example": "TR n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {},
        "Description": "The TR command causes each instruction in a program to be sent out the communications port prior to execution. The trace command is useful in\ndebugging programs.",
        "Arguments": [],
        "Remarks": "\nn\n1\n sets a 1-byte bitmask which determines which threads will run. Bit n set corresponds to thread n traced.\nFor example, setting bit 2 and 3 sets TR to trace threads 2 and 3. (2^2 + 2^3 = 4 + 8 = 12. TR 1,12 is issued)\nOmitting n\n1\n sets it to the default maximum value to enable trace on all threads.",
        "Examples": "\n'Galil DMC Code Example\n:\n'Turn on trace during a program execution\n:\nLS\n0 MGTIME\n1 WT1000\n2 JP0\n3 \n:\nXQ\n:\n18003461.0000 \n18004461.0000 \n18005461.0000 \n:\nTR \n1\n:\n2 JP0 \n0 MGTIME \n18006461.0000 \n1 WT1000 \n2 JP0 \n0 MGTIME \n18007461.0000 \n1 WT1000 \n:\nTR \n0\n:\n18008461.0000 \n18009461.0000 \n:\nST\n:\nTR applies to DMC500x0,DMC52xx0,DMC40x0,DMC42x0,DMC41x3,DMC30010,DMC21x3,DMC18x6,DMC18x2,RIO47xxx\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "TS",
        "Usage": [
            {
                "Example": "TS mm",
                "Explanation": "Argument is an axis mask"
            }
        ],
        "Operands": {
            "Operands": [
                "_TSm"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "The TS command returns information including axis-specific IO status, error conditions, motor condition and state. The value returned by this command is\ndecimal and represents an 8 bit value (decimal value ranges from 0 to 255).",
        "Arguments": {
            "Argument": {
                "0": "mm"
            },
            "Min": {
                "0": "A"
            },
            "Max": {
                "0": "ABCDEFGH"
            },
            "Default": {
                "0": "ABCDEFGH"
            },
            "Resolution": {
                "0": "Multi-Axis Mask"
            },
            "Description": {
                "0": "Axes to report axis switches"
            },
            "Notes": {
                "0": "nan"
            }
        },
        "Remarks": "\nEach bit of the TS response represents the following status information when the bit is set (1).\nBit #\nStatus\nBit 7\nAxis in motion\nBit 6\nPosition error exceeds error limit\nBit 5\nMotor off\nBit 4\nReserved (0)\nBit 3\nForward Limit switch inactive\nBit 2\nReverse Limit switch inactive\nBit 1\nHome switch status\nBit 0\nPosition Latch has occurred\nFor active high or active low configuration (CN command), the limit switch bits are '1' when the switch is inactive and '0' when active.\nOperand Usage\n_TSm contains the current status of the switches for the specified axis.",
        "Examples": "\n'Galil DMC Code Example\n:\nv1\n= \n= \n_TS\nB\nB\n;\n' Assigns value of TSB to the variable V1\n:\nv1\n= \n= \n?\n?\n;\n' Interrogate value of variable V1\n15 (returned value) Decimal value corresponding to bit pattern 00001111\nY axis not in motion (bit 7 - has a value of 0)\nY axis error limit not exceeded (bit 6 has a value of 0)\nY axis motor is on (bit 5 has a value of 0)\nY axis forward limit is inactive (bit 3 has a value of 1)\nY axis reverse limit is inactive (bit 2 has a value of 1)\nY axis home switch is high (bit 1 has a value of 1)\nY axis latch is not armed (bit 0 has a value of 1) \nTS applies to DMC40x0,DMC42x0,DMC41x3,DMC21x3,DMC18x6,DMC18x2,DMC30010,DMC500x0,DMC52xx0\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "TT",
        "Usage": [
            {
                "Example": "TT mm",
                "Explanation": "Argument is an axis mask"
            }
        ],
        "Operands": {
            "Operands": [
                "_TTm"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "The TT command reports the value of the analog output signal, which is a number between -9.998 and 9.998 volts.",
        "Arguments": {
            "Argument": {
                "0": "mm"
            },
            "Min": {
                "0": "A"
            },
            "Max": {
                "0": "ABCDEFGH"
            },
            "Default": {
                "0": "ABCDEFGH"
            },
            "Resolution": {
                "0": "Multi-Axis Mask"
            },
            "Description": {
                "0": "Axes to report output torque command"
            },
            "Notes": {
                "0": "nan"
            }
        },
        "Remarks": "\nTorque output is limited by the value set for the TL command.\n_TTm contains the value of the torque for the specified axis.",
        "Examples": "\n'Galil DMC Code Example\n:\nv1\n= \n= \n_TT\nA\nA\n;\n' Assigns value of TTA to variable, v1\n:\nTT \nA\nA\n;\n'   Report torque on A\n-0.2843 \nTT applies to DMC500x0,DMC40x0,DMC42x0,DMC41x3,DMC30010,DMC21x3,DMC18x6,DMC18x2\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "TV",
        "Usage": [
            {
                "Example": "TV mm",
                "Explanation": "Argument is an axis mask"
            }
        ],
        "Operands": {
            "Operands": [
                "_TVm"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "The TV command returns the actual velocity of the axes in units of encoder count/s. The value returned includes the sign bit for direction.",
        "Arguments": {
            "Argument": {
                "0": "mm"
            },
            "Min": {
                "0": "A"
            },
            "Max": {
                "0": "ABCDEFGH"
            },
            "Default": {
                "0": "ABCDEFGH"
            },
            "Resolution": {
                "0": "Multi-Axis Mask"
            },
            "Description": {
                "0": "Axes to report velocity"
            },
            "Notes": {
                "0": "nan"
            }
        },
        "Remarks": "\nThe TV command is computed using a special averaging filter (over approximately 0.25 sec for TM1000). Therefore, TV will return average velocity,\nnot instantaneous velocity.\n_TVm contains the value of the velocity for the specified axis.",
        "Examples": "\n'Galil DMC Code Example\n:\nvela\n= \n= \n_TV\nA\nA\n;\n'       Assigns value of A-axis velocity to the variable VELA\n:\nTV \nA\nA\n;\n'             Returns the A-axis velocity\n \n3420 \nTV applies to DMC40x0,DMC42x0,DMC41x3,DMC21x3,DMC18x6,DMC18x2,DMC30010,DMC500x0,DMC52xx0\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "TW",
        "Usage": [
            {
                "Example": "TWm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "TW n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_TWm"
            ],
            "Explanation": "Operand holds the value last set by the command"
        },
        "Description": "The TW command sets the timeout time for the MC trippoint. The TW command sets the timeout in msec to declare an error if the MC command is active\nand the motor is not at or beyond the actual position within n msec after the completion of the motion profile. If a timeout occurs, then the MC trippoint\nwill clear and the stopcode will be set to 99. A running program will jump to the special label #MCTIME, if located in the application code.",
        "Arguments": {
            "Argument": {
                "0": "m",
                "1": "n"
            },
            "Min": {
                "0": "A",
                "1": "-1"
            },
            "Max": {
                "0": "H",
                "1": "32,767"
            },
            "Default": {
                "0": "N/A",
                "1": "32,766"
            },
            "Resolution": {
                "0": "Axis",
                "1": "1"
            },
            "Description": {
                "0": "Axis to assign value",
                "1": "Set the timeout in msec for the MC command"
            },
            "Notes": {
                "0": "nan",
                "1": "n = -1 disables the timeout"
            }
        },
        "Remarks": "\nThe EN command should be used to return from the #MCTIME subroutine.",
        "Examples": "\n'Galil DMC Code Example\nTW\nA\nA\n=\n=\n \n1000\n;\n' set timeout time for MC to 1000 for A axis\nvar\n=\n=\n \n_TW\nA\nA\n;\n' set value of TW for A axis to variable, var \n'Galil DMC Code Example\nTW\nA\nA\n=\n=\n \n5000\n;\n'     set MC timeout to 5 seconds\nPR\nA\nA\n=\n=\n \n10000\n;\n'    set move length\nBG \nA\nA\nMC \nA\nA\nMG \n\"Move done\"\n;\n' message when move completes\nEN\n'\n#MCTIME\n#MCTIME\n'code when motor doesn't reach final pos in time\nMG \n\"Move didn't finish\"\nMG \n\"Longer than \"\n,\n_TW\nA\nA\n,\n\" msecs\"\nST \nA\nA\nAM \nA\nA\nMO \nA\nA\n;\n'            shut off axis\nEN\nTW applies to DMC40x0,DMC42x0,DMC41x3,DMC21x3,DMC18x6,DMC18x2,DMC30010,DMC500x0,DMC52xx0\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "TZ",
        "Usage": [
            {
                "Example": "TZ",
                "Explanation": "Command takes no arguments"
            }
        ],
        "Operands": {},
        "Description": "The TZ command is used to request the I/O status of the controller. This is returned to the user as a human-readable text string.",
        "Arguments": [],
        "Remarks": "\nThe data reported by TZ is also accessible through the TI (inputs) and OP (outputs) command",
        "Examples": "\n'Galil DMC Code Example\n:\nTZ\n;\n'           issued for DMC-4040\nBLOCK 0 (8-1) dedicated as input - value 255 (1111_1111)\nBLOCK 0 (8-1) dedicated as output- value 0 (0000_0000)\nBLOCK 2 (24-17) configured as input - value 255 (1111_1111)\nBLOCK 3 (32-25) configured as input - value 255 (1111_1111)\nBLOCK 4 (40-33) configured as input - value 255 (1111_1111)\nBLOCK 5 (48-41) configured as input - value 255 (1111_1111)\nBLOCK 10 (88-81) dedicated as input - value 255 (1111_1111) \nTZ applies to DMC40x0,DMC42x0,DMC41x3,DMC21x3,RIO47xxx,DMC500x0,DMC52xx0\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "UI",
        "Usage": [
            {
                "Example": "UI n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {},
        "Description": "The UI command allows user-defined interrupts to be created. UI can generate 16 different status bytes, $F0 to $FF (240-255), corresponding to UI0 to\nUI15.\nUI pushes a user-defined status byte into the EI queue. When the UI command (e.g. UI5) is executed, the status byte value (e.g. $F5 or 245) is queued\nup for transmission to the host, along with any other interrupts.",
        "Arguments": [],
        "Remarks": "\nThe UDP interrupt packet dispatch may be delayed depending on the number of interrupts in the queue\nIf immediate packet dispatch is required, use the message command (MG) to send a unique message to the host software.\nEI,,h must be set to a valid UDP port (set by the host, not the DMC code, is recommended) before any interrupt packet will be dispatched.",
        "Examples": "\n'Galil DMC Code Example\nJG\n \n5000\n;\n' Jog at 5000 counts/s\nBG \nA\nA\n;\n' Begin motion\nAS \nA\nA\n;\n' Wait for at speed\nUI\n \n1\n;\n' Cause an interrupt with status byte $F1 (241)\n'The program above interrupts the host PC with status byte $F1 (241) \n'when the motor has reach its target speed of 5000 counts/s \nUI applies to DMC40x0,DMC42x0,DMC41x3,DMC18x6,DMC18x2,DMC30010,DMC500x0,DMC52xx0\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "UL",
        "Usage": [
            {
                "Example": "UL",
                "Explanation": "Command takes no arguments"
            }
        ],
        "Operands": {
            "Operands": [
                "_UL"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "The UL command transfers data from the controller to a host computer. Programs are sent without line numbers. The Uploaded program will be followed\nby a <control>Z or a '\\' as an end of text marker.",
        "Arguments": [],
        "Remarks": "\nIn the Galil software, the UL command is not necessary because the UL command is handled by the graphical interface (Upload Program).\nIn a terminal utility such as HyperTerminal or Telnet, the UL command will bring the uploaded program to screen.\nFrom there, the user can copy it and save it to a file.\nIssuing this command will pause the output of the Data Record until the command is completed.\nOperand Usage\nWhen used as an operand, _UL gives the number of available variables.",
        "Examples": "\n'Galil DMC Code Example\n:\nUL\n;\n' Begin upload\n#A Line 0\nNO This is an Example Line 1\nNO Program Line 2\nEN Line 3\n{cntrl}Z Terminator\n:\nUL applies to DMC500x0,DMC52xx0,DMC40x0,DMC42x0,DMC41x3,DMC30010,DMC21x3,DMC18x6,DMC18x2,RIO47xxx\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "VA",
        "Usage": [
            {
                "Example": "VAm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "VA n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_VAm"
            ],
            "Explanation": "Operand holds the value last set by the command"
        },
        "Description": "The VA command sets the acceleration rate of the vector in a coordinated motion sequence.",
        "Arguments": {
            "Argument": {
                "0": "m",
                "1": "n"
            },
            "Min": {
                "0": "S",
                "1": "1,024"
            },
            "Max": {
                "0": "T",
                "1": "1,073,740,800"
            },
            "Default": {
                "0": "S",
                "1": "256,000"
            },
            "Resolution": {
                "0": "Axis",
                "1": "1,024"
            },
            "Description": {
                "0": "Coordinate plane to be specified",
                "1": "Vector acceleration for the coordinate system"
            },
            "Notes": {
                "0": "nan",
                "1": "nan"
            }
        },
        "Remarks": "\n_VAm contains the value of the vector acceleration for the specified coordinate system",
        "Examples": "\n'Galil DMC Code Example\n:\nVA\n \n1024\n;\n' Set vector acceleration to 1024 counts/sec2\n:\nVA\n \n?\n?\n;\n'   Return vector acceleration\n1024 \n:\nVA\n \n20000\n;\n' Set vector acceleration\n:\nVA\n \n?\n?\n;\n'         Return vector acceleration \n19456 \n:\naccel\n= \n= \n_VA\nS\nS\n;\n' Assign variable, accel, the value of VA \nVA applies to DMC40x0,DMC42x0,DMC41x3,DMC21x3,DMC18x6,DMC18x2,DMC30010,DMC500x0,DMC52xx0\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "VD",
        "Usage": [
            {
                "Example": "VDm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "VD n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_VDm"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "The VD command sets the deceleration rate of the vector in a coordinated motion sequence.",
        "Arguments": {
            "Argument": {
                "0": "m",
                "1": "n"
            },
            "Min": {
                "0": "S",
                "1": "1,024"
            },
            "Max": {
                "0": "T",
                "1": "1,073,740,800"
            },
            "Default": {
                "0": "S",
                "1": "256,000"
            },
            "Resolution": {
                "0": "Axis",
                "1": "1,024"
            },
            "Description": {
                "0": "Coordinate plane to be specified",
                "1": "Vector deceleration for the coordinate system"
            },
            "Notes": {
                "0": "nan",
                "1": "nan"
            }
        },
        "Remarks": "\n_VDm contains the value of the vector deceleration for the specified coordinate system.",
        "Examples": "\n'Galil DMC Code Example\n#vector\n;\n'      Vector Program Label\nVM \nAB\nAB\n;\n'         Specify plane of motion\nVA\n \n1000000\n;\n'   Vector Acceleration\nVD\n \n5000000\n;\n'   Vector Deceleration\nVS\n \n2000\n;\n'      Vector Speed\nVP\n \n1000\n,\n2000\n;\n' Vector Position\nVE\n;\n'           End Vector\nBG\n \nS\nS\n;\n'         Begin Sequence\nAM\n \nS\nS\n;\n'         Wait for Vector sequence to complete\nEN\n;\n'           End Program \nVD applies to DMC40x0,DMC42x0,DMC41x3,DMC21x3,DMC18x6,DMC18x2,DMC30010,DMC500x0,DMC52xx0\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "VE",
        "Usage": [
            {
                "Example": "VE n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_VEm"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "The VE command indicates to the controller that the end of the vector is coming up. This allows the controller to slow down through multiple segments, if\nrequired. VE is required to exit the vector mode gracefully (stop code, SC, 101).",
        "Arguments": {
            "Argument": {
                "0": "n",
                "1": "nan"
            },
            "Value": {
                "0": "0",
                "1": "?"
            },
            "Description": {
                "0": "Specify the end of a vector segment",
                "1": "Returns the length of the vector in counts"
            },
            "Notes": {
                "0": "Also occurs when n = 'null'",
                "1": "nan"
            }
        },
        "Remarks": "\nThe VE command will apply to the selected coordinate system, S or T. To select the coordinate system, use the command CAS or CAT.\n_VEm contains the length of the vector in counts for the specified coordinate system, S or T",
        "Examples": "\n'Galil DMC Code Example\n#vector\n;\n'      Vector Program Label\nVM\n \nAB\nAB\n;\n'        Specify plane of motion\nVA\n \n1000000\n;\n'   Vector Acceleration\nVD\n \n5000000\n;\n'   Vector Deceleration\nVS\n \n2000\n;\n'      Vector Speed\nVP\n \n1000\n,\n2000\n;\n' Vector Position\nVE\n;\n'           End Vector\nBG\n \nS\nS\n;\n'         Begin Sequence\nAM\n \nS\nS\n;\n'         Wait for Vector sequence to complete\nEN\n;\n'           End Program \nVE applies to DMC40x0,DMC42x0,DMC41x3,DMC21x3,DMC18x6,DMC18x2,DMC30010,DMC500x0,DMC52xx0\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "VF",
        "Usage": [
            {
                "Example": "VF n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_VF"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "The VF command formats the number of digits to be displayed when interrogating the controller. If a number exceeds the format, the number will be\ndisplayed as the maximum possible positive or negative number (i.e. 999.99, -999, $8000 or $7FF).",
        "Arguments": {
            "Argument": {
                "0": "n0",
                "1": "n1"
            },
            "Min": {
                "0": "-8",
                "1": "0"
            },
            "Max": {
                "0": "10",
                "1": "4"
            },
            "Default": {
                "0": "10",
                "1": "4"
            },
            "Resolution": {
                "0": "1",
                "1": "1"
            },
            "Description": {
                "0": "Specify the number of digits displayed\rbefore the decimal point",
                "1": "Specify the number of digits displayed\rafter the decimal point"
            },
            "Notes": {
                "0": "A negative value specifies hexadecimal\rformat, see Remarks",
                "1": "nan"
            }
        },
        "Remarks": "\nA negative n\n0\n specifies hexadecimal format. When in hexadecimal, the string will be preceded by a $ and Hex numbers are displayed as 2's\ncomplement with the first bit used to signify the sign.\nA positive n\n0\n specifies standard decimal format.\nA ? is only valid for querying n\n0\n. When queried, the value reported will be the value of the format for variables and arrrays specified by n\n0\n and n\n1\neg. VF 10,4 would respond to VF ? with 10.4\n_VF contains the value of the format for variables and arrays\nIf the number of digits set by n\n0\n is insufficient for representing the integer portion of a variable, the returned value will be the greatest number\nrepresentable by n\n0\n.n\n1\n. For example, if \nvar=123\n, and \nVF\n is 2.4, \nvar=?\n will return \n99.9999\n.",
        "Examples": "\n'Galil DMC Code Example\nVF\n \n5.3\n;\n' Sets 5 digits of integers and 3 digits after the decimal point\nVF\n \n8.0\n;\n' Sets 8 digits of integers and no fractions\nVF\n \n-\n4.0\n;\n' Specify hexadecimal format with 4 bytes to the left of the decimal \n'Galil DMC Code Example\n:\nVF \n8\n,\n4\n;\n'  set vf to 8 digits of integers and 4 digits of fraction\n:\nVF \n?\n?\n;\n'    query the value of VF\n8.4\n:\nMG \n_VF\n;\n'  query again\n8.4 \nVF applies to DMC500x0,DMC52xx0,DMC40x0,DMC42x0,DMC41x3,DMC30010,DMC21x3,DMC18x6,DMC18x2,RIO47xxx\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "VM",
        "Usage": [
            {
                "Example": "VM mm",
                "Explanation": "Argument is an axis mask"
            }
        ],
        "Operands": {
            "Operands": [
                "_VMm"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "The VM command enables the coordinated motion mode and specifies the plane of motion. This mode may be specified for motion on any set of two\naxes, including a combination of real and virtual axes for single-axis operation. The motion is specified by the instructions VP and CR, which specify linear\nand circular segments.\nUp to 511 segments may be given before the Begin Sequence (BGS or BGT) command. The number of available segments is queriable via the _LMm\noperand.",
        "Arguments": {
            "Argument": {
                "0": "m0",
                "1": "m1",
                "2": "nan",
                "3": "m2",
                "4": "nan"
            },
            "Min": {
                "0": "A",
                "1": "A",
                "2": "M",
                "3": "A",
                "4": "M"
            },
            "Max": {
                "0": "H",
                "1": "H",
                "2": "N",
                "3": "H",
                "4": "N"
            },
            "Default": {
                "0": "A",
                "1": "N/A",
                "2": "N/A",
                "3": "N/A",
                "4": "N/A"
            },
            "Resolution": {
                "0": "Axis",
                "1": "Axis",
                "2": "Axis",
                "3": "Axis",
                "4": "Axis"
            },
            "Description": {
                "0": "First axis specified for\rvector motion",
                "1": "Second axis specified for\rvector motion",
                "2": "Virtual axis specified for\rvector mode",
                "3": "Tangent axis specified for\rvector mode.",
                "4": "Virtual axis specified for\rvector mode."
            },
            "Notes": {
                "0": "nan",
                "1": "nan",
                "2": "Used when performing vector mode for a single real\raxis",
                "3": "m2 = null if tangent mode is not desired.",
                "4": "Used to disable the tangent function if already\renabled. Otherwise, use m2 = null."
            }
        },
        "Remarks": "\nSpecifying one axis for vector mode is useful for obtaining sinusoidal motion on 1 axis using the CR command.\nThe Vector End (VE) command must be given after the last segment. This allows the controller to properly decelerate.\nAdditional segments may be given during the motion when the buffer frees additional spaces for new segments.\nIt is the responsibility of the user to keep enough motion segments in the buffer to ensure continuous motion.\nThe first vector in a coordinated motion sequence defines the origin for that sequence. \nAll other vectors in the sequence are defined by their\nendpoints with respect to the start of the move sequence.\nThe VM command will apply to the selected coordinate system, S or T. To select the coordinate system, use the command CAS or CAT.\n_VMm contains instantaneous commanded vector velocity for the specified coordinate system, S or T.\nEnabling Vector Mode\n1\n. \nSpecify the desired coordinate system to use with the CA command. S is default.\n2\n. \nSpecify the vector plane to be used with the VMm0m1 command. If using tangent axis include that as the m2 parameter\n1\n. \nEG. for a AB vector plane with the D axis used as a tangent axis, issue VM ABD\n2\n. \nIf only the vector plane is desired for the above example, then issue VM AB\n3\n. \nSpecify vector speed with VS, vector acceleration with VA, and vector deceleration with VD\n4\n. \nSpecify vector segments with the VP command, or circular segments with the CR command\n5\n. \nWhen finished with the sequence of moves, issue VE\n6\n. \nIssue BGS to begin motion for the S coordinate system\n7\n. \nYou can now wait for motion to complete, issue additional segments as buffer space is cleared, or start a new move on the T coordinate plane by\nspecifying CAT and starting from step 2.",
        "Examples": "\n'Galil DMC Code Example\n#a\n;\n'            Program Label\nVM\n \nAB\nAB\n;\n'         Specify motion plane\nVP\n \n1000\n,\n2000\n;\n'  Specify vector position 1000,2000\nVP\n \n2000\n,\n4000\n;\n'  Specify vector position 2000,4000\nCR\n \n1000\n,\n0\n,\n360\n;\n' Specify arc\nVE\n;\n'            Vector end\nBG\n \nS\nS\n;\n'          Begin motion sequence\nAM\n \nS\nS\n;\n'          Wait for vector motion to complete\nEN\n;\n'            End Program \n'Galil DMC Code Example\n#a\n;\n'            Program Label\nVM\n \nAN\nAN\n;\n'         Specify motion plane\nVP\n \n1000\n,\n2000\n;\n'  Specify vector position 1000,2000\nVP\n \n2000\n,\n4000\n;\n'  Specify vector position 2000,4000\nCR\n \n1000\n,\n0\n,\n360\n;\n' Specify arc\nVE\n;\n'            Vector end\nBG\n \nS\nS\n;\n'          Begin motion sequence\nAM\n \nS\nS\n;\n'          Wait for vector motion to complete\nEN\n;\n'            End Program "
    },
    {
        "Command": "\u00a92017 Galil Motion Control. Corrections, Feedback: ",
        "Usage": [],
        "Operands": {},
        "Description": "",
        "Arguments": [],
        "Remarks": "",
        "Examples": ""
    },
    {
        "Command": "VP",
        "Usage": [
            {
                "Example": "VP n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_VPm"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "The VP command defines a vector move segment for the VM mode of motion. The VP command defines the target coordinates of a straight line segment\nin a 2 axis motion sequence. The units are in quadrature counts, and are a function of the elliptical scale factor set using the command ES. For three or\nmore axes in linear interpolation mode, use the LI command.",
        "Arguments": {
            "Argument": {
                "0": "n0",
                "1": "n1",
                "2": "o",
                "3": "nan"
            },
            "Min": {
                "0": "-\r2,147,483,648",
                "1": "-\r2,147,483,648",
                "2": "2",
                "3": "2"
            },
            "Max": {
                "0": "2,147,483,647",
                "1": "2,147,483,647",
                "2": "22,000,000",
                "3": "6,000,000"
            },
            "Default": {
                "0": "0",
                "1": "0",
                "2": "N/A",
                "3": "N/A"
            },
            "Resolution": {
                "0": "1",
                "1": "1",
                "2": "2",
                "3": "2"
            },
            "Description": {
                "0": "Specify the target position for the first vector axis",
                "1": "Specify the target postion for the second vector axis",
                "2": "Specifies the vector speed to be commanded at the\rbeginning of the linear segment. The controller will start\raccelerating or decelerating at the start of the sequence to\rthis speed.",
                "3": "Specifies the vector speed to be commanded at the\rbeginning of the linear segment. The controller will start\raccelerating or decelerating at the start of the sequence to\rthis speed."
            },
            "Notes": {
                "0": "See\rRemarks",
                "1": "See\rRemarks",
                "2": "For MT 1,-\r1,1.5, and -\r1.5.",
                "3": "For MT 2,-\r2,2.5, and -\r2.5."
            }
        },
        "Remarks": "\nn\n1\n-\n2,147,483,648\n2,147,483,647\n0\n1\nSpecify the target postion for the second vector axis\nSee\nRemarks\no\n2\n22,000,000\nN/A\n2\nSpecifies the vector speed to be commanded at the\nbeginning of the linear segment. The controller will start\naccelerating or decelerating at the start of the sequence to\nthis speed.\nFor MT 1,-\n1,1.5, and -\n1.5.\n2\n6,000,000\nN/A\n2\nSpecifies the vector speed to be commanded at the\nbeginning of the linear segment. The controller will start\naccelerating or decelerating at the start of the sequence to\nthis speed.\nFor MT 2,-\n2,2.5, and -\n2.5.\np\n2\n22,000,000\nN/A\n2\nSpecifies the vector speed to be achieved at the end of the\nlinear segment. The controller will decelerate or accelerate\nduring the segment and will reach the specified speed at the\nend of the segment.\nFor MT 1,-\n1,1.5, and -\n1.5.\n2\n6,000,000\nN/A\n2\nSpecifies the vector speed to be achieved at the end of the\nlinear segment. The controller will decelerate or accelerate\nduring the segment and will reach the specified speed at the\nend of the segment.\nFor MT 2,-\n2,2.5, and -\n2.5.\nArgument\nValue\nDescription\nNotes\no\n-1\nSpecifies vector speed to be set by Vector Speed Variable (VV command)\nSee VV command\nRemarks\nThe first vector in a coordinated motion sequence defines the origin for that sequence. All other vectors in the sequence are defined by their\nendpoints with respect to the start of the move sequence.\nVector moves are defined as absolute positions from the origin of the sequence.\nThe length of each vector segment must be limited to 8,388,607.\nThe VM command will apply to the selected coordinate system, S or T. To select the coordinate system, use the command CAS or CAT.\n_VPm where m = axis designator A,B,C,D,E,F,G or H and contains the absolute coordinate of the axes at the last intersection along the sequence.\nFor example, during the first motion segment, this instruction returns the coordinate at the start of the sequence.\nThe use of _VPm as an operand is valid in the linear mode, LM, and in the Vector mode, VM.",
        "Examples": "\n'Galil DMC Code Example\n#a\n;\n'           Program Label\nVM\n \nAB\nAB\n;\n'        Specify motion plane\nVP\n \n1000\n,\n2000\n;\n' Specify vector position 1000,2000"
    },
    {
        "Command": " ",
        "Usage": [],
        "Operands": {},
        "Description": "",
        "Arguments": [],
        "Remarks": "",
        "Examples": ""
    },
    {
        "Command": "VR",
        "Usage": [
            {
                "Example": "VR n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_VRm"
            ],
            "Explanation": "Operand holds the value last set by the command"
        },
        "Description": "The VR sets a ratio to be used as a multiplier of the current vector speed. The vector speed can be set by the command VS or the operators < and >\nused with CR, VP and LI commands. VR takes effect immediately and will ratio all the previous vector speed commands.",
        "Arguments": {
            "Argument": {
                "0": "n0",
                "1": "n1"
            },
            "Min": {
                "0": "0",
                "1": "0"
            },
            "Max": {
                "0": "10",
                "1": "10"
            },
            "Default": {
                "0": "1",
                "1": "1"
            },
            "Resolution": {
                "0": "1/65,536",
                "1": "1/65,536"
            },
            "Description": {
                "0": "Vector ratio specified for the S coordinate plane",
                "1": "Vector ratio specified for the T coordinate plane"
            },
            "Notes": {
                "0": "nan",
                "1": "nan"
            }
        },
        "Remarks": "\nVR doesn't ratio acceleration or deceleration, but the change in speed is accomplished by accelerating or decelerating at the rate specified by VA and\nVD.\nVR is useful for feedrate override, particularly when specifying the speed of individual segments using the operator '<' and '>'.\n_VRm contains the vector speed ratio of the specified coordinate system - where m = S or T.\n_VRS contains the vector speed ratio of the specified coordinate system",
        "Examples": "\n'Galil DMC Code Example\n#a\n;\n'            Vector Program \nVM\n \nAB\nAB\n;\n'         Vector Mode\nVP\n \n1000\n,\n2000\n;\n'  Vector Position  \nCR\n \n1000\n,\n0\n,\n360\n;\n' Specify Arc\nVE\n;\n'            End Sequence \nVS\n \n2000\n;\n'       Vector Speed  \nBG\n \nS\nS\n;\n'          Begin Sequence\nAM\n \nS\nS\n;\n'          After Motion\nJP \n#a\n;\n'          Repeat Move\n#speed\n;\n'        Speed Override\nVR \n(\n(\n@AN\n[\n[\n1\n]\n]\n*\n.1\n)\n)\n;\n' Read analog input compute ratio\nvr\n= \n= \n_VR\nS\nS\n;\n'       Store vector ratio in variable 'vr'\nJP \n#speed\n;\n'      Loop\nXQ \n#a\n,\n0\nXQ \n#speed\n,\n1\n;\n'    Execute task 0 and 1 simultaneously \nVR applies to DMC40x0,DMC42x0,DMC41x3,DMC21x3,DMC18x6,DMC18x2,DMC30010,DMC500x0,DMC52xx0\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "VS",
        "Usage": [
            {
                "Example": "VSm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "VS n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_VSm"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "The VS command specifies the speed of the vector in a coordinated motion sequence in either the LM or VM modes. This speed is in place when individual\nsegment speeds for VP, LI and CR are not specified.",
        "Arguments": {
            "Argument": {
                "0": "m",
                "1": "n"
            },
            "Min": {
                "0": "S",
                "1": "2"
            },
            "Max": {
                "0": "T",
                "1": "22,000,000"
            },
            "Default": {
                "0": "S",
                "1": "25,000"
            },
            "Resolution": {
                "0": "Axis",
                "1": "2"
            },
            "Description": {
                "0": "Coordinate plane to be specified",
                "1": "Vector speed applied to the coordinate system"
            },
            "Notes": {
                "0": "nan",
                "1": "nan"
            }
        },
        "Remarks": "\nVector speed can be attached to individual vector segments using the operators '<' and '>'. For more information, see description of VP, CR, and LI\ncommands. \nThe VV command allows for variables to be specified during vector segments.\nVector Speed can be calculated by taking the square root of the sum of the squared values of speed for each axis specified for vector or linear\ninterpolated motion.\n_VSm contains the vector speed of the specified coordinate system",
        "Examples": "\n'Galil DMC Code Example\n:\nVS\n \n2000\n;\n'    Define vector speed of S coordinate system\n:\nVS\n \n?\n?\n;\n'       Return vector speed of S coordinate system\n2000\n:\nVS applies to DMC40x0,DMC42x0,DMC41x3,DMC21x3,DMC18x6,DMC18x2,DMC30010,DMC500x0,DMC52xx0\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "VV",
        "Usage": [
            {
                "Example": "VVm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "VV n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_VVm"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "The VV command sets the speed of the vector variable in a coordinated motion sequence in either the LM or VM modes. The VV command is used to set\nthe \"o\" vector speed argument for segments that exist in the vector buffer for LI, CR and VP commands. By defining a vector segment begin speed as a\nnegative 1 (i.e. \"<-1\"), the controller will utilize the current vector variable speed as the segment is profiled from the buffer.",
        "Arguments": {
            "Argument": {
                "0": "m",
                "1": "n",
                "2": "nan"
            },
            "Min": {
                "0": "S",
                "1": "0",
                "2": "0"
            },
            "Max": {
                "0": "T",
                "1": "22,000,000",
                "2": "3,000,000"
            },
            "Default": {
                "0": "S",
                "1": "0",
                "2": "0"
            },
            "Resolution": {
                "0": "Axis",
                "1": "2",
                "2": "2"
            },
            "Description": {
                "0": "Coordinate plane to assign value",
                "1": "Variable vector speed",
                "2": "Variable vector speed"
            },
            "Notes": {
                "0": "nan",
                "1": "For MT 1,-1,1.5 and -1.5",
                "2": "For MT 2,-2,2.5 and -2.5"
            }
        },
        "Remarks": "\nVV command is useful when vector segments exist in the buffer that use the \"<\" and \">\" speed indicators for specific segment and corner speed\ncontrol and the host needs to be able to dynamically change the nominal return operating speed.\n_VVm contains the vector speed variable of the specified coordinate system",
        "Examples": "\n'Galil DMC Code Example\n:\nVV\nS\nS\n=\n=\n \n20000\n;\n'          Define vector speed variable to 20000 for the S coordinate system\n:\nVP \n1000\n,\n2000\n<\n-\n1\n>\n100\n;\n'  Define vector speed variable for specific segment.\n:\nVV\nS\nS\n= \n= \n?\n?\n20000\n:\nVV applies to DMC40x0,DMC42x0,DMC41x3,DMC18x6,DMC30010,DMC500x0,DMC52xx0\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "WH",
        "Usage": [
            {
                "Example": "WH",
                "Explanation": "Command takes no arguments"
            }
        ],
        "Operands": {
            "Operands": [
                "_WH"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "The WH command is used to identify the handle from which the command was received. This is useful for determining what interface or handle you are\nconnected to.",
        "Arguments": {
            "Communication Channel": {
                "0": "Main Serial Port",
                "1": "Ethernet Handle A",
                "2": "Ethernet Handle B",
                "3": "Ethernet Handle C",
                "4": "Ethernet Handle D",
                "5": "Ethernet Handle E",
                "6": "Ethernet Handle F",
                "7": "Ethernet Handle G"
            },
            "WH": {
                "0": "RS232",
                "1": "IHA",
                "2": "IHB",
                "3": "IHC",
                "4": "IHD",
                "5": "IHE",
                "6": "IHF",
                "7": "IHG"
            },
            "_WH": {
                "0": "-1",
                "1": "0",
                "2": "1",
                "3": "2",
                "4": "3",
                "5": "4",
                "6": "5",
                "7": "6"
            }
        },
        "Remarks": "\n_WH contains the numeric representation of the handle from which the command was received.\nThe following table lists the possible string returned by WH, and the numerical value returned by _WH\nCommunication Channel\nWH\n_WH\nMain Serial Port\nRS232\n-1\nEthernet Handle A\nIHA\n0\nEthernet Handle B\nIHB\n1\nEthernet Handle C\nIHC\n2\nEthernet Handle D\nIHD\n3\nEthernet Handle E\nIHE\n4\nEthernet Handle F\nIHF\n5\nEthernet Handle G\nIHG\n6\nEthernet Handle H\nIHH\n7",
        "Examples": "\n'Galil DMC Code Example\n:\nWH\n;\n' Request incoming handle identification\nIHC\n:\nMG \n_WH\n2 \nWH applies to DMC40x0,DMC42x0,DMC41x3,DMC21x3,RIO47xxx,DMC30010,DMC500x0,DMC52xx0\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "WT",
        "Usage": [
            {
                "Example": "WT n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {},
        "Description": "The WT command is a trippoint used to time events.When this command is executed, the controller will wait for the amout of time specified before\nexecuting the next command.\nThe amount of time in the WT command is specified to be either samples or milliseconds, depending on the second argument of WT",
        "Arguments": [],
        "Remarks": "\nIf n\n1\n=1 for WTn\n0\n,n\n1\n then the controller will wait for the number of samples specified before executing the next command.\nBy default, WT is specified in milliseconds. If n\n1\n is omitted, then n\n1\n = 0 is used and WT is timed in milliseconds",
        "Examples": "\n'Galil DMC Code Example\n'10 seconds after a move is complete, turn on a relay for 2 seconds\n#a\n;\n'         Program A\nPR\n \n50000\n;\n'   Position relative move\nBG \nA\nA\n;\n'        Begin the move\nAM \nA\nA\n;\n'        After the move is over\nWT\n \n10000\n;\n'   Wait 10 seconds\nSB\n \n1\n;\n'       Turn on relay (set output 1)\nWT\n \n2000\n;\n'    Wait 2 seconds\nCB \n1\n;\n'        Turn off relay (clear output 1)\nEN\n;\n'         End Program \nWT applies to DMC500x0,DMC52xx0,DMC40x0,DMC42x0,DMC41x3,DMC30010,DMC21x3,DMC18x6,DMC18x2,RIO47xxx\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "XQ",
        "Usage": [
            {
                "Example": "XQ n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_XQ0",
                "_XQ1",
                "_XQ2",
                "_XQ3",
                "_XQ4",
                "_XQ5",
                "_XQ6",
                "_XQ7"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "The XQ command begins execution of a program residing in the program memory of the controller. Execution will start at the label or line number\nspecified.\nUp to 8 programs may be executed simultaneously to perform multitasking.",
        "Arguments": {
            "_XQ2\r_XQ3\r_XQ4\r_XQ5\r_XQ6\r_XQ7": {},
            "Operand has special meaning, see Remarks": {}
        },
        "Remarks": "\n_XQn contains the current line number of execution for thread n, and -1 if thread t is not running.\nIf using ED to add code, you must exit ED mode before executing code.",
        "Examples": "\n'Galil DMC Code Example\nXQ\n \n#apple\n,\n0\n;\n'  Start execution at label apple, thread zero\nXQ\n \n#data\n,\n2\n;\n'   Start execution at label data, thread two\nXQ\n \n;\n'          Start execution at line 0 \nXQ applies to DMC500x0,DMC52xx0,DMC40x0,DMC42x0,DMC41x3,DMC30010,DMC21x3,DMC18x6,DMC18x2,RIO47xxx\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "YA",
        "Usage": [
            {
                "Example": "YAm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "YA n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_YAm"
            ],
            "Explanation": "Operand holds the value last set by the command"
        },
        "Description": "Specifies the microstepping resolution of the step drive for Stepper Position Maintenance (SPM) mode in microsteps per full motor step. Consult your drive\ndocumentation to determine its microstepping setting. See the table below for internal Galil stepper drives.\nWhen using the SDM-44040, YA will also configure the drive hardware for microstepping resolution. The SDM-44140 is \nnot\n configurable with YA.",
        "Arguments": {
            "Argument": {
                "0": "m",
                "1": "n"
            },
            "Min": {
                "0": "A",
                "1": "0"
            },
            "Max": {
                "0": "H",
                "1": "9,999"
            },
            "Default": {
                "0": "N/A",
                "1": "2"
            },
            "Resolution": {
                "0": "Axis",
                "1": "1"
            },
            "Description": {
                "0": "Axis to assign\rvalue",
                "1": "Drive\rresolution in\rstep\rcounts/motor\rstep for SPM\rmode"
            },
            "Notes": {
                "0": "nan",
                "1": "YA has special functionality for certain hardware configurations.\rSee the rest of the notes in this table."
            }
        },
        "Remarks": "\nYA Settings for Galil Stepper Drives\nStepper Drive Hardware\nYA Setting\nNotes\nSDM-44040\n1\nDrive set to single step (70% current max)\nSDM-44040\n2\nDrive set to half step\nSDM-44040\n4\nDrive set to quarter step\nSDM-44040\n16\nDrive set to 1/16 step\nSDM-44140\n64\nDrive fixed at 1/64 step",
        "Examples": "\n'Galil DMC Code Example\n'Set the step drive resolution for a 1/64 Microstepping Drive:\n:\nYA\n \n64\n,\n64\n,\n64\n,\n64\n:\n'Query the D axis value\n:\nMG \n_YA\nD\nD\n;\n'Response shows D axis step drive resolution\n \n64.0000\n:\n:\n'Galil DMC Code Example\n'Set the step drive resolution for a 1/256 Microstepping Drive:\n:\nYA\n \n256\n:\n'Query the A axis value\n:\nMG \n_YA\nA\nA\n;\n' Response shows A axis step drive resolution\n \n256.0000\n:\n:\nYA applies to DMC500x0,DMC40x0,DMC42x0,DMC41x3,DMC30010,DMC21x3,DMC18x6,DMC18x2\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "YB",
        "Usage": [
            {
                "Example": "YBm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "YB n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_YBm"
            ],
            "Explanation": "Operand holds the value last set by the command"
        },
        "Description": "The YB command specifies the resolution of the step motor, in full steps per full revolution, for Stepper Position Maintenance (SPM) mode.",
        "Arguments": {
            "Argument": {
                "0": "m",
                "1": "n"
            },
            "Min": {
                "0": "A",
                "1": "0"
            },
            "Max": {
                "0": "H",
                "1": "9,999"
            },
            "Default": {
                "0": "N/A",
                "1": "200"
            },
            "Resolution": {
                "0": "Axis",
                "1": "1"
            },
            "Description": {
                "0": "Axis to assign value",
                "1": "Motor resolution in full steps/revolution"
            },
            "Notes": {
                "0": "nan",
                "1": "nan"
            }
        },
        "Remarks": "\nThis command is only required if using SPM mode with stepper motors with an attached encoder.\nA 1.8 degree step motor is 200 steps/revolution.",
        "Examples": "\n'Galil DMC Code Example\n'Set the step motor resolution of the A axis for a 1.8 degree step motor:\n:\nYB\nA\nA\n= \n= \n200\n:\n'Query the A axis value\n:\nYB\nA\nA\n= \n= \n?\n?\n \n200 Response shows A axis step motor resolution \nYB applies to DMC500x0,DMC40x0,DMC42x0,DMC41x3,DMC30010,DMC21x3,DMC18x6,DMC18x2\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "YC",
        "Usage": [
            {
                "Example": "YCm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "YC n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_YCm"
            ],
            "Explanation": "Operand holds the value last set by the command"
        },
        "Description": "The YC command specifies the resolution of the encoder, in counts per revolution, for Stepper Position Maintenance (SPM) mode.",
        "Arguments": {
            "Argument": {
                "0": "m",
                "1": "n"
            },
            "Min": {
                "0": "A",
                "1": "0"
            },
            "Max": {
                "0": "H",
                "1": "32,766"
            },
            "Default": {
                "0": "N/A",
                "1": "4,000"
            },
            "Resolution": {
                "0": "Axis",
                "1": "1"
            },
            "Description": {
                "0": "Axis to assign value",
                "1": "Encoder resolution in counts/revolution"
            },
            "Notes": {
                "0": "nan",
                "1": "nan"
            }
        },
        "Remarks": "\nThis command is only required if using SPM mode with stepper motors with an attached encoder.",
        "Examples": "\n'Galil DMC Code Example\n'Set the encoder resolution of the A axis\n:\nYC\nA\nA\n= \n= \n2000\n:\n'Query the A axis value\n:\nYC\nA\nA\n= \n= \n?\n?\n \n2000 \n:\n'Response shows A axis encoder resolution \nYC applies to DMC500x0,DMC40x0,DMC42x0,DMC41x3,DMC30010,DMC21x3,DMC18x6,DMC18x2\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "YR",
        "Usage": [
            {
                "Example": "YRm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "YR n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {},
        "Description": "The YR command allows the user to correct for position error in Stepper Position Maintenance mode. This correction acts like an IP command, moving the\naxis or axes the specified quantity of step counts. YR will typically be used in conjunction with QS.",
        "Arguments": {
            "Argument": {
                "0": "m",
                "1": "n"
            },
            "Min": {
                "0": "A",
                "1": "-2,147,483,648"
            },
            "Max": {
                "0": "H",
                "1": "2,147,483,647"
            },
            "Default": {
                "0": "N/A",
                "1": "0"
            },
            "Resolution": {
                "0": "Axis",
                "1": "1"
            },
            "Description": {
                "0": "Axis to assign value",
                "1": "Number of step pulses to increment position by"
            },
            "Notes": {
                "0": "nan",
                "1": "nan"
            }
        },
        "Remarks": "\nUsers will typically use the value of QS to increment motor by the number of step pulses of error.\nEG. YRm = _QSm increments the specified axis by the error magnitude.\nThe sign of YR depends on the polarity of the position encoder\nIf the encoder increments when the stepper moves forward (increasing TD), the correction is YRm=_QSm. This is typical.\nIf the encoder decrements when the stepper moves forward, the correction is YRm= -_QSm. See CE to invert the polarity of the position\nencoder, if desired.",
        "Examples": "\n'Galil DMC Code Example\n'Query the error of the B axis:\n:\nQS \nB\nB\n \n253\n:\n'This shows 253 step counts of error\n:\n'Correct for the error:\n:\nYR\nB\nB\n= \n= \n_QS\nB\nB\n;\n' The motor moves _QS step counts to correct for the error\n:\n'and YS is set back to 1 \n'Galil DMC Code Example\n'Query the error of the A axis:\n:\nQS \nA\nA\n \n253\n:\n' This shows 253 step counts of error\n:\n'Correct for the error:\n:\nYR\nA\nA\n= \n= \n_QS\nA\nA\n;\n' The motor moves _QS step counts to correct for the error\n'and YS is set back to 1 \nYR applies to DMC500x0,DMC40x0,DMC42x0,DMC41x3,DMC30010,DMC21x3,DMC18x6,DMC18x2\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "YS",
        "Usage": [
            {
                "Example": "YSm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "YS n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_YSm"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "The YS command enables and disables the Stepper Position Maintenance Mode function. YS also reacts to excessive position error condition as defined by\nthe QS command.",
        "Arguments": {
            "Argument": {
                "0": "m",
                "1": "n"
            },
            "Min": {
                "0": "A",
                "1": "0"
            },
            "Max": {
                "0": "H",
                "1": "1"
            },
            "Default": {
                "0": "N/A",
                "1": "0"
            },
            "Resolution": {
                "0": "Axis",
                "1": "1"
            },
            "Description": {
                "0": "Axis to assign value",
                "1": "Setting of the SPM\rmode"
            },
            "Notes": {
                "0": "nan",
                "1": "n = 0 disables SPM mode, n = 1 Enables SPM mode. See\rRemarks"
            }
        },
        "Remarks": "\nRemarks\nBoth YSm = ? and _YSm contain the value of n. n is 1 when SPM mode is enabled and no error has occurred. If a position error has occured, n\nbecomes 2.\nIf n = 2, this indicates a position error condition defined as more than 3 full motor steps of position error.\nIssuing an n = 1 will clear the error\nPosition Error Limit\nMicrostep Setting (YA)\nError (QS) Limit\n1\n3\n2\n6\n16\n48\n64\n192\n256\n768",
        "Examples": "\n'Galil DMC Code Example\n'Enable the mode:\n:\nYS\nH\nH\n= \n= \n1\n:\n'Query the value:\n:\nYS\n*\n*\n= \n= \n?\n?\n \n0,0,0,0,0,0,0,1 Response shows H axis is enabled \n'Galil DMC Code Example\n'Enable the mode:\n:\nYS\nA\nA\n= \n= \n1\n:\n'Query the value:\n:\nYS\nA\nA\n= \n= \n?\n?\n \n1 Response shows A axis is enabled \nYS applies to DMC500x0,DMC40x0,DMC42x0,DMC41x3,DMC30010,DMC21x3,DMC18x6,DMC18x2\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "ZA",
        "Usage": [
            {
                "Example": "ZAm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "ZA n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_ZAm"
            ],
            "Explanation": "Operand holds the value last set by the command"
        },
        "Description": "ZA sets the user variables in the data record. The user variables (one per axis) are automatically sent as part of the status record from the controller to the\nhost computer. These variables provide a method for specific controller information to be passed to the host automatically.",
        "Arguments": {
            "Argument": {
                "0": "m",
                "1": "n"
            },
            "Min": {
                "0": "A",
                "1": "-2,147,483,648"
            },
            "Max": {
                "0": "H",
                "1": "2,147,483,647"
            },
            "Default": {
                "0": "N/A",
                "1": "0"
            },
            "Resolution": {
                "0": "Axis",
                "1": "1"
            },
            "Description": {
                "0": "Axis to assign value",
                "1": "Value of user variable for data record"
            },
            "Notes": {
                "0": "nan",
                "1": "nan"
            }
        },
        "Remarks": "\nn is an integer and can be a number, controller operand, variable, mathematical function, or string.\nOnly 4 bytes are available for n. Fractional values are not stored or sent via the data record",
        "Examples": "\n'Galil DMC Code Example\n#thread\nZA\nA\nA\n=\n=\n \nmyvar\n;\n'   constantly update ZA with variable myVar\nWT\n \n10\nJP \n#thread\n;\n'    run in an infinite loop \nZA applies to DMC40x0,DMC42x0,DMC41x3,DMC18x6,DMC30010,DMC500x0,DMC52xx0\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "ZN",
        "Usage": [
            {
                "Example": "ZNm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "ZN n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {},
        "Description": "ZN adds a negative open loop voltage to the controller?s command signal when the position error is negative.",
        "Arguments": {
            "Argument": {
                "0": "m",
                "1": "n"
            },
            "Min": {
                "0": "A",
                "1": "-9.9998"
            },
            "Max": {
                "0": "H",
                "1": "0"
            },
            "Default": {
                "0": "N/A",
                "1": "0"
            },
            "Resolution": {
                "0": "Axis",
                "1": "0.0003"
            },
            "Description": {
                "0": "Axis to assign value",
                "1": "Open loop voltage (Volts)"
            },
            "Notes": {
                "0": "nan",
                "1": "nan"
            }
        },
        "Remarks": "\nValid only for -NAN and -CER firmware",
        "Examples": "\n'Galil DMC Code Example\nZN\nA\nA\n= \n= \n-\n1\n;\n'set negative antifriction bias on A axis to -1 volt\nZP\nC\nC\n= \n= \n1\n;\n'set positive antifriction bias on C axis to 1 volt \nZN applies to CER,NAN\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "ZP",
        "Usage": [
            {
                "Example": "ZPm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "ZP n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {},
        "Description": "ZP adds a positive open loop voltage to the controller?s command signal when the position error is positive.",
        "Arguments": {
            "Argument": {
                "0": "m",
                "1": "n"
            },
            "Min": {
                "0": "A",
                "1": "0"
            },
            "Max": {
                "0": "H",
                "1": "9.9998"
            },
            "Default": {
                "0": "N/A",
                "1": "0"
            },
            "Resolution": {
                "0": "Axis",
                "1": "0.0003"
            },
            "Description": {
                "0": "Axis to assign value",
                "1": "Open loop voltage (Volts)"
            },
            "Notes": {
                "0": "nan",
                "1": "nan"
            }
        },
        "Remarks": "\nValid only for -NAN and -CER firmware",
        "Examples": "\n'Galil DMC Code Example\nZN\nA\nA\n= \n= \n-\n1\n;\n'set negative antifriction bias on A axis to -1 volt\nZP\nC\nC\n= \n= \n1\n;\n'set positive antifriction bias on C axis to 1 volt \nZP applies to CER,NAN\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    },
    {
        "Command": "ZS",
        "Usage": [
            {
                "Example": "ZS n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_ZS0",
                "_ZS1",
                "_ZS2",
                "_ZS3",
                "_ZS4",
                "_ZS5",
                "_ZS6",
                "_ZS7"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "The ZS command is used to clear the stack when finishing or leaving a subroutine. This command is used to avoid returning from an interrupt (either input\nor error). This turns the jump to subroutine into a jump. The status of the stack can be interrogated with the operand _ZS, see Remarks.",
        "Arguments": {
            "Argument": {
                "0": "n"
            },
            "Min": {
                "0": "0"
            },
            "Max": {
                "0": "1"
            },
            "Default": {
                "0": "0"
            },
            "Resolution": {
                "0": "1"
            },
            "Description": {
                "0": "Sets zero stack\roperation"
            },
            "Notes": {
                "0": "n = 0 clears the entire stack. n = 1 clears one level of the\rstack."
            }
        },
        "Remarks": "\nDo not use RI (Return from Interrupt) when using ZS.\nTo re-enable interrupts, you must use II command again.\nOperand Usage\n_ZSn contains the stack level for the specified thread where n = 0 to 7.\nThe response, an integer between zero and sixteen, indicates zero for beginning condition and sixteen for the deepest value.",
        "Examples": "\n'Galil DMC Code Example\n#a\n;\n'           Main Program\nII \n1\n;\n'          Input Interrupt on 1\n#b\n;\nJP\n \n#b\n;\nEN\n \n;\n' Loop\n#ININT\n#ININT\n;\n'       Input Interrupt\nMG \n\"INTERRUPT\"\n;\n'Print message\ns\n= \n= \n_ZS0\n;\n'        Interrogate stack\ns\n= \n= \n?\n?\n;\n'          Print stack\nZS\n;\n'           Zero stack\ns\n= \n= \n_ZS0\n;\n'        Interrogate stack\ns\n= \n= \n?\n?\n;\n'          Print stack\nEN\n;\n'           End \nZS applies to DMC500x0,DMC52xx0,DMC40x0,DMC42x0,DMC41x3,DMC30010,DMC21x3,DMC18x6,DMC18x2,RIO47xxx\n\u00a92017 Galil Motion Control. Corrections, Feedback: \ndocumentation@galilmc.com"
    }
]