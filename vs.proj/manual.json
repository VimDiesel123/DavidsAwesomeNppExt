[
    {
        "Command": "01/25/17",
        "Usage": [],
        "Operands": {},
        "Description": "",
        "Arguments": []
    },
    {
        "Command": "8",
        "Usage": [],
        "Operands": {},
        "Description": "",
        "Arguments": []
    },
    {
        "Command": "56",
        "Usage": [],
        "Operands": {},
        "Description": "",
        "Arguments": []
    },
    {
        "Command": "115",
        "Usage": [],
        "Operands": {},
        "Description": "",
        "Arguments": []
    },
    {
        "Command": "170",
        "Usage": [],
        "Operands": {},
        "Description": "",
        "Arguments": []
    },
    {
        "Command": "234",
        "Usage": [],
        "Operands": {},
        "Description": "",
        "Arguments": []
    },
    {
        "Command": "292",
        "Usage": [],
        "Operands": {},
        "Description": "",
        "Arguments": []
    },
    {
        "Command": "'",
        "Usage": [],
        "Operands": {},
        "Description": "The ' allows for a user to insert in a comment on a blank line or after a command following a semicolon \";\". See examples for valid uses of '.",
        "Arguments": []
    },
    {
        "Command": "-",
        "Usage": [
            {
                "Example": "variable = (value1 - value2)",
                "Explanation": "Performs an operation between two values or evaluated statements"
            }
        ],
        "Operands": {},
        "Description": "The subtraction operator takes any two values and returns a value equal to the difference of the arguments.",
        "Arguments": [
            {
                "Argument": "n0",
                "Description": "Value to subtract from"
            },
            {
                "Argument": "n1",
                "Description": "Value to subtract"
            }
        ]
    },
    {
        "Command": "#",
        "Usage": [],
        "Operands": {},
        "Description": "The # denotes the name of a program label, for example, \n#move\n. \nLabels are often used to implement subroutines or loops. \nLabels are either user-defined\nor are reserved names, called \"automatic subroutines\", that automatically execute when a particular event occurs.",
        "Arguments": []
    },
    {
        "Command": "#AMPERR",
        "Usage": [],
        "Operands": {},
        "Description": "Automatic subroutine used to run code when a fault occurs on a Galil amplifier. See the TA command and individual amplifier information in the controller\nuser manual.",
        "Arguments": []
    },
    {
        "Command": "#AUTO",
        "Usage": [],
        "Operands": {},
        "Description": "Defines the automatic entry point of embedded DMC code. When power is applied to the controller, or after the controller is reset, the program will\nautomatically begin executing at this label. When no host software is used with the controller, #AUTO is required to run an application program on the\ncontroller stand-alone.",
        "Arguments": []
    },
    {
        "Command": "#AUTOERR",
        "Usage": [],
        "Operands": {},
        "Description": "Automatic subroutine that runs code upon power up if the firmware detects errors. If the EEPROM is corrupted, #AUTOERR will run. The EEPROM is\nconsidered corrupt if the checksum calculated on the bytes in the EEPROM do not match the checksum written to the EEPROM.\nFor SSI and BiSS operation, #AUTOERR will also run if the time to acquire serial position data exceeds 90% of the hardware sample loop. This type of error\nis very rare and should never occur in normal operation.",
        "Arguments": []
    },
    {
        "Command": "#CMDERR",
        "Usage": [],
        "Operands": {},
        "Description": "Automatic subroutine that runs code when a DMC code error occurs. Without #CMDERR defined, if an error (see TC command) occurs in an application\nprogram running on the Galil controller, the program (and all threads) will stop.",
        "Arguments": []
    },
    {
        "Command": "#COMINT",
        "Usage": [],
        "Operands": {},
        "Description": "Automatic subroutine to provide interrupt driven communications from the serial port. #COMINT can be configured by the CI command to run either\nwhen any character is received, or when a carriage return is received over the com port. The auxiliary port is used if equipped.",
        "Arguments": []
    },
    {
        "Command": "#ININT",
        "Usage": [],
        "Operands": {},
        "Description": "Automatic subroutine that runs upon a state transition of digital inputs. #ININT is configured with II. #ININT runs in thread 0.",
        "Arguments": []
    },
    {
        "Command": "#LIMSWI",
        "Usage": [],
        "Operands": {},
        "Description": "Automatic sub for running user-defined code on a limit switch event. A limit switch event requires the following conditions.\n1\n. \nMotion profiling in the direction of the given limit. I.E. RPm increasing for forward switch, RPm decreasing for reverse switch.\n2\n. \nLimit switch toggles active. See CN for inverting the active sense of the limit swithes.\nWithout #LIMSWI defined, the controller will issue ST on the axis when its limit switch is tripped during motion in the direction of the switch. With #LIMSWI\ndefined, code is executed in addition to the stop.\nIn lieu of a controlled stop, the motor can turn off and coast stop in the event of a limit switch event. See OE for this feature.",
        "Arguments": []
    },
    {
        "Command": "#MCTIME",
        "Usage": [],
        "Operands": {},
        "Description": "Automatic sub used to run user-code if a Motion Complete (MC) trippoint times out. If the motor position does not reach or pass the target within the\nspecified timeout (TW), #MCTIME wil run if present.\nMC uses position from TP for servos, or TD for steppers.",
        "Arguments": []
    },
    {
        "Command": "#POSERR",
        "Usage": [],
        "Operands": {},
        "Description": "Automatic subroutine that runs user code when a position error event occurs. The factory default behavior of the Galil controller upon a position error\n(_TEn > _ERn) is to drive the error signal low only, turning on the red error LED. If OE is set to 1, the motor whose position error (TE) equals or exceeds\nits threshold (ER) will be turned off (MO). #POSERR is used to run code upon a position error, for example to notify a host computer.",
        "Arguments": []
    },
    {
        "Command": "#SERERR",
        "Usage": [],
        "Operands": {},
        "Description": "Automatic subroutine that allows user code to run when there is a serial encoder fault.\nThis subroutine is only used with controllers equipped with hardware featuring the -BiSS encoder upgrade.",
        "Arguments": []
    },
    {
        "Command": "#TCPERR",
        "Usage": [],
        "Operands": {},
        "Description": "Automatic subroutine which allows execution of user code when an TCP error event occurs. #TCPERR allows the application programmer to run code (for\nexample to reestablish the connection) when error code 123 occurs.",
        "Arguments": []
    },
    {
        "Command": "$",
        "Usage": [],
        "Operands": {},
        "Description": "The $ operator denotes that the following string is in hexadecimal notation.",
        "Arguments": []
    },
    {
        "Command": "%",
        "Usage": [
            {
                "Example": "variable = (value1 % value2)",
                "Explanation": "Performs an operation between two values or evaluated statements"
            }
        ],
        "Operands": {},
        "Description": "The % symbol is the modulo operator. It takes as arguments any two values, variables, array elements, operands, or At functions (@SIN[]) and returns a\nvalue equal to the modulo of the arguments.\nMathmatical operations are calculated left to right rather than multiplication and division calculations performed prior to addition and subraction.\nExample:\n1+2*3 = 9, not 7\nIt is recommended that parenthesis be used when more than one mathmatical operation is combined in one command.\nExample:\nvar = ((10*30)+(60/30));' \nevaluates as 302\nvar = 10*30+60/30;' \nevalutes as 12",
        "Arguments": [
            {
                "Argument": "n",
                "Description": "Value to use in modulo operation"
            }
        ]
    },
    {
        "Command": "&",
        "Usage": [],
        "Operands": {},
        "Description": "The & symbol is used to pass a variable by reference on the subroutine stack. When passed by reference, a change to the local-scope variable changes\nthe global value.",
        "Arguments": []
    },
    {
        "Command": "&",
        "Usage": [
            {
                "Example": "variable = (value1 & value2)",
                "Explanation": "Performs an operation between two values or evaluated statements"
            }
        ],
        "Operands": {},
        "Description": "The & symbol is the bitwise AND operator used with IF, JP, and JS decisions, and also to perform bitwise ANDING of values.",
        "Arguments": [
            {
                "Argument": "n",
                "Description": "Value to use with AND operator"
            }
        ]
    },
    {
        "Command": "( , )",
        "Usage": [],
        "Operands": {},
        "Description": "The parentheses denote the order of math and logical operations.",
        "Arguments": []
    },
    {
        "Command": "*",
        "Usage": [
            {
                "Example": "variable = (value1 * value2)",
                "Explanation": "Performs an operation between two values or evaluated statements"
            }
        ],
        "Operands": {},
        "Description": "The * symbol is the multiplication operator. It takes as arguments any two values, variables, array elements, operands, or At functions (@SIN[]) and\nreturns a value equal to the product of the arguments.",
        "Arguments": [
            {
                "Argument": "n",
                "Description": "Value to use in multiplication operation"
            }
        ]
    },
    {
        "Command": "/",
        "Usage": [
            {
                "Example": "variable = (value1 / value2)",
                "Explanation": "Performs an operation between two values or evaluated statements"
            }
        ],
        "Operands": {},
        "Description": "The / symbol is the division operator. It takes as arguments any two values, variables, array elements, operands, or At functions (@SIN[]) and returns a\nvalue equal to the quotient of the arguments.",
        "Arguments": [
            {
                "Argument": "n0",
                "Description": "Numerator of divide operation"
            },
            {
                "Argument": "n1",
                "Description": "Denominator of divide operation"
            }
        ]
    },
    {
        "Command": ";",
        "Usage": [],
        "Operands": {},
        "Description": "The semicolon operator allows multiple Galil commands to exist on a single line.",
        "Arguments": []
    },
    {
        "Command": "@ABS",
        "Usage": [
            {
                "Example": "variable = @ABS[value]",
                "Explanation": "Performs a function on a value or evaluated statement and returns a value"
            }
        ],
        "Operands": {},
        "Description": "The @ABS[] operation takes the absolute value of the given number. Returns the value if positive, and returns -1 times the value if negative.",
        "Arguments": [
            {
                "Argument": "n",
                "Description": "Number to display as absolute value"
            }
        ]
    },
    {
        "Command": "@ACOS",
        "Usage": [
            {
                "Example": "variable = @ACOS[value]",
                "Explanation": "Performs a function on a value or evaluated statement and returns a value"
            }
        ],
        "Operands": {},
        "Description": "The @ACOS operator returns in degrees the arc cosine of the given number.",
        "Arguments": [
            {
                "Argument": "n",
                "Description": "Value used for arc cosine operation"
            }
        ]
    },
    {
        "Command": "@AN",
        "Usage": [
            {
                "Example": "variable = @AN[value]",
                "Explanation": "Performs a function on a value or evaluated statement and returns a value"
            }
        ],
        "Operands": {},
        "Description": "The @AN[] operator returns the value of the given analog input in volts.",
        "Arguments": [
            {
                "Argument": "n",
                "Description": "Analog input to query"
            },
            {
                "Argument": "n",
                "Description": "Read Modbus slave analog input"
            }
        ]
    },
    {
        "Command": "@ASIN",
        "Usage": [
            {
                "Example": "variable = @ASIN[value]",
                "Explanation": "Performs a function on a value or evaluated statement and returns a value"
            }
        ],
        "Operands": {},
        "Description": "The @ASIN operator returns in degrees the arc sine of the given number.",
        "Arguments": [
            {
                "Argument": "n",
                "Description": "Value used for arc sine operation"
            }
        ]
    },
    {
        "Command": "@ATAN",
        "Usage": [
            {
                "Example": "variable = @ATAN[value]",
                "Explanation": "Performs a function on a value or evaluated statement and returns a value"
            }
        ],
        "Operands": {},
        "Description": "The @ATAN operator returns in degrees the arc tangent of the given number.",
        "Arguments": [
            {
                "Argument": "n",
                "Description": "Value used for arc tangent operation"
            }
        ]
    },
    {
        "Command": "@COM",
        "Usage": [
            {
                "Example": "variable = @COM[value]",
                "Explanation": "Performs a function on a value or evaluated statement and returns a value"
            }
        ],
        "Operands": {},
        "Description": "The @COM[] operation performs the bitwise complement (NOT) operation to the given number.",
        "Arguments": [
            {
                "Argument": "",
                "Description": "Value to perform bitwise complement"
            },
            {
                "Argument": "n",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "operation."
            }
        ]
    },
    {
        "Command": "@COS",
        "Usage": [
            {
                "Example": "variable = @COS[value]",
                "Explanation": "Performs a function on a value or evaluated statement and returns a value"
            }
        ],
        "Operands": {},
        "Description": "The @COS[] operation returns the cosine of the given angle in degrees",
        "Arguments": [
            {
                "Argument": "n",
                "Description": "Value in degrees to use for cosine operation"
            }
        ]
    },
    {
        "Command": "@FLOT",
        "Usage": [
            {
                "Example": "variable = @FLOT[value]",
                "Explanation": "Performs a function on a value or evaluated statement and returns a value"
            }
        ],
        "Operands": {},
        "Description": "The @FLOT operation returns the 32bit floating representation of a number",
        "Arguments": [
            {
                "Argument": "n",
                "Description": "Value to use for floating point conversion"
            }
        ]
    },
    {
        "Command": "@FRAC",
        "Usage": [
            {
                "Example": "variable = @FRAC[value]",
                "Explanation": "Performs a function on a value or evaluated statement and returns a value"
            }
        ],
        "Operands": {},
        "Description": "The @FRAC operation returns the fractional part of the given number",
        "Arguments": [
            {
                "Argument": "n",
                "Description": "Value to use in fractional operation"
            }
        ]
    },
    {
        "Command": "@IN",
        "Usage": [
            {
                "Example": "variable = @IN[value]",
                "Explanation": "Performs a function on a value or evaluated statement and returns a value"
            }
        ],
        "Operands": {},
        "Description": "The @IN operand returns the value of the given digital input (either 0 or 1).",
        "Arguments": [
            {
                "Argument": "n",
                "Description": "General input to query"
            },
            {
                "Argument": "",
                "Description": "Extended input to query"
            },
            {
                "Argument": "",
                "Description": "Aux encoder input to"
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "query"
            },
            {
                "Argument": "n",
                "Description": "Read Modbus slave bit"
            }
        ]
    },
    {
        "Command": "@INT",
        "Usage": [
            {
                "Example": "variable = @INT[value]",
                "Explanation": "Performs a function on a value or evaluated statement and returns a value"
            }
        ],
        "Operands": {},
        "Description": "The @INT operation returns the integer part of the given number. Note that the modulus operator can be implemented with @INT (see example below).",
        "Arguments": [
            {
                "Argument": "n",
                "Description": "Value to use in integer operation"
            }
        ]
    },
    {
        "Command": "@OUT",
        "Usage": [
            {
                "Example": "variable = @OUT[value]",
                "Explanation": "Performs a function on a value or evaluated statement and returns a value"
            }
        ],
        "Operands": {},
        "Description": "Returns the value of the given digital output (either 0 or 1)",
        "Arguments": [
            {
                "Argument": "n",
                "Description": "General output to query"
            },
            {
                "Argument": "",
                "Description": "Extended output to query"
            },
            {
                "Argument": "n",
                "Description": "Query Modbus slave bit"
            }
        ]
    },
    {
        "Command": "@REAL",
        "Usage": [
            {
                "Example": "variable = @REAL[value]",
                "Explanation": "Performs a function on a value or evaluated statement and returns a value"
            }
        ],
        "Operands": {},
        "Description": "The @REAL operation returns the Galil 4.2 equivalent of a 32 bit floating point number",
        "Arguments": [
            {
                "Argument": "n",
                "Description": "32 bit floating point number to convert to Galil 4.2 integer"
            }
        ]
    },
    {
        "Command": "@RND",
        "Usage": [
            {
                "Example": "variable = @RND[value]",
                "Explanation": "Performs a function on a value or evaluated statement and returns a value"
            }
        ],
        "Operands": {},
        "Description": "The @RND operation rounds the given number to the nearest integer.",
        "Arguments": [
            {
                "Argument": "n",
                "Description": "Value to use in rounding operation"
            }
        ]
    },
    {
        "Command": "@SIN",
        "Usage": [
            {
                "Example": "variable = @SIN[value]",
                "Explanation": "Performs a function on a value or evaluated statement and returns a value"
            }
        ],
        "Operands": {},
        "Description": "The @SIN[] operation returns the sine of the given angle in degrees",
        "Arguments": [
            {
                "Argument": "n",
                "Description": "Value in degrees to use for sine operation"
            }
        ]
    },
    {
        "Command": "@SQR",
        "Usage": [
            {
                "Example": "variable = @SQR[value]",
                "Explanation": "Performs a function on a value or evaluated statement and returns a value"
            }
        ],
        "Operands": {},
        "Description": "The @SQR operation takes the square root of the given number.",
        "Arguments": [
            {
                "Argument": "",
                "Description": "Value to use in square root"
            },
            {
                "Argument": "n",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "operation"
            }
        ]
    },
    {
        "Command": "@TAN",
        "Usage": [
            {
                "Example": "variable = @TAN[value]",
                "Explanation": "Performs a function on a value or evaluated statement and returns a value"
            }
        ],
        "Operands": {},
        "Description": "The @TAN[] operation returns the tangent of the given angle in degrees.",
        "Arguments": [
            {
                "Argument": "n",
                "Description": "Value in degrees to use for tangent operation"
            }
        ]
    },
    {
        "Command": "[,]",
        "Usage": [],
        "Operands": {},
        "Description": "The square brackets are used to denote the array index for an array, or to denote an array name.\nThey are also used to designate the argument to a function, such as @ABS[n].",
        "Arguments": []
    },
    {
        "Command": "^",
        "Usage": [],
        "Operands": {},
        "Description": "The ^ character provides local subroutine access for variables passed on the subroutine stack. Passing values on the stack is advanced DMC\nprogramming, and is recommended for experienced DMC programmers familiar with the concept of passing arguments by value and by reference.",
        "Arguments": []
    },
    {
        "Command": "^L^K",
        "Usage": [
            {
                "Example": "^L^K n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {},
        "Description": "Locks user access to the application program. When locked, the ED, UL, LS, and TR commands will give privilege error #106. The application program will\nstill run when locked. Once the program is unlocked, it will remain accessible until a lock command or a reset (with the locked condition burned in) occurs.",
        "Arguments": [
            {
                "Argument": "",
                "Description": "Controller password"
            },
            {
                "Argument": "str",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "string"
            },
            {
                "Argument": "",
                "Description": "Set lock/unlock state for"
            },
            {
                "Argument": "n",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "controller"
            }
        ]
    },
    {
        "Command": "^R^S",
        "Usage": [
            {
                "Example": "^R^S",
                "Explanation": "Command takes no arguments"
            }
        ],
        "Operands": {},
        "Description": "The Master Reset command resets the controller to factory default settings and erases EEPROM. A master reset can also be performed by installing a\njumper at the location labeled MRST and resetting the board (power cycle or pressing the reset button). Remove the jumper after this procedure.",
        "Arguments": []
    },
    {
        "Command": "^R^V",
        "Usage": [
            {
                "Example": "^R^V",
                "Explanation": "Command takes no arguments"
            }
        ],
        "Operands": {},
        "Description": "The Revision Information command causes the controller to return the firmware revision information.",
        "Arguments": []
    },
    {
        "Command": "_GP",
        "Usage": [
            {
                "Example": "variable= _GP",
                "Explanation": "Holds a value"
            }
        ],
        "Operands": {
            "Operands": [
                "_GPm"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "The _GP operand contains the value of the \"phase differential\" accumulated on the most current change in the gearing ratio between the master and the\nslave axes. The value does not update if the distance over which the slave will engage is set to 0 with the GD command.",
        "Arguments": [
            {
                "Argument": "m",
                "Description": "Axis of interest"
            }
        ]
    },
    {
        "Command": "_LF",
        "Usage": [
            {
                "Example": "variable= _LF",
                "Explanation": "Holds a value"
            }
        ],
        "Operands": {
            "Operands": [
                "_LFm"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "The _LF operand contains the state of the forward limit.",
        "Arguments": [
            {
                "Argument": "m",
                "Description": "Axis of forward limit switch"
            }
        ]
    },
    {
        "Command": "_LR",
        "Usage": [
            {
                "Example": "variable= _LR",
                "Explanation": "Holds a value"
            }
        ],
        "Operands": {
            "Operands": [
                "_LRm"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "The _LR operand contains the state of the reverse limit.",
        "Arguments": [
            {
                "Argument": "m",
                "Description": "Axis of reverse limit switch"
            }
        ]
    },
    {
        "Command": "|",
        "Usage": [
            {
                "Example": "variable = (value1 | value2)",
                "Explanation": "Performs an operation between two values or evaluated statements"
            }
        ],
        "Operands": {},
        "Description": "The | symbol is the bitwise OR operator used with IF, JP, and JS decisions, and also to perform bitwise ORING of values.",
        "Arguments": [
            {
                "Argument": "n",
                "Description": "Value to use with OR operator"
            }
        ]
    },
    {
        "Command": "~",
        "Usage": [],
        "Operands": {},
        "Description": "Variable axis designator. Each variable can be assigned an indivudal axis, a vector plane, or a virtual axis. Motion commands on the variable will then apply\nto the assigned axis.\nCommands supporting variable axes are denoted in this command reference with the following icon.\nVariable axis supported icon",
        "Arguments": []
    },
    {
        "Command": "+",
        "Usage": [
            {
                "Example": "variable = (value1 + value2)",
                "Explanation": "Performs an operation between two values or evaluated statements"
            }
        ],
        "Operands": {},
        "Description": "The + symbol is the addition operator. It takes as arguments any two values, variables, array elements, operands, or At functions (@SIN[]) and returns a\nvalue equal to the sum of the arguments.",
        "Arguments": [
            {
                "Argument": "n",
                "Description": "Value to use in addition operation"
            }
        ]
    },
    {
        "Command": "<",
        "Usage": [
            {
                "Example": "variable = (value1 < value2)",
                "Explanation": "Performs an operation between two values or evaluated statements"
            }
        ],
        "Operands": {},
        "Description": "\"Less than\" comparator for testing if one value is less than another. Comparators are used in mathematical expressions, IFs, and in conditional jumps. The\nresult is a boolean.\nComparators in DMC Code\nSymbol\nComparator\n<\nLess than\n>\nGreater than\n=\nEqual to\n<=\nLess than or equal to\n>=\nGreater than or equal to\n<>\nNot equal to",
        "Arguments": []
    },
    {
        "Command": "\u00a92017 Galil Motion Control. Corrections, Feedback: ",
        "Usage": [],
        "Operands": {},
        "Description": "",
        "Arguments": []
    },
    {
        "Command": "<=",
        "Usage": [
            {
                "Example": "variable = (value1 <= value2)",
                "Explanation": "Performs an operation between two values or evaluated statements"
            }
        ],
        "Operands": {},
        "Description": "\"Less than or Equal to\" comparator for testing if one value is less than or equal to another. Comparators are used in mathematical expressions, IFs, and in\nconditional jumps. The result is a boolean.\nComparators in DMC Code\nSymbol\nComparator\n<\nLess than\n>\nGreater than\n=\nEqual to\n<=\nLess than or equal to\n>=\nGreater than or equal to\n<>\nNot equal to",
        "Arguments": []
    },
    {
        "Command": "<=",
        "Usage": [],
        "Operands": {},
        "Description": "",
        "Arguments": []
    },
    {
        "Command": "<>",
        "Usage": [
            {
                "Example": "variable = (value1 <> value2)",
                "Explanation": "Performs an operation between two values or evaluated statements"
            }
        ],
        "Operands": {},
        "Description": "\"Not Equal to\" comparator for testing if one value is not equal to another. Comparators are used in mathematical expressions, IFs, and in conditional\njumps. The result is a boolean.\nComparators in DMC Code\nSymbol\nComparator\n<\nLess than\n>\nGreater than\n=\nEqual to\n<=\nLess than or equal to\n>=\nGreater than or equal to\n<>\nNot equal to",
        "Arguments": []
    },
    {
        "Command": "=",
        "Usage": [
            {
                "Example": "variable = (value1 = value2)",
                "Explanation": "Performs an operation between two values or evaluated statements"
            }
        ],
        "Operands": {},
        "Description": "\"Equal to\" comparator for testing if one value is equal to another. Comparators are used in mathematical expressions, IFs, and in conditional jumps. The\nresult is a boolean.\nComparators in DMC Code\nSymbol\nComparator\n<\nLess than\n>\nGreater than\n=\nEqual to\n<=\nLess than or equal to\n>=\nGreater than or equal to\n<>\nNot equal to",
        "Arguments": []
    },
    {
        "Command": "=",
        "Usage": [],
        "Operands": {},
        "Description": "The = operator is the assignment operator for the controller. The assignment operator is used for three reasons:\n(1) \nto define and initialize a variable (x = 0) before it is used\n(2) \nto assign a new value to a variable (x = 5)\n(3) \nto print a variable or array element (x= which is equivalent to MG x). MG is the preferred method of printing.",
        "Arguments": []
    },
    {
        "Command": ">",
        "Usage": [
            {
                "Example": "variable = (value1 > value2)",
                "Explanation": "Performs an operation between two values or evaluated statements"
            }
        ],
        "Operands": {},
        "Description": "\"Greater than\" comparator for testing if one value is greater than another. Comparators are used in mathematical expressions, IFs, and in conditional\njumps. The result is a boolean.\nComparators in DMC Code\nSymbol\nComparator\n<\nLess than\n>\nGreater than\n=\nEqual to\n<=\nLess than or equal to\n>=\nGreater than or equal to\n<>\nNot equal to",
        "Arguments": []
    },
    {
        "Command": "\u00a92017 Galil Motion Control. Corrections, Feedback: ",
        "Usage": [],
        "Operands": {},
        "Description": "",
        "Arguments": []
    },
    {
        "Command": ">=",
        "Usage": [
            {
                "Example": "variable = (value1 >= value2)",
                "Explanation": "Performs an operation between two values or evaluated statements"
            }
        ],
        "Operands": {},
        "Description": "\"Greater than or Equal to\" comparator for testing if one value is greater than or equal to another. Comparators are used in mathematical expressions, IFs,\nand in conditional jumps. The result is a boolean.\nComparators in DMC Code\nSymbol\nComparator\n<\nLess than\n>\nGreater than\n=\nEqual to\n<=\nLess than or equal to\n>=\nGreater than or equal to\n<>\nNot equal to",
        "Arguments": []
    },
    {
        "Command": ">=",
        "Usage": [],
        "Operands": {},
        "Description": "",
        "Arguments": []
    },
    {
        "Command": "AB",
        "Usage": [
            {
                "Example": "AB n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_AB"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "The AB command is a command to issue an abort to controller operation.\nAB (Abort) stops motion instantly without a controlled deceleration. If there is a program operating, AB can also be specified to abort the program and all\nrunning threads. The command, AB, will shut off the motors for any axis in which the off on error function is enabled (see command \"OE\").",
        "Arguments": [
            {
                "Argument": "n",
                "Description": "Abort motion and the program operation"
            },
            {
                "Argument": "",
                "Description": "Abort motion only"
            }
        ]
    },
    {
        "Command": "AC",
        "Usage": [
            {
                "Example": "ACm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "AC n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_ACm"
            ],
            "Explanation": "Operand holds the value last set by the command"
        },
        "Description": "The Acceleration command (AC) sets the linear acceleration rate of the motors for independent moves, such as PR, PA, and JG moves. The parameters\nwill be rounded down to the nearest factor of 1024 and have units of counts per second squared.",
        "Arguments": [
            {
                "Argument": "m",
                "Description": "Axis to assign value"
            },
            {
                "Argument": "",
                "Description": "Virtual axis to assign"
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "value"
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "n",
                "Description": "Acceleration rate"
            },
            {
                "Argument": "",
                "Description": ""
            }
        ]
    },
    {
        "Command": "AD",
        "Usage": [
            {
                "Example": "ADm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "AD n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {},
        "Description": "Trippoint to block command execution until a given distance is traversed. This is a profiled trippoint which means it depends on the motion profiler and not\nthe actual motor encoder. AD can only be used when there is commanded motion on the axis.",
        "Arguments": [
            {
                "Argument": "m",
                "Description": "Axis to assign value"
            },
            {
                "Argument": "n",
                "Description": "Distance of motion"
            }
        ]
    },
    {
        "Command": "AF",
        "Usage": [
            {
                "Example": "AFm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "AF n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_AFm"
            ],
            "Explanation": "Operand holds the value last set by the command"
        },
        "Description": "The AF command configures analog feedback mode for the PID filter.\nThe controller ADC can be used as position feedback for the axis control law. The analog input used for feedback is fixed and uses the input that\ncorresponds with the axis letter. For example, Analog input 1 is used for the A axis.\nSinusoidal feedback encoders are also configured by the AF command.",
        "Arguments": [
            {
                "Argument": "m",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "n",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": ""
            }
        ]
    },
    {
        "Command": "AG",
        "Usage": [
            {
                "Example": "AGm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "AG n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_AGm"
            ],
            "Explanation": "Operand holds the value last set by the command"
        },
        "Description": "The AG command sets the amplifier current/voltage gain for the internal amplifier. \nNote: some Galil internal amplifiers have fixed gains. \nPlease reference the\nmanual or data-sheet for more details.",
        "Arguments": [
            {
                "Argument": "m",
                "Description": "Axis to assign value"
            },
            {
                "Argument": "n",
                "Description": "Gain setting"
            }
        ]
    },
    {
        "Command": "AI",
        "Usage": [
            {
                "Example": "AI n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {},
        "Description": "The AI command is a trippoint used in motion programs to wait until after a specified input has changed state. This command can be configured such that\nthe controller will wait until the input goes high or the input goes low.",
        "Arguments": [
            {
                "Argument": "",
                "Description": "General input to use for"
            },
            {
                "Argument": "n",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "trippoint"
            },
            {
                "Argument": "",
                "Description": "Extended input to use for"
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "trippoint"
            },
            {
                "Argument": "",
                "Description": "Aux encoder input to use"
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "for trippoint"
            }
        ]
    },
    {
        "Command": "AL",
        "Usage": [
            {
                "Example": "AL mm",
                "Explanation": "Argument is an axis mask"
            }
        ],
        "Operands": {
            "Operands": [
                "_ALm"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "The AL command enables the latch function (high speed main or auxiliary position capture) of the controller. When the position latch is armed, the main\nor auxiliary encoder position will be captured upon a low going signal from the specified digital input.",
        "Arguments": [
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "mm",
                "Description": "Encoder to latch"
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "mm",
                "Description": "Encoder to latch"
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "Index input to"
            },
            {
                "Argument": "mm",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "trigger latch"
            }
        ]
    },
    {
        "Command": "JG",
        "Usage": [],
        "Operands": {},
        "Description": "",
        "Arguments": []
    },
    {
        "Command": "AM",
        "Usage": [
            {
                "Example": "AM mm",
                "Explanation": "Argument is an axis mask"
            }
        ],
        "Operands": {},
        "Description": "The AM command is a trippoint used to control the timing of events. This command will hold up execution of the following commands until the current\nmove on the specified axis or axes is completed. Any combination of axes or a motion sequence may be specified with the AM command.\nFor example, AM AB waits for motion on both the A and B axis to be complete. AM with no parameter specifies that motion on all axes to be complete.",
        "Arguments": [
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "mm",
                "Description": "Axes to wait for profiled motion to complete"
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "Vector plane to wait for profiled motion to complete"
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "Firmware Rev 1.2a and later. Virtual axis to wait for"
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "profiled motion to complete"
            }
        ]
    },
    {
        "Command": "AO",
        "Usage": [
            {
                "Example": "AO n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {},
        "Description": "The AO command sets the analog outputs on the Galil or for a Modbus Slave.",
        "Arguments": [
            {
                "Argument": "",
                "Description": "Set Analog Output on Modbus"
            },
            {
                "Argument": "n0",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "Slave"
            },
            {
                "Argument": "n1",
                "Description": "Analog Output Voltage"
            }
        ]
    },
    {
        "Command": "AP",
        "Usage": [
            {
                "Example": "APm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "AP n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {},
        "Description": "The AP command will hold up the execution of the following command until the actual motor position crosses the specified position. This trippoint does not\nrely on the profiler, but on actual encoder position.",
        "Arguments": [
            {
                "Argument": "m",
                "Description": "Axis to assign value"
            },
            {
                "Argument": "n",
                "Description": "Position trippoint value"
            }
        ]
    },
    {
        "Command": "AQ",
        "Usage": [
            {
                "Example": "AQ n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_AQ1",
                "_AQ2",
                "_AQ3",
                "_AQ4",
                "_AQ5",
                "_AQ6",
                "_AQ7",
                "_AQ8"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "The AQ command is used to set the behavior of the analog inputs. This command will set the analog range and operation for the specified input.",
        "Arguments": [
            {
                "Argument": "n0",
                "Description": "Analog input channel"
            },
            {
                "Argument": "n1",
                "Description": "Analog range setting"
            },
            {
                "Argument": "",
                "Description": "Specify analog input is differential"
            }
        ]
    },
    {
        "Command": "AR",
        "Usage": [
            {
                "Example": "ARm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "AR n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {},
        "Description": "The After Relative (AR) command is a trippoint used to control the timing of events. This command will hold up the execution of the following command\nuntil one of the following conditions have been met: \n1. \nThe commanded motor position crosses the specified relative distance from either the start of the move or the last AR or AD command. \n2. \nThe motion profiling on the axis is complete.\n3. \nIf in jog (JG) mode, the commanded motion is in the direction which moves away from the specified position.",
        "Arguments": [
            {
                "Argument": "m",
                "Description": "Axis to assign value"
            },
            {
                "Argument": "n",
                "Description": "Relative position for trippoint"
            }
        ]
    },
    {
        "Command": "AS",
        "Usage": [
            {
                "Example": "AS mm",
                "Explanation": "Argument is an axis mask"
            }
        ],
        "Operands": {},
        "Description": "The AS command is a trippoint that occurs when the generated motion profile has reached the specified speed. This command will hold up execution of\nthe following command until the commanded speed has been reached. The AS command will operate after either accelerating or decelerating.",
        "Arguments": [
            {
                "Argument": "mm",
                "Description": "Axes to use for AS trippoint"
            }
        ]
    },
    {
        "Command": "AT",
        "Usage": [
            {
                "Example": "AT n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {},
        "Description": "The AT command is a trippoint which is used to hold up execution of the next command until after the specified time has elapsed. The time is measured\nwith respect to a defined reference time. AT 0 establishes the initial reference. AT n specifies n msec from the reference. AT -n specifies n msec from the\nreference and establishes a new reference after the elapsed time period.\nAT n,1 specifies n samples from the reference. This is useful when TM is lowered and faster application loop times are required.",
        "Arguments": [
            {
                "Argument": "n0",
                "Description": "Specify a wait time for AT trippoint"
            },
            {
                "Argument": "n1",
                "Description": "Specify time in samples or msecs"
            }
        ]
    },
    {
        "Command": "AU",
        "Usage": [
            {
                "Example": "AUm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "AU n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_AUm"
            ],
            "Explanation": "Operand holds the value last set by the command"
        },
        "Description": "The AU command sets the amplifier current loop gain for internal amplifiers.\nFor Galil Trap amplifiers, the current loop is available in one of two settings. AU also sets the switching mode where available, Chopper vs. Inverter.\nFor Galil Sine amplifiers, the optimal current loop gain setting is determined by the bus voltage supplied to the amplifier and the phase to phase inductance\nof the motor. The table in the Arguments section provides ideal AU settings for common bus voltages and phase to phase inductance.",
        "Arguments": [
            {
                "Argument": "m",
                "Description": "Axis to assign value"
            },
            {
                "Argument": "",
                "Description": "Set amplifier current loop gain"
            },
            {
                "Argument": "n",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "setting"
            }
        ]
    },
    {
        "Command": "AU ",
        "Usage": [],
        "Operands": {},
        "Description": "",
        "Arguments": []
    },
    {
        "Command": "AV",
        "Usage": [
            {
                "Example": "AV n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_AVS",
                "_AVT"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "The AV command is used to hold up execution of the next command during coordinated moves such as VP,CR or LI. This trippoint occurs when the path\ndistance of a sequence reaches the specified value. The distance is measured from the start of a coordinated move sequence or from the last AV\ncommand.",
        "Arguments": [
            {
                "Argument": "n0",
                "Description": "Vector distance to be executed in the S coordinate system"
            },
            {
                "Argument": "n1",
                "Description": "Vector distance to be executed in the T coordinate system"
            }
        ]
    },
    {
        "Command": "BA",
        "Usage": [
            {
                "Example": "BA mm",
                "Explanation": "Argument is an axis mask"
            }
        ],
        "Operands": {
            "Operands": [
                "_BAm"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "BA is used to configure the controller for sinusoidal operation.\nGalil Sine Drive Use\nFor axes equipped with a Galil sine drive, BA is used to configure the axis for sinusoidal operation. In addition to BA, BM and BX or BZ must be used to\ninitialize the drive commutation. When using a Galil sine drive, one axis of control is required for one axis of drive. This is in contrast to the paired behavior\nbelow.\nThird-Party Sine Drives Requiring Dual Analog Inputs (Rare)\nIn rare cases, some third-party sinusoidal drives require two analog signals to perform commutation. In this case, the BA command configures the\ncontroller axes for sinusoidal commutation and reconfigures the controller to reflect the actual number of motors that can be controlled. In this\nconfiguration, each axis requires 2 motor command signals. The second motor command signals will always be associated with the highest axis on the\ncontroller. For example a 3 axis controller with A and C configured for sinusoidal commutation will require 5 command outputs (a 5 axis controller), where\nthe second outputs for A and C will be the D and E axes respectively.",
        "Arguments": [
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "mm",
                "Description": "Axes to initialize for sine amps"
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "Disable sine initialization for all"
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "axes."
            }
        ]
    },
    {
        "Command": "BB",
        "Usage": [
            {
                "Example": "BBm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "BB n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_BBm"
            ],
            "Explanation": "Operand holds the value last set by the command"
        },
        "Description": "The BB function describes the position offset between the Hall transition point and theta = 0, for a sinusoidally commutated motor. This is used when\ndoing hall initialization of a sine commutated drive.",
        "Arguments": [
            {
                "Argument": "m",
                "Description": "Axis to assign value"
            },
            {
                "Argument": "n",
                "Description": "Phase offset of hall sensors"
            }
        ]
    },
    {
        "Command": "BC",
        "Usage": [
            {
                "Example": "BC mm",
                "Explanation": "Argument is an axis mask"
            }
        ],
        "Operands": {
            "Operands": [
                "_BCm"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "The BC command is used to initialize a motor for sine commutation using hall sensors.\nThe function BC monitors the status of the Hall sensors of a sinusoidally commutated motor, and resets the commutation phase upon detecting the first\nhall sensor. This procedure replaces the estimated commutation phase value with a more precise value determined by the hall sensors.",
        "Arguments": [
            {
                "Argument": "mm",
                "Description": "Axes to initialize with hall commutation"
            }
        ]
    },
    {
        "Command": "BD",
        "Usage": [
            {
                "Example": "BDm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "BD n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_BDm"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "The BD command sets the commutation phase of a sinusoidally commutated motor manually. When using hall effect sensors, a more accurate value for\nthis parameter can be set by using the command, BC. This command should not be used except when the user is creating a specialized phase initialization\nprocedure.",
        "Arguments": [
            {
                "Argument": "m",
                "Description": "Axis to assign value"
            },
            {
                "Argument": "n",
                "Description": "Brushless motor angle in degrees"
            }
        ]
    },
    {
        "Command": "BG",
        "Usage": [
            {
                "Example": "BG mm",
                "Explanation": "Argument is an axis mask"
            }
        ],
        "Operands": {
            "Operands": [
                "_BGm"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "The BG command starts a motion on the specified axis or sequence.",
        "Arguments": [
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "mm",
                "Description": "Axes to begin motion"
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "Vector plane axes to"
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "begin motion"
            },
            {
                "Argument": "",
                "Description": "Virtual axis to begin"
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "motion"
            }
        ]
    },
    {
        "Command": "BI",
        "Usage": [
            {
                "Example": "BIm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "BI n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_BIm"
            ],
            "Explanation": "Operand holds the value last set by the command"
        },
        "Description": "The BI command is used to define the inputs which are used when Hall sensors have been wired for sinusoidally commutated motors. See the BC\ncommand for more information about initialization of sine amplifiers via hall inputs",
        "Arguments": [
            {
                "Argument": "m",
                "Description": "Axis to assign value"
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "Select starting General"
            },
            {
                "Argument": "n",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "input for hall sensor use"
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "Select starting extended"
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "input for hall sensor use"
            },
            {
                "Argument": "",
                "Description": "Select starting auxiliary"
            },
            {
                "Argument": "",
                "Description": "encoder input for hall"
            },
            {
                "Argument": "",
                "Description": "sensor use."
            }
        ]
    },
    {
        "Command": "BK",
        "Usage": [
            {
                "Example": "BK n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_BK"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "The BK command causes the controller to pause execution of the given thread at the given program line number. When that line is reached, program\nexecution halts before the line is executed, while all other threads continue running. After a breakpoint is encountered, a new breakpoint can be armed (to\ncontinue execution to the new breakpoint) or BK will resume program execution. The SL command can be used to single step from the breakpoint.",
        "Arguments": [
            {
                "Argument": "",
                "Description": "Line number to set"
            },
            {
                "Argument": "n0",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "breakpoint"
            },
            {
                "Argument": "",
                "Description": "Line number to set"
            },
            {
                "Argument": "n0",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "breakpoint"
            },
            {
                "Argument": "",
                "Description": "Thread number to set"
            },
            {
                "Argument": "n1",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "breakpoint"
            }
        ]
    },
    {
        "Command": "BL",
        "Usage": [
            {
                "Example": "BLm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "BL n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_BLm"
            ],
            "Explanation": "Operand holds the value last set by the command"
        },
        "Description": "The BL command sets the reverse software limit. If this limit is exceeded during motion, motion on that axis will decelerate to a stop. Reverse motion\nbeyond this limit is not permitted.",
        "Arguments": [
            {
                "Argument": "m",
                "Description": "Axis to assign value"
            },
            {
                "Argument": "n",
                "Description": "Position for reverse soft limit"
            }
        ]
    },
    {
        "Command": "BM",
        "Usage": [
            {
                "Example": "BMm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "BM n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_BMm"
            ],
            "Explanation": "Operand holds the value last set by the command"
        },
        "Description": "The BM command defines the length of the magnetic cycle in encoder counts.",
        "Arguments": [
            {
                "Argument": "m",
                "Description": "Axis to assign value"
            },
            {
                "Argument": "n",
                "Description": "Encoder counts per magnetic cycle"
            }
        ]
    },
    {
        "Command": "BN",
        "Usage": [
            {
                "Example": "BN",
                "Explanation": "Command takes no arguments"
            }
        ],
        "Operands": {
            "Operands": [
                "_BN"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "The BN command saves certain board parameters in non-volatile EEPROM memory. Once written to the memory, all parameters which can be burned will\npersist through a software reset (RS command), hardware reset (reset button) or power cycle. This command typically takes 1 second to execute and\nmust not be interrupted. The controller returns a colon (:) when the Burn is complete. All parameters which have been burned into memory can be\nrestored to their factory defaults through a master reset.\nThis command reference will denote comands that can and cannot be burned with BN with the following usage icons.\nBurnable with BN icon\nNot burnable with BN icon",
        "Arguments": []
    },
    {
        "Command": "BO",
        "Usage": [
            {
                "Example": "BOm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "BO n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_BOm"
            ],
            "Explanation": "Operand holds the value last set by the command"
        },
        "Description": "The BO command sets a fixed offset on the command signal for sinusoidally commutated motors. This may be used to offset any bias in the amplifier, or\ncan be used for phase initialization.",
        "Arguments": [
            {
                "Argument": "m",
                "Description": "Axis to assign value"
            },
            {
                "Argument": "n",
                "Description": "Offset applied to DAC output in volts"
            }
        ]
    },
    {
        "Command": "BP",
        "Usage": [
            {
                "Example": "BP",
                "Explanation": "Command takes no arguments"
            }
        ],
        "Operands": {},
        "Description": "The BP command saves the application program in non-volatile EEPROM memory. This command may take several seconds to execute and must not be\ninterrupted. The controller returns a : when the Burn is complete.",
        "Arguments": []
    },
    {
        "Command": "BQ",
        "Usage": [
            {
                "Example": "BQm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "BQ n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_BQm"
            ],
            "Explanation": "Operand holds the value last set by the command"
        },
        "Description": "The BQ command sets a fixed offset on the command signal for sinusoidally commutated motors when using an internal Galil sine drive. This may be used\nto offset any bias in the amplifier, or can be used for phase initialization.",
        "Arguments": [
            {
                "Argument": "m",
                "Description": "Axis to assign value"
            },
            {
                "Argument": "n",
                "Description": "Offset applied to DAC output in volts."
            }
        ]
    },
    {
        "Command": "BR",
        "Usage": [
            {
                "Example": "BRm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "BR n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_BRm"
            ],
            "Explanation": "Operand holds the value last set by the command"
        },
        "Description": "The BR command configures the motor configuration and type for an axis.\nThe BR command is used with internal Galil amplifiers to enable which axes will be set as brush-type servos or to configure the firmware to use external\ndrives instead of the internal channel.",
        "Arguments": [
            {
                "Argument": "m",
                "Description": "Axis to assign value"
            },
            {
                "Argument": "Argument",
                "Description": ""
            },
            {
                "Argument": "n",
                "Description": "Use for external drives with internal sine amps -D3640, -D3540 and -D3520"
            },
            {
                "Argument": "",
                "Description": "Default"
            },
            {
                "Argument": "",
                "Description": "Use for axes with external drives on -D3040 and -D3020 to avoid hall errors"
            }
        ]
    },
    {
        "Command": "BT",
        "Usage": [
            {
                "Example": "BT mm",
                "Explanation": "Argument is an axis mask"
            }
        ],
        "Operands": {
            "Operands": [
                "_BTm"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "The BT command begins PVT motion on the specified axes. All axes specified will begin at the same time. For more details on PVT mode see the user\nmanual.",
        "Arguments": []
    },
    {
        "Command": "BV",
        "Usage": [
            {
                "Example": "BV",
                "Explanation": "Command takes no arguments"
            }
        ],
        "Operands": {
            "Operands": [
                "_BV"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "The BV command saves the controller variables and arrays in non-volatile EEPROM memory. This command typically takes up to 2 seconds to execute\nand must not be interrupted. The controller returns a : when the Burn is complete.",
        "Arguments": []
    },
    {
        "Command": "BW",
        "Usage": [
            {
                "Example": "BWm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "BW n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_BWm"
            ],
            "Explanation": "Operand holds the value last set by the command"
        },
        "Description": "The BW command sets the delay between when the brake is turned on and when the amp is turned off. When the controller goes into a motor-off (MO)\nstate, this is the time (in samples) between when the brake digital output changes state and when the amp enable digital output changes state. The brake\nis actuated immediately upon MO and the delay is to account for the time it takes for the brake to engage mechanically once it is energized electrically. The\nbrake is released immediately upon SH.\nBrake Wait Timing\nBrake Wait Timing Diagram",
        "Arguments": [
            {
                "Argument": "m",
                "Description": "Axis to assign value"
            },
            {
                "Argument": "n",
                "Description": "Specify brake wait time, in samples."
            }
        ]
    },
    {
        "Command": "BX",
        "Usage": [
            {
                "Example": "BXm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "BX n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_BXm"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "The BX command uses a method to initialize an axis with limited movement of the hardware. The BX uses a limited motion algorithm to determine the\nproper location of the motor within the magnetic cycle. It is expected to move no greater than 10 degrees of the magnetic cycle. The last stage of the BX\ncommand will lock the motor into the nearest 15 degree increment.",
        "Arguments": [
            {
                "Argument": "m",
                "Description": "Axis to assign value"
            },
            {
                "Argument": "",
                "Description": "Voltage to be applied during amp"
            },
            {
                "Argument": "n",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "initialization"
            },
            {
                "Argument": "",
                "Description": "Number of samples for BX to hold final"
            },
            {
                "Argument": "o",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "torque pulse."
            }
        ]
    },
    {
        "Command": "~a",
        "Usage": [],
        "Operands": {},
        "Description": "",
        "Arguments": []
    },
    {
        "Command": "BZ",
        "Usage": [
            {
                "Example": "BZm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "BZ n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_BZm"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "The BZ command is used to initialize axes which use sinusoidal commutation. To do this, the command drives the motor to two different magnetic\npositions and sets the magnetic position.",
        "Arguments": [
            {
                "Argument": "m",
                "Description": "Axis to assign value"
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "n",
                "Description": "Voltage to be applied during amp initialization"
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "Time in milliseconds for BZ to hold at second"
            },
            {
                "Argument": "o",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "magnetic position"
            },
            {
                "Argument": "",
                "Description": "Time in milliseconds for BZ to hold at first"
            },
            {
                "Argument": "p",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "magnetic position"
            }
        ]
    },
    {
        "Command": ". ",
        "Usage": [],
        "Operands": {},
        "Description": "",
        "Arguments": []
    },
    {
        "Command": "CA",
        "Usage": [
            {
                "Example": "CA mm",
                "Explanation": "Argument is an axis mask"
            }
        ],
        "Operands": {
            "Operands": [
                "_CAm"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "The CA command specifies the coordinate system to apply proceeding vector commands. The following commands apply to the active coordinate\nsystem as set by the CA command:\nCR\nES\nLE\nLI\nLM\nTN\nVE\nVM\nVP",
        "Arguments": []
    },
    {
        "Command": "CB",
        "Usage": [
            {
                "Example": "CB n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {},
        "Description": "The CB command clears a particular digital output. The SB and CB (Clear Bit) instructions can be used to control the state of output lines.",
        "Arguments": [
            {
                "Argument": "n",
                "Description": "General output bit to be cleared"
            },
            {
                "Argument": "",
                "Description": "Extended I/O output bit to be"
            },
            {
                "Argument": "n",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "cleared"
            },
            {
                "Argument": "n",
                "Description": "Clear Modbus slave bit"
            }
        ]
    },
    {
        "Command": "CC",
        "Usage": [
            {
                "Example": "CC n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {},
        "Description": "The CC command configures baud rate, handshake, mode, and echo for the AUX SERIAL PORT, referred to as Port 2. This command must be given\nbefore using the MG, or CI commands with Port 2.",
        "Arguments": [
            {
                "Argument": "n0",
                "Description": "Baud rate"
            },
            {
                "Argument": "n1",
                "Description": "Handshake setting"
            },
            {
                "Argument": "n2",
                "Description": "Enable aux serial port"
            },
            {
                "Argument": "n3",
                "Description": "Echo setting"
            }
        ]
    },
    {
        "Command": "CD",
        "Usage": [
            {
                "Example": "CDm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "CD n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {},
        "Description": "The CD command specifies the incremental position on contour axes. This command is used only in the Contour Mode (CM). The incremental position will\nbe executed over the time period specified by the command DT (ranging from 2 to 256 servo updates)",
        "Arguments": [
            {
                "Argument": "",
                "Description": "Axis to assign"
            },
            {
                "Argument": "m",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "value"
            },
            {
                "Argument": "",
                "Description": "Contour position"
            },
            {
                "Argument": "n",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "segment"
            },
            {
                "Argument": "",
                "Description": "Time override"
            },
            {
                "Argument": "t",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "option"
            },
            {
                "Argument": "",
                "Description": "Time override"
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "option"
            },
            {
                "Argument": "",
                "Description": "Time override"
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "option"
            }
        ]
    },
    {
        "Command": "CE",
        "Usage": [
            {
                "Example": "CEm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "CE n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_CEm"
            ],
            "Explanation": "Operand holds the value last set by the command"
        },
        "Description": "The CE command configures the encoder to quadrature type or pulse and direction type. It also allows inverting the polarity of the encoders which\nreverses the direction of the feedback. The configuration applies independently to the main axes encoders and the auxiliary encoders.",
        "Arguments": [
            {
                "Argument": "",
                "Description": "Axis to assign"
            },
            {
                "Argument": "m",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "value"
            },
            {
                "Argument": "",
                "Description": "Encoder"
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "n",
                "Description": "configuration"
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "setting"
            }
        ]
    },
    {
        "Command": "CF",
        "Usage": [
            {
                "Example": "CF mm",
                "Explanation": "Argument is an axis mask"
            }
        ],
        "Operands": {
            "Operands": [
                "_CF"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "The CF command sets the port for unsolicited messages. The CF command directs the controller to send unsolicited responses to the Main or Aux Serial\nPort (If equipped), or to an Ethernet handle. An unsolicited message is data generated by the controller which is not in response to a command sent by\nthe host.",
        "Arguments": [
            {
                "Argument": "",
                "Description": "Ethernet Handle to assign as unsolicited"
            },
            {
                "Argument": "m",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "message port"
            },
            {
                "Argument": "",
                "Description": "Set the port that sent the command as the"
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "unsolicited message port"
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "Set serial port as unsolicited message port"
            },
            {
                "Argument": "",
                "Description": ""
            }
        ]
    },
    {
        "Command": "CI",
        "Usage": [
            {
                "Example": "CI n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {},
        "Description": "The CI command configures program interrupts based on input of characters over the communication port.\nThe command configures a program interrupt based on characters received on communications port 2, the AUX serial port. An interrupt causes program\nflow to jump to the #COMINT subroutine. If multiple program threads are used, the #COMINT subroutine runs in thread 0 and the remaining threads\ncontinue to run without interruption. The characters received can be accessed via the operands P2CH, P2ST, P2NM, P2CD.",
        "Arguments": [
            {
                "Argument": "n",
                "Description": "Clear interrupt data buffer"
            },
            {
                "Argument": "",
                "Description": "Do not interrupt"
            },
            {
                "Argument": "",
                "Description": "Interrupt on carriage return"
            },
            {
                "Argument": "",
                "Description": "Interrupt on any character"
            }
        ]
    },
    {
        "Command": "CM",
        "Usage": [
            {
                "Example": "CM mm",
                "Explanation": "Argument is an axis mask"
            }
        ],
        "Operands": {
            "Operands": [
                "_CM"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "Contour Mode is initiated by the instruction CM. This mode allows the generation of an arbitrary motion trajectory with any of the axes. The CD command\nspecifies the position interval between subsequent contour segments. The DT command specifies the time interval between subsequent contour\nsegments.",
        "Arguments": [
            {
                "Argument": "mm",
                "Description": "Axes to initialize to Contour mode"
            }
        ]
    },
    {
        "Command": "CN",
        "Usage": [
            {
                "Example": "CN n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_CN0",
                "_CN1",
                "_CN2",
                "_CN3",
                "_CN4"
            ],
            "Explanation": "Operand holds the value last set by the command"
        },
        "Description": "The CN command configures the polarity of the limit switches, home switches, latch inputs, the selective abort function, and the program termination\nbehavior of the abort input.",
        "Arguments": [
            {
                "Argument": "n0",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "n1",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "n2",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "n3",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "n4",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": ""
            }
        ]
    },
    {
        "Command": "CO",
        "Usage": [
            {
                "Example": "CO n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_CO"
            ],
            "Explanation": "Operand holds the value last set by the command"
        },
        "Description": "The CO command configures which banks are inputs and which are outputs on the extended I/O. The extended I/O points of the controller can be\nconfigured in banks of 8.\nThe extended I/O is denoted as bits 17-48 and banks 2-5.",
        "Arguments": [
            {
                "Argument": "",
                "Description": "Bitmask to configure extended IO as"
            },
            {
                "Argument": "n",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "inputs or outputs"
            }
        ]
    },
    {
        "Command": "CP",
        "Usage": [
            {
                "Example": "CPm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "CP n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_CPm"
            ],
            "Explanation": "Operand holds the value last set by the command"
        },
        "Description": "The CP command sets the deadband within which the motor is shut off. After a move is complete (_BGn = 0) and the absolute value of the position error\nTE becomes less than the dead band CP, the motor is turned off. SH must be issued before further motion can be commanded. CT can be used to\nincrement the integrator limit to ensure that the motor reaches the dead band.",
        "Arguments": [
            {
                "Argument": "m",
                "Description": "Axis to assign value"
            },
            {
                "Argument": "n",
                "Description": "Set the position deadband for motor off."
            }
        ]
    },
    {
        "Command": "CR",
        "Usage": [
            {
                "Example": "CR n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {},
        "Description": "When using the vector mode (VM), the CR command specifies a 2-dimensional arc segment. The VE command must be used to denote the end of the\nmotion sequence after all CR and VP segments are specified. The BG (Begin Sequence) command is used to start the motion sequence. Parameters for\nradius, starting angle and traverse angle must all be entered for each CR command.",
        "Arguments": [
            {
                "Argument": "n0",
                "Description": ""
            },
            {
                "Argument": "n1",
                "Description": ""
            },
            {
                "Argument": "n2",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "o",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "p",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "Argument",
                "Description": ""
            },
            {
                "Argument": "o",
                "Description": ""
            }
        ]
    },
    {
        "Command": "VM ",
        "Usage": [],
        "Operands": {},
        "Description": "",
        "Arguments": []
    },
    {
        "Command": "CS",
        "Usage": [
            {
                "Example": "CS mm",
                "Explanation": "Argument is an axis mask"
            }
        ],
        "Operands": {
            "Operands": [
                "_CSm"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "The CS command will remove VP, CR or LI commands stored in a motion sequence for a coordinated axis. After a sequence has been executed, the CS\ncommand is not necessary to put in a new sequence. This command is useful when you have incorrectly specified VP, CR or LI commands.",
        "Arguments": [
            {
                "Argument": "m",
                "Description": "Coordinate plane specified to clear buffer"
            }
        ]
    },
    {
        "Command": "CW",
        "Usage": [
            {
                "Example": "CW n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {},
        "Description": "The CW command will return the copyright information when the argument, n, is 0 or is omitted. Otherwise, the CW command is used as a\ncommunications enhancement for use by the Galil terminal software programs. When turned on, the most significant bit of unsolicited ASCII characters is\nset to 1. Unsolicited ASCII characters are characters that are returned from a program running on the controller (usually from the MG command). This\ncommand does not affect solicited characters, which are characters that are returned as a response to a command sent from a host PC (e.g. TP).",
        "Arguments": [
            {
                "Argument": "n0",
                "Description": "Causes controller to return a copyright information string"
            },
            {
                "Argument": "",
                "Description": "Controller will set the MSB of unsolicited message characters"
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "Controller will not set the MSB of unsolicited message characters"
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "Controller will pause program execution when hardware handshaking"
            },
            {
                "Argument": "n1",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "disables character transmissions"
            },
            {
                "Argument": "",
                "Description": "Controller will continue program execution when hardware"
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "handshaking disables character transmissions"
            }
        ]
    },
    {
        "Command": "DA",
        "Usage": [
            {
                "Example": "DA n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_DAm"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "The DA command frees the array and/or variable memory space. In this command, more than one array or variable can be specified for memory de-\nallocation. Different arrays and variables are separated by comma when specified in one command.",
        "Arguments": [
            {
                "Argument": "str",
                "Description": "Array name to deallocate"
            },
            {
                "Argument": "",
                "Description": "Variable name to deallocate"
            }
        ]
    },
    {
        "Command": "DB",
        "Usage": [
            {
                "Example": "DBm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "DB n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_DBm"
            ],
            "Explanation": "Operand holds the value last set by the command"
        },
        "Description": "When the absolute value of the error TE is greater than DB, the torque output TT will be set back to normal (reflecting KP, KD, KI, ZP, and ZN). This is\nused to avoid oscillation when holding position.",
        "Arguments": [
            {
                "Argument": "m",
                "Description": "Axis to assign value"
            },
            {
                "Argument": "n",
                "Description": "Position setpoint for PID deadband"
            }
        ]
    },
    {
        "Command": "DC",
        "Usage": [
            {
                "Example": "DCm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "DC n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_DCm"
            ],
            "Explanation": "Operand holds the value last set by the command"
        },
        "Description": "The Deceleration command (DC) sets the linear deceleration rate of the motors for independent moves such as PR, PA, and JG moves. The parameters\nwill be rounded down to the nearest factor of 1024 and have units of counts per second squared.",
        "Arguments": [
            {
                "Argument": "m",
                "Description": "Axis to assign value"
            },
            {
                "Argument": "",
                "Description": "Virtual axis to assign value"
            },
            {
                "Argument": "n",
                "Description": "Deceleration rate"
            }
        ]
    },
    {
        "Command": "DE",
        "Usage": [
            {
                "Example": "DEm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "DE n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_DEm"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "The DE command defines the position of the auxiliary (dual) encoders.\nDual encoders are useful when you need an encoder on the motor and on the load. The encoder on the load is typically the auxiliary encoder and is used\nto verify the true load position. Any error in load position is used to correct the motor position.",
        "Arguments": [
            {
                "Argument": "m",
                "Description": "Axis to assign value"
            },
            {
                "Argument": "n",
                "Description": "Position set for auxiliary encoders"
            },
            {
                "Argument": "",
                "Description": "Position set for main encoders"
            }
        ]
    },
    {
        "Command": "DF",
        "Usage": [
            {
                "Example": "DFm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "DF n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_DFm"
            ],
            "Explanation": "Operand holds the value last set by the command"
        },
        "Description": "The DF command allows configuration of BiSS or SSI feedback in Dual Loop mode as the load encoder. For users wishing to operate with SSI or BiSS in\nDual Loop mode (DV), the DF command can be used to configure a load-side serial encoder and a motor-side incremental encoder with DV1.",
        "Arguments": [
            {
                "Argument": "n",
                "Description": "Disable feedback swap"
            },
            {
                "Argument": "",
                "Description": "Enable feedback swap"
            }
        ]
    },
    {
        "Command": "DH",
        "Usage": [
            {
                "Example": "DH n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {},
        "Description": "The DH command configures the DHCP or BOOT-P functionality on the controller for Server IP addressing.",
        "Arguments": [
            {
                "Argument": "n",
                "Description": "Enable BOOT-P and disable DHCP"
            },
            {
                "Argument": "",
                "Description": "Disable BOOT-P and enable DHCP"
            }
        ]
    },
    {
        "Command": "DL",
        "Usage": [
            {
                "Example": "DL n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {},
        "Description": "The DL command transfers a data file from the host computer to the controller. Instructions in the file will be accepted as a data stream without line\nnumbers. The file is terminated using <control> Z, <control> Q, <control> D, or \\.",
        "Arguments": [
            {
                "Argument": "",
                "Description": "Line number to begin program"
            },
            {
                "Argument": "n",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "download"
            },
            {
                "Argument": "",
                "Description": "Line number to begin program"
            },
            {
                "Argument": "n",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "download"
            },
            {
                "Argument": "",
                "Description": "Name of label in RAM to begin"
            },
            {
                "Argument": "str",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "download from."
            },
            {
                "Argument": "",
                "Description": "Begins download at end of"
            },
            {
                "Argument": "s",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "program in RAM"
            }
        ]
    },
    {
        "Command": "DM",
        "Usage": [
            {
                "Example": "DM n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {},
        "Description": "The DM command defines a single-dimensional array with a name and n total elements. The first element of the defined array starts with element number\n0 and the last element is at n-1.",
        "Arguments": [
            {
                "Argument": "str",
                "Description": "Name of array to dimension"
            },
            {
                "Argument": "",
                "Description": "Number of array elements to assign to dimensioned"
            },
            {
                "Argument": "n",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "array"
            },
            {
                "Argument": "",
                "Description": "Number of array elements to assign to dimensioned"
            },
            {
                "Argument": "n",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "array"
            }
        ]
    },
    {
        "Command": "DP",
        "Usage": [
            {
                "Example": "DPm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "DP n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_DPm"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "The DP command sets the current motor position and current command positions to a user specified value. The units are in quadrature counts. This\ncommand will set both the TP and RP values.",
        "Arguments": [
            {
                "Argument": "m",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "n",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": ""
            }
        ]
    },
    {
        "Command": "DR",
        "Usage": [
            {
                "Example": "DR n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_DR0",
                "_DR1"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "DR specifies and enables the rate for the controller to output its data record.\nFor ethernet-based controllers, the controller creates a QR record and sends it to the unsolicited UDP Ethernet Handle at the specified rate. See the User\nManual for the data record map.",
        "Arguments": [
            {
                "Argument": "",
                "Description": "Data update rate specified in samples"
            },
            {
                "Argument": "n0",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "between packets."
            },
            {
                "Argument": "",
                "Description": "Turn off data record output"
            },
            {
                "Argument": "",
                "Description": "Ethernet handle to output data record"
            },
            {
                "Argument": "n1",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "packet"
            }
        ]
    },
    {
        "Command": "DS",
        "Usage": [
            {
                "Example": "DSm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "DS n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_DSm"
            ],
            "Explanation": "Operand holds the value last set by the command"
        },
        "Description": "When the absolute value of the error TE is less than DS, the torque output TT will be set to the offset OF (the contributions of KP, KD, KI, ZP, and ZN are\nset to zero). This is used to avoid oscillation when holding position.",
        "Arguments": [
            {
                "Argument": "m",
                "Description": "Axis to assign value"
            },
            {
                "Argument": "n",
                "Description": "Position range for PID deadband"
            }
        ]
    },
    {
        "Command": "DT",
        "Usage": [
            {
                "Example": "DT n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {},
        "Description": "The DT command sets the time interval for Contour Mode. The time interval is 2\nN\n samples. With TM 1000, there are 1024 samples per second.\nSending the DT command once will set the time interval for all contour data until a new DT command (or CDm=n) is sent.",
        "Arguments": [
            {
                "Argument": "n",
                "Description": "Set time interval for contour mode in 2^n samples."
            },
            {
                "Argument": "",
                "Description": "n=-1 to pause the contour mode"
            }
        ]
    },
    {
        "Command": "\u00a92017 Galil Motion Control. Corrections, Feedback: ",
        "Usage": [],
        "Operands": {},
        "Description": "",
        "Arguments": []
    },
    {
        "Command": "DV",
        "Usage": [
            {
                "Example": "DVm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "DV n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_DVm"
            ],
            "Explanation": "Operand holds the value last set by the command"
        },
        "Description": "The DV function changes the operation of the PID filter to work off of dual encoders. DV enabled causes the KD (derivative) term to operate on the dual\nencoder instead of the main encoder. This results in improved stability in the cases where there is a backlash between the motor and the main encoder,\nand where the dual encoder is mounted on the motor.",
        "Arguments": [
            {
                "Argument": "m",
                "Description": "Axis to assign value"
            },
            {
                "Argument": "n",
                "Description": "State of dual loop mode"
            }
        ]
    },
    {
        "Command": "EA",
        "Usage": [
            {
                "Example": "EA mm",
                "Explanation": "Argument is an axis mask"
            }
        ],
        "Operands": {},
        "Description": "The EA command selects the master axis for the electronic cam mode. Any axis may be chosen.",
        "Arguments": [
            {
                "Argument": "m",
                "Description": "Axis to assign as ECAM master"
            },
            {
                "Argument": "",
                "Description": "Virtual axis to assign as ECAM master"
            }
        ]
    },
    {
        "Command": "EB",
        "Usage": [
            {
                "Example": "EB n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_EB"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "The EB function enables or disables the cam mode. In this mode, the starting position of the master axis is specified within the cycle.",
        "Arguments": [
            {
                "Argument": "n",
                "Description": "Stop ECAM mode"
            },
            {
                "Argument": "",
                "Description": "Start ECAM mode"
            }
        ]
    },
    {
        "Command": "EC",
        "Usage": [
            {
                "Example": "EC n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_EC"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "The EC function sets the index into the ECAM table. This command is only useful when entering ECAM table values without index values and is most useful\nwhen sending commands in binary. See the command, ET.",
        "Arguments": [
            {
                "Argument": "n",
                "Description": "Set the ECAM table index"
            }
        ]
    },
    {
        "Command": "ED",
        "Usage": [
            {
                "Example": "ED n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_ED",
                "_ED1",
                "_ED4"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "The ED command puts the controller into the Edit subsystem. The ED command is used when using Telnet style interface (not Galil Software). In the Edit\nsubsystem, programs can be created, changed, or destroyed.",
        "Arguments": [
            {
                "Argument": "",
                "Description": "Line number to"
            },
            {
                "Argument": "n",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "begin editing"
            },
            {
                "Argument": "",
                "Description": "Line number to"
            },
            {
                "Argument": "n",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "begin editing"
            }
        ]
    },
    {
        "Command": "' This message is from thread 2 ",
        "Usage": [],
        "Operands": {},
        "Description": "",
        "Arguments": []
    },
    {
        "Command": "EG",
        "Usage": [
            {
                "Example": "EGm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "EG n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_EGm"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "The EG command engages an ECAM slave axis at a specified position of the master. Once a slave motor is engaged, its position is redefined to fit within the\ncycle.",
        "Arguments": [
            {
                "Argument": "m",
                "Description": "Axis to assign value"
            },
            {
                "Argument": "",
                "Description": "Master position to"
            },
            {
                "Argument": "n",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "engage ECAM slave"
            }
        ]
    },
    {
        "Command": "EI",
        "Usage": [
            {
                "Example": "EI n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_EI"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "The EI command is used to enable interrupts on events. EI enables interrupts for the predefined event conditions in the table below. When a condition\n(e.g. Axis A profiled motion complete) occurs after EI is armed, a particular status byte value (e.g. $D0 or 208) is delivered to the host PC along with the\ninterrupt.\nInterrupts are issued as automatically dispatched UDP packets. GalilTools version 1.2.1.0 or newer required for software support.",
        "Arguments": [
            {
                "Argument": "n1",
                "Description": "16-bit interrupt mask"
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "n2",
                "Description": "8-bit input mask"
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "Preconfigured UDP handle"
            },
            {
                "Argument": "n3",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "for interrupt transmission"
            }
        ]
    },
    {
        "Command": "$80 (128)",
        "Usage": [],
        "Operands": {},
        "Description": "",
        "Arguments": []
    },
    {
        "Command": "ELSE",
        "Usage": [
            {
                "Example": "ELSE n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {},
        "Description": "The ELSE command is an optional part of an IF conditional statement. The ELSE command must occur after an IF command and it has no arguments. It\nallows for the execution of a command only when the argument of the IF command evaluates False. If the argument of the IF command evaluates false,\nthe controller will skip commands until the ELSE command. If the argument for the IF command evaluates true, the controller will execute the commands\nbetween the IF and ELSE command.",
        "Arguments": []
    },
    {
        "Command": "EM",
        "Usage": [
            {
                "Example": "EMm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "EM n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_EMm"
            ],
            "Explanation": "Operand holds the value last set by the command"
        },
        "Description": "The EM command defines the change in position over one complete cycle of the master.\nThe field for the master axis is the cycle of the master position. For the slaves, the field defines the net change in one cycle.",
        "Arguments": [
            {
                "Argument": "m",
                "Description": "Axis to assign value"
            },
            {
                "Argument": "n",
                "Description": "Position change over one full ECAM cycle"
            },
            {
                "Argument": "",
                "Description": "Position change over one full ECAM cycle"
            }
        ]
    },
    {
        "Command": "EN",
        "Usage": [
            {
                "Example": "EN n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {},
        "Description": "The EN command is used to designate the end of a program or subroutine. If a subroutine was called by the JS command, the EN command ends the\nsubroutine and returns program flow to the point just after the JS command.\nA return parameter can be specified to EN from a subroutine to return a value from the subroutine to the calling stack.",
        "Arguments": [
            {
                "Argument": "n0=1 restores trippoints. n0=0 does notn0 0",
                "Description": "Specify trippoint status when"
            },
            {
                "Argument": "",
                "Description": "returning from subroutine"
            },
            {
                "Argument": "n1=1 restores CI interrupt. n1=0 doesn1 0",
                "Description": "Set status of CI interrupt when"
            },
            {
                "Argument": "",
                "Description": "returning from #COMINT"
            },
            {
                "Argument": "-",
                "Description": "Return a value from a"
            },
            {
                "Argument": "n2",
                "Description": ""
            },
            {
                "Argument": "2,147,483,648",
                "Description": "subroutine."
            }
        ]
    },
    {
        "Command": "ENDIF",
        "Usage": [
            {
                "Example": "ENDIF n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {},
        "Description": "The ENDIF command is used to designate the end of an IF conditional statement. An IF conditional statement is formed by the combination of an IF and\nENDIF command. An ENDIF command must always be executed for every IF command that has been executed. It is recommended that the user not\ninclude jump commands inside IF conditional statements since this causes re-direction of command execution. In this case, the command interpreter may\nnot execute an ENDIF command.",
        "Arguments": []
    },
    {
        "Command": "EO",
        "Usage": [
            {
                "Example": "EO n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_EO"
            ],
            "Explanation": "Operand holds the value last set by the command"
        },
        "Description": "The EO command turns the echo on or off. If the echo is off, characters input over the bus will not be echoed back.",
        "Arguments": [
            {
                "Argument": "n",
                "Description": "Echo Off"
            },
            {
                "Argument": "",
                "Description": "Echo On"
            }
        ]
    },
    {
        "Command": "EP",
        "Usage": [
            {
                "Example": "EP n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_EP"
            ],
            "Explanation": "Operand holds the value last set by the command"
        },
        "Description": "The EP command defines the ECAM table intervals and offset. The offset is the master position of the first ECAM table entry. The interval is the difference\nof the master position between 2 consecutive table entries. This command effectively defines the size of the ECAM table. Up to 257 points may be\nspecified.",
        "Arguments": [
            {
                "Argument": "n0",
                "Description": "Master position interval"
            },
            {
                "Argument": "n1",
                "Description": "ECAM table phase shift"
            }
        ]
    },
    {
        "Command": "EQ",
        "Usage": [
            {
                "Example": "EQm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "EQ n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_EQm"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "The EQ command disengages an electronic cam slave axis at the specified master position. Separate points can be specified for each axis. If a value is\nspecified outside of the master's range, the slave will disengage immediately.",
        "Arguments": [
            {
                "Argument": "m",
                "Description": "Axis to assign value"
            },
            {
                "Argument": "",
                "Description": "Master position to disengage"
            },
            {
                "Argument": "n",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "the slave axis specified."
            }
        ]
    },
    {
        "Command": "ER",
        "Usage": [
            {
                "Example": "ERm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "ER n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_ERm"
            ],
            "Explanation": "Operand holds the value last set by the command"
        },
        "Description": "The ER command sets the magnitude of the position errors for each axis that will trigger an error condition. When the limit is exceeded, the Error output\nwill go low (true) and the controller's red light will be turned on. If the Off On Error (OE1) command is active, the motors will be disabled.",
        "Arguments": [
            {
                "Argument": "m",
                "Description": "Axis to assign value"
            },
            {
                "Argument": "",
                "Description": "Set the position error limit in"
            },
            {
                "Argument": "n",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "counts"
            }
        ]
    },
    {
        "Command": "ES",
        "Usage": [
            {
                "Example": "ES n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {},
        "Description": "The ES command divides the resolution of one of the axes in a vector mode (VM). This function allows for the generation of circular motion when encoder\nresolutions differ. It also allows for the generation of an ellipse instead of a circle. The resolution change applies for the purpose of generating the VP and\nCR commands, effectively changing the axis with the higher resolution to match the coarser resolution.",
        "Arguments": [
            {
                "Argument": "n0",
                "Description": "First value used for resolution scaling"
            },
            {
                "Argument": "n1",
                "Description": "Second value used for resolution scaling"
            }
        ]
    },
    {
        "Command": "ET",
        "Usage": [
            {
                "Example": "ET n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {},
        "Description": "The ET command sets the ECAM table entries for the slave axes.. The values of the master axes are not required. The slave entry (n) is the position of the\nslave axes when the master is at the point (m i) + o, where i is the interval and o is the offset as determined by the EP command.",
        "Arguments": [
            {
                "Argument": "n0",
                "Description": "Index of the ECAM table entry"
            },
            {
                "Argument": "n",
                "Description": "Position of the slave axis at the specified table point."
            }
        ]
    },
    {
        "Command": "EW",
        "Usage": [
            {
                "Example": "EW n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_EW0",
                "_EW1",
                "_EW2",
                "_EW3"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "The EW command allows widening the length of one or two ECAM segments beyond the width specified by EP. For ECAM tables with one or two long\nlinear sections, this allows placing more points in the curved sections of the table. There are only two widened segments, and if used they are common for\nall ECAM axes.",
        "Arguments": [
            {
                "Argument": "n0",
                "Description": "Index of first widened segment"
            },
            {
                "Argument": "",
                "Description": "Length of first widened"
            },
            {
                "Argument": "n1",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "segment"
            },
            {
                "Argument": "",
                "Description": "Index of second widened"
            },
            {
                "Argument": "n2",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "segment"
            },
            {
                "Argument": "",
                "Description": "Length of second widened"
            },
            {
                "Argument": "n3",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "segment"
            }
        ]
    },
    {
        "Command": "EY",
        "Usage": [
            {
                "Example": "EY n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_EY"
            ],
            "Explanation": "Operand holds the value last set by the command"
        },
        "Description": "The EY command sets or gets the ECAM cycle count. This is the number of times that the ECAM axes have exceeded their modulus as defined by the EM\ncommand. EY will increment by one each time the master exceeds its modulus in the positive direction, and EY will decrement by one each time the\nmaster exceeds its modulus in the negative direction.",
        "Arguments": [
            {
                "Argument": "n",
                "Description": "Current ECAM cycle count"
            }
        ]
    },
    {
        "Command": "FA",
        "Usage": [
            {
                "Example": "FAm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "FA n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_FAm"
            ],
            "Explanation": "Operand holds the value last set by the command"
        },
        "Description": "The FA command sets the acceleration feedforward coefficient. This coefficient is scaled by the set acceleration and adds a torque bias voltage during the\nacceleration phase and subtracts the bias during the deceleration phase of a motion.",
        "Arguments": [
            {
                "Argument": "m",
                "Description": "Axis to assign value"
            },
            {
                "Argument": "n",
                "Description": "Value of proportional term"
            }
        ]
    },
    {
        "Command": "FC",
        "Usage": [
            {
                "Example": "FCm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "FC n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_FCm"
            ],
            "Explanation": "Operand holds the value last set by the command"
        },
        "Description": "Adds a bias to the torque output TT proportional to the commanded velocity if the distance from the end of the move is less than FN. FC is the same as\nFV but activated FN counts from the end of the move and both positive and negative values are allowed.",
        "Arguments": [
            {
                "Argument": "m",
                "Description": "Axis to assign value"
            },
            {
                "Argument": "n",
                "Description": "Value of distance selectable feedforward gain"
            }
        ]
    },
    {
        "Command": "FE",
        "Usage": [
            {
                "Example": "FE mm",
                "Explanation": "Argument is an axis mask"
            }
        ],
        "Operands": {},
        "Description": "The FE command moves a motor until a transition is seen on the homing input for that axis. The direction of motion depends on the initial state of the\nhoming input (use the CN command to configure the polarity of the home input). Once the transition is detected, the motor decelerates to a stop.\nThis command is useful for creating your own homing sequences.",
        "Arguments": [
            {
                "Argument": "mm",
                "Description": "Axes to Find Edge"
            }
        ]
    },
    {
        "Command": "FI",
        "Usage": [
            {
                "Example": "FI mm",
                "Explanation": "Argument is an axis mask"
            }
        ],
        "Operands": {},
        "Description": "The FI and BG commands move the motor until an encoder index pulse is detected.",
        "Arguments": [
            {
                "Argument": "mm",
                "Description": "Axes to Find Index"
            }
        ]
    },
    {
        "Command": "FL",
        "Usage": [
            {
                "Example": "FLm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "FL n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_FLm"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "The FL command sets the forward software position limit. If this limit is exceeded during motion, motion on that axis will decelerate to a stop. Forward\nmotion beyond this limit is not permitted.",
        "Arguments": [
            {
                "Argument": "m",
                "Description": "Axis to assign value"
            },
            {
                "Argument": "n",
                "Description": "Value of software forward limit"
            }
        ]
    },
    {
        "Command": "FN",
        "Usage": [
            {
                "Example": "FNm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "FN n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_FNm"
            ],
            "Explanation": "Operand holds the value last set by the command"
        },
        "Description": "Adds a bias to the torque output TT proportional to the commanded velocity if the distance from the end of the move is less than FN. FC is the same as\nFV but activated FN counts from the end of the move and both positive and negative values are allowed.",
        "Arguments": [
            {
                "Argument": "m",
                "Description": "Axis to assign value"
            },
            {
                "Argument": "n",
                "Description": "Distance from end of move for FC to engage"
            }
        ]
    },
    {
        "Command": "FV",
        "Usage": [
            {
                "Example": "FVm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "FV n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_FVm"
            ],
            "Explanation": "Operand holds the value last set by the command"
        },
        "Description": "The FV command sets the velocity feedforward coefficient. This coefficient generates an output bias signal in proportions to the sample to sample change\nin reference position (RP).",
        "Arguments": [
            {
                "Argument": "m",
                "Description": "Axis to assign value"
            },
            {
                "Argument": "n",
                "Description": "Value of proportional term"
            },
            {
                "Argument": "",
                "Description": "Value of proportional term"
            }
        ]
    },
    {
        "Command": "GA",
        "Usage": [
            {
                "Example": "GAm0= m",
                "Explanation": "Arguments are single axis masks and are specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "GA m ...",
                "Explanation": "Arguments are single axis masks specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {},
        "Description": "The GA command specifies the master axes for electronic gearing. Multiple masters for gearing may be specified. A slave axis may have only one master.\nThe masters may be the main encoder input, auxiliary encoder input, or the commanded position of any axis. The master may also be the commanded\nvector move in a coordinated motion of LM or VM type. When the master is a simple axis, it may move in any direction and the slave follows. When the\nmaster is a commanded vector move, the vector move is considered positive and the slave will move forward if the gear ratio is positive, and backward if\nthe gear ratio is negative. The slave axes and ratios are specified with the GR command and gearing is turned off by the command GR0.",
        "Arguments": [
            {
                "Argument": "m0",
                "Description": "Slave axis to assign master"
            },
            {
                "Argument": "",
                "Description": "Master axis main encoder as the slave's"
            },
            {
                "Argument": "m",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "master"
            },
            {
                "Argument": "",
                "Description": "Master axis commanded position as the"
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "slave's master"
            },
            {
                "Argument": "",
                "Description": "Master axis aux encoder as the slave's"
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "master"
            },
            {
                "Argument": "",
                "Description": "Vector plane as the slave's master"
            },
            {
                "Argument": "",
                "Description": "Virtual axis as the slave's master"
            }
        ]
    },
    {
        "Command": "GD",
        "Usage": [
            {
                "Example": "GD n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_GDm"
            ],
            "Explanation": "Operand holds the value last set by the command"
        },
        "Description": "The GD command sets the distance of the master axis over which the specified slave will be engaged, disengaged or changed to a new gear setting.",
        "Arguments": [
            {
                "Argument": "m",
                "Description": "Axis to assign value"
            },
            {
                "Argument": "n",
                "Description": "Absolute Value of Gearing Distance"
            }
        ]
    },
    {
        "Command": "GM",
        "Usage": [
            {
                "Example": "GMm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "GM n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_GMm"
            ],
            "Explanation": "Operand holds the value last set by the command"
        },
        "Description": "The GM command specifies the axes in which the gearing function is performed in the Gantry mode. In this mode, the geared slaves will not be stopped\nby the ST command or by limit switches.",
        "Arguments": [
            {
                "Argument": "m",
                "Description": "Axis to assign value"
            },
            {
                "Argument": "n",
                "Description": "Value of GM command"
            }
        ]
    },
    {
        "Command": "GR",
        "Usage": [
            {
                "Example": "GRm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "GR n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_GRm"
            ],
            "Explanation": "Operand holds the value last set by the command"
        },
        "Description": "GR specifies the Gear Ratios for the geared axes in the electronic gearing mode. The master axis is defined by the GA command.",
        "Arguments": [
            {
                "Argument": "m",
                "Description": "Slave axis to assign gear ratio"
            },
            {
                "Argument": "n",
                "Description": "Value of Gear Ratio of Slave"
            }
        ]
    },
    {
        "Command": "HM",
        "Usage": [
            {
                "Example": "HM mm",
                "Explanation": "Argument is an axis mask"
            }
        ],
        "Operands": {
            "Operands": [
                "_HMm"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "The HM command performs a three stage homing sequence for servo systems and a two stage sequence for stepper motors.",
        "Arguments": [
            {
                "Argument": "mm",
                "Description": "Axis to performing Homing Routine"
            }
        ]
    },
    {
        "Command": "HS",
        "Usage": [
            {
                "Example": "HSm0= m",
                "Explanation": "Arguments are single axis masks and are specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "HS m ...",
                "Explanation": "Arguments are single axis masks specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {},
        "Description": "The HS command is used to switch the ethernet handle assignments between two handles. Handles are opened when a connection is established by an\nexternal client (TCP or UDP), or when a handle is assigned explicitly with the IH command. Should those assignments need modifications, the HS\ncommand allows the handles to be reassigned.",
        "Arguments": [
            {
                "Argument": "m0",
                "Description": "First handle to switch"
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "First handle to switch"
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "Second handle to"
            },
            {
                "Argument": "m",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "switch"
            },
            {
                "Argument": "",
                "Description": "Second handle to"
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "switch"
            }
        ]
    },
    {
        "Command": "HV",
        "Usage": [
            {
                "Example": "HVm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "HV n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_HVm"
            ],
            "Explanation": "Operand holds the value last set by the command"
        },
        "Description": "Sets the slew speed for the FI final move to the index and all but the first stage of HM.",
        "Arguments": [
            {
                "Argument": "m",
                "Description": "Axis to assign value"
            },
            {
                "Argument": "",
                "Description": "Value of Homing Velocity in"
            },
            {
                "Argument": "n",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "cnts/second"
            },
            {
                "Argument": "",
                "Description": "Value of Homing Velocity in"
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "cnts/second"
            }
        ]
    },
    {
        "Command": "HX",
        "Usage": [
            {
                "Example": "HX n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_HX0",
                "_HX1",
                "_HX2",
                "_HX3",
                "_HX4",
                "_HX5",
                "_HX6",
                "_HX7"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "The HX command halts the execution of any program that is running.The parameter n specifies the thread to be halted.",
        "Arguments": [
            {
                "Argument": "n",
                "Description": "Thread number to halt"
            }
        ]
    },
    {
        "Command": "IA",
        "Usage": [
            {
                "Example": "IA n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_IA0",
                "_IA1",
                "_IA2",
                "_IA3",
                "_IA4",
                "_IA5"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "The IA command assigns the controller IP address and the TCP time out. The IP address can also be assigned via Galil software or from an external server.\nThe controller defaults to DHCP and will receive an IP address from a DHCP server if present. To manually set an IP address over the serial connection,\nsend DH0 to disable DHCP prior to setting the new IP address with IA.\nGalilTools and GalilSuite software packages feature a DHCP/BOOTP capability to assign the IP address to the controller. Please refer to the user manuals for\nthose products for more information.",
        "Arguments": [
            {
                "Argument": "n0",
                "Description": "Byte 3 of the IP address"
            },
            {
                "Argument": "n1",
                "Description": "Byte 2 of the IP address"
            },
            {
                "Argument": "n2",
                "Description": "Byte 1 of the IP address"
            },
            {
                "Argument": "n3",
                "Description": "Byte 0 of the IP address"
            },
            {
                "Argument": "",
                "Description": "The full IP address specified as a signed 32 bit two's"
            },
            {
                "Argument": "n4",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "complement integer"
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "o",
                "Description": "The time in update samples between TCP retries"
            },
            {
                "Argument": "",
                "Description": ""
            }
        ]
    },
    {
        "Command": "ID",
        "Usage": [
            {
                "Example": "ID",
                "Explanation": "Command takes no arguments"
            }
        ],
        "Operands": {},
        "Description": "The ID command is used to query the controller for the hardware configuration and factory programming.",
        "Arguments": []
    },
    {
        "Command": "ID",
        "Usage": [],
        "Operands": {},
        "Description": "",
        "Arguments": []
    },
    {
        "Command": "IF",
        "Usage": [
            {
                "Example": "IF n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {},
        "Description": "The IF command is used in conjunction with an ENDIF command to form an IF conditional statement. The arguments consist of one or more conditional\nstatements and each condition must be enclosed with parenthesis (). If the conditional statement(s) evaluates true, the command interpreter will continue\nexecuting commands which follow the IF command. If the conditional statement evaluates false, the controller will ignore commands until the associated\nENDIF command or an ELSE command occurs in the program.",
        "Arguments": [
            {
                "Argument": "ex",
                "Description": "Conditional statement for IF statement"
            }
        ]
    },
    {
        "Command": "documentation@galilmc.com",
        "Usage": [],
        "Operands": {},
        "Description": "",
        "Arguments": []
    },
    {
        "Command": "IH",
        "Usage": [
            {
                "Example": "IHm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            }
        ],
        "Operands": {
            "Operands": [
                "_IHm0",
                "_IHm1",
                "_IHm2",
                "_IHm3",
                "_IHm4"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "The IH command is used when the controller is operated as a master (client) to open a handle and connect to a slave (server).",
        "Arguments": [
            {
                "Argument": "m",
                "Description": "Handle to assign connection"
            },
            {
                "Argument": "",
                "Description": "Special handle designator used"
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "when closing handles"
            },
            {
                "Argument": "n0",
                "Description": "Byte 3 of the slave IP address"
            },
            {
                "Argument": "n1",
                "Description": "Byte 2 of the slave IP address"
            },
            {
                "Argument": "n2",
                "Description": "Byte 1 of the slave IP address"
            },
            {
                "Argument": "n3",
                "Description": "Byte 0 of the slave IP address"
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "n",
                "Description": "Slave IP address as a 32 bit value"
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "Specify the slave port to connect"
            },
            {
                "Argument": "o",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "over"
            },
            {
                "Argument": "",
                "Description": "Specify the connection type to"
            },
            {
                "Argument": "p",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "open"
            },
            {
                "Argument": "",
                "Description": "Specify the connection type to"
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "close when closing a handle"
            }
        ]
    },
    {
        "Command": "Attempting to establish UDP handle",
        "Usage": [],
        "Operands": {},
        "Description": "",
        "Arguments": []
    },
    {
        "Command": "II",
        "Usage": [
            {
                "Example": "II n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {},
        "Description": "The II command enables the input interrupt function for the specified inputs.\nIf any of the specified inputs are activated during program execution, the program will jump to the subroutine with label #ININT. Any trippoints set by the\nprogram will be cleared but can be re-enabled by the proper termination of the interrupt subroutine using RI.",
        "Arguments": [
            {
                "Argument": "n0 0",
                "Description": "Lowest input to use for interrupt trigger"
            },
            {
                "Argument": "n1 1",
                "Description": "Highest input to use for interrupt trigger"
            },
            {
                "Argument": "If n0 and n1 used, n2 is ignored, seen2 1",
                "Description": "Use bitmask as alternative selection of"
            },
            {
                "Argument": "",
                "Description": "input interrupt triggers"
            },
            {
                "Argument": "",
                "Description": "Bitmask specifying required input state for"
            },
            {
                "Argument": "n3 0",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "interrupt trigger"
            }
        ]
    },
    {
        "Command": "IK",
        "Usage": [
            {
                "Example": "IK n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {},
        "Description": "The IK command blocks client connections to the controller on most ports below port number 1000. Specific port numbers and ports above 1000 are\nunaffected.",
        "Arguments": [
            {
                "Argument": "n",
                "Description": "Allow controller to receive Ethernet packets on any port"
            },
            {
                "Argument": "",
                "Description": "Blocks Ethernet packets on ports lower than 1000."
            }
        ]
    },
    {
        "Command": "IL",
        "Usage": [
            {
                "Example": "ILm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "IL n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_ILm"
            ],
            "Explanation": "Operand holds the value last set by the command"
        },
        "Description": "The IL command limits the effect of the integrator gain in the filter to a certain voltage.",
        "Arguments": [
            {
                "Argument": "m",
                "Description": "Axis to assign value"
            },
            {
                "Argument": "",
                "Description": "Value of Integrator limit"
            },
            {
                "Argument": "n",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "in volts"
            }
        ]
    },
    {
        "Command": "IN",
        "Usage": [
            {
                "Example": "IN n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {},
        "Description": "The IN command allows a variable to be input from a keyboard. When the IN command is executed in a program, the prompt message is displayed. The\noperator then enters the variable value followed by a carriage return. The entered value is assigned to the specified variable name. The IN command holds\nup execution of following commands in a program until a carriage return or semicolon is detected. If no value is given prior to a semicolon or carriage\nreturn, the previous variable value is kept.",
        "Arguments": [
            {
                "Argument": "str",
                "Description": "The prompt message"
            },
            {
                "Argument": "arg",
                "Description": "The variable where the response will be placed"
            }
        ]
    },
    {
        "Command": "IP",
        "Usage": [
            {
                "Example": "IPm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "IP n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {},
        "Description": "The IP command allows for a change in the command position while the motor is moving. This command does not require a BG.",
        "Arguments": [
            {
                "Argument": "m",
                "Description": "Axis to assign value"
            },
            {
                "Argument": "",
                "Description": "Imaginary axis to assign value"
            },
            {
                "Argument": "n",
                "Description": "Value of incremental move"
            }
        ]
    },
    {
        "Command": "IT",
        "Usage": [
            {
                "Example": "ITm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "IT n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_ITm"
            ],
            "Explanation": "Operand holds the value last set by the command"
        },
        "Description": "The IT command filters the acceleration and deceleration functions of independent moves such as JG, PR, PA to produce a smooth velocity profile. The\nresulting profile, known as smoothing, has continuous acceleration and results in reduced mechanical vibrations. IT sets the bandwidth of the filter where 1\nmeans no filtering and 0.004 means maximum filtering.\nThe IT command also filters the individual axes during Vector Mode (VM) and Linear Interpolation Mode (LM).",
        "Arguments": [
            {
                "Argument": "m",
                "Description": "Axis to assign value"
            },
            {
                "Argument": "",
                "Description": "Value of independent smoothing"
            },
            {
                "Argument": "n",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "function"
            }
        ]
    },
    {
        "Command": "JG",
        "Usage": [
            {
                "Example": "JGm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "JG n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_JGm"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "The JG command sets the jog mode and the jog slew speed of the axes.",
        "Arguments": [
            {
                "Argument": "m",
                "Description": "Axis to assign value"
            },
            {
                "Argument": "",
                "Description": "Virtual axis to assign value"
            },
            {
                "Argument": "",
                "Description": "Value of jog speed in"
            },
            {
                "Argument": "n",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "cnts/second"
            },
            {
                "Argument": "",
                "Description": "Value of jog speed in"
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "cnts/second"
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "Vale of jog speed in cnts/second"
            },
            {
                "Argument": "",
                "Description": ""
            }
        ]
    },
    {
        "Command": "JP",
        "Usage": [
            {
                "Example": "JP n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {},
        "Description": "The JP command causes a jump to a program location on a specified condition. The program location may be any program line number or label. A jump\nis taken if the specified condition is true. Multiple conditions can be used in a single jump statement.\nJP can be used for relative jumps and for jump tables, see Examples.",
        "Arguments": [
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "str",
                "Description": "Label name for jump destination"
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "n",
                "Description": "Line number for jump destination"
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "Conditional statement/s that must"
            },
            {
                "Argument": "ex",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "evaluate true for jump to occur"
            }
        ]
    },
    {
        "Command": "' spacing in following text",
        "Usage": [],
        "Operands": {},
        "Description": "",
        "Arguments": []
    },
    {
        "Command": "JS",
        "Usage": [
            {
                "Example": "JS n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_JS"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "Allows the program to jump to a subroutine and return back after completion. This command is often used to call reusable code.",
        "Arguments": [
            {
                "Argument": "",
                "Description": "Label Name for jump"
            },
            {
                "Argument": "str",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "destination"
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "Line number for jump"
            },
            {
                "Argument": "n",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "destination"
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "Line number for jump"
            },
            {
                "Argument": "n",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "destination"
            },
            {
                "Argument": "",
                "Description": "Conditional statement/s that"
            },
            {
                "Argument": "ex",
                "Description": "must evaluate true for jump"
            },
            {
                "Argument": "",
                "Description": "to occur"
            },
            {
                "Argument": "",
                "Description": "A value, variable, or array to"
            },
            {
                "Argument": "arg",
                "Description": "pass to the subroutine being"
            },
            {
                "Argument": "",
                "Description": "called"
            }
        ]
    },
    {
        "Command": "Examples of valid args (see examples for demo of each concept)",
        "Usage": [],
        "Operands": {},
        "Description": "",
        "Arguments": []
    },
    {
        "Command": "REM Controller Response",
        "Usage": [],
        "Operands": {},
        "Description": "",
        "Arguments": []
    },
    {
        "Command": "K1",
        "Usage": [
            {
                "Example": "K1m= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "K1 n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_K1m"
            ],
            "Explanation": "Operand holds the value last set by the command"
        },
        "Description": "K1 is the proportional gain in effect when the profiler is commanding motion (RP is changing). When no motion is commanded (RP constant), KP is in\neffect. Some systems will oscillate when holding position unless the gains are lowered.",
        "Arguments": [
            {
                "Argument": "m",
                "Description": "Axis to assign value"
            },
            {
                "Argument": "n",
                "Description": "Value of proportional term"
            }
        ]
    },
    {
        "Command": "K2",
        "Usage": [
            {
                "Example": "K2m= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "K2 n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_K2m"
            ],
            "Explanation": "Operand holds the value last set by the command"
        },
        "Description": "K2 is the integral gain in effect when the profiler is commanding motion (RP is changing). When no motion is commanded (RP constant), KI is in effect.\nSome systems will oscillate when holding position unless the gains are lowered.",
        "Arguments": [
            {
                "Argument": "m",
                "Description": "Axis to assign value"
            },
            {
                "Argument": "n",
                "Description": "Value of integrator term"
            }
        ]
    },
    {
        "Command": "K3",
        "Usage": [
            {
                "Example": "K3m= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "K3 n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_K3m"
            ],
            "Explanation": "Operand holds the value last set by the command"
        },
        "Description": "K3 is the derivative gain in effect when the profiler is commanding motion (RP is changing). When no motion is commanded (RP constant), KD is in effect.\nSome systems will oscillate when holding position unless the gains are lowered.",
        "Arguments": [
            {
                "Argument": "m",
                "Description": "Axis to assign value"
            },
            {
                "Argument": "n",
                "Description": "Value of derivative term"
            }
        ]
    },
    {
        "Command": "KD",
        "Usage": [
            {
                "Example": "KDm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "KD n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_KDm"
            ],
            "Explanation": "Operand holds the value last set by the command"
        },
        "Description": "KD designates the derivative constant in the control filter. The derivative gain outputs a voltage based on the rate of change of the error. The filter\ntransfer function follows:",
        "Arguments": [
            {
                "Argument": "m",
                "Description": "Axis to assign value"
            },
            {
                "Argument": "n",
                "Description": "Value of derivative term"
            }
        ]
    },
    {
        "Command": "KI",
        "Usage": [
            {
                "Example": "KIm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "KI n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_KIm"
            ],
            "Explanation": "Operand holds the value last set by the command"
        },
        "Description": "The KI command sets the integral gain of the control loop. The integrator term will reduce the position error at rest to zero. It fits in the control equation\nas follows:",
        "Arguments": [
            {
                "Argument": "m",
                "Description": "Axis to assign value"
            },
            {
                "Argument": "n",
                "Description": "Value of Integral term"
            }
        ]
    },
    {
        "Command": "KP",
        "Usage": [
            {
                "Example": "KPm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "KP n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_KPm"
            ],
            "Explanation": "Operand holds the value last set by the command"
        },
        "Description": "KP designates the proportional constant in the controller filter. The proportional gain outputs a control signal proportional to the amount of error. The filter\ntransfer function follows.",
        "Arguments": [
            {
                "Argument": "m",
                "Description": "Axis to assign value"
            },
            {
                "Argument": "n",
                "Description": "Value of proportional term"
            }
        ]
    },
    {
        "Command": "KS",
        "Usage": [
            {
                "Example": "KSm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "KS n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_KSm"
            ],
            "Explanation": "Operand holds the value last set by the command"
        },
        "Description": "The KS parameter sets the amount of smoothing of stepper motor pulses. Larger values of KS provide greater smoothness. KS adds a single pole low pass\nfilter onto the output of the motion profiler.",
        "Arguments": [
            {
                "Argument": "m",
                "Description": "Axis to assign value"
            },
            {
                "Argument": "n",
                "Description": "Value of smoothing constant"
            }
        ]
    },
    {
        "Command": "LA",
        "Usage": [
            {
                "Example": "LA",
                "Explanation": "Command takes no arguments"
            }
        ],
        "Operands": {},
        "Description": "The LA command returns a list of all arrays in memory. The size of each array will be included next to each array name in square brackets.",
        "Arguments": []
    },
    {
        "Command": "LB",
        "Usage": [
            {
                "Example": "LB n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_LB"
            ],
            "Explanation": "Operand holds the value last set by the command"
        },
        "Description": "The LB command sets the Bias contrast on the LCD.",
        "Arguments": [
            {
                "Argument": "n",
                "Description": "Sets LCD Contrast"
            }
        ]
    },
    {
        "Command": "LC",
        "Usage": [
            {
                "Example": "LCm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "LC n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_LCm"
            ],
            "Explanation": "Operand holds the value last set by the command"
        },
        "Description": "The LC command enables low current mode for stepper motors. Low current mode reduces the holding torque of the stepper motors while at rest.",
        "Arguments": [
            {
                "Argument": "m",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "n",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": ""
            }
        ]
    },
    {
        "Command": "LD",
        "Usage": [
            {
                "Example": "LDm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "LD n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_LDm"
            ],
            "Explanation": "Operand holds the value last set by the command"
        },
        "Description": "Allows user to disables forward and/or reverse limit switches.",
        "Arguments": [
            {
                "Argument": "m",
                "Description": "Axis to assign value"
            },
            {
                "Argument": "n",
                "Description": "Sets limit disable state"
            },
            {
                "Argument": "Argument",
                "Description": ""
            },
            {
                "Argument": "n",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": ""
            }
        ]
    },
    {
        "Command": "LE",
        "Usage": [
            {
                "Example": "LE",
                "Explanation": "Command takes no arguments"
            }
        ],
        "Operands": {
            "Operands": [
                "_LEm"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "The LE command indicates to the controller that the end of the sequence is coming up. This allows the controller to slow down through multiple\nsegments, if required. LE is required to exit the linear interpolation mode gracefully (stop code, SC, 101).",
        "Arguments": []
    },
    {
        "Command": "LI",
        "Usage": [
            {
                "Example": "LIm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "LI n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {},
        "Description": "The LI command specifies the incremental distance of travel for each axis in the Linear Interpolation (LM) mode. LI parameters are relative distances given\nwith respect to the current axis positions.",
        "Arguments": [
            {
                "Argument": "m",
                "Description": ""
            },
            {
                "Argument": "n",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "o",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "p",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "Argument",
                "Description": ""
            },
            {
                "Argument": "o",
                "Description": ""
            }
        ]
    },
    {
        "Command": "'Galil DMC Code Example",
        "Usage": [],
        "Operands": {},
        "Description": "",
        "Arguments": []
    },
    {
        "Command": "LL",
        "Usage": [
            {
                "Example": "LL",
                "Explanation": "Command takes no arguments"
            }
        ],
        "Operands": {},
        "Description": "The LL command returns a listing of all of the program labels in memory.",
        "Arguments": []
    },
    {
        "Command": "LM",
        "Usage": [
            {
                "Example": "LM mm",
                "Explanation": "Argument is an axis mask"
            }
        ],
        "Operands": {
            "Operands": [
                "_LMm"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "The LM command specifies the linear interpolation mode and specifies the axes for linear interpolation.",
        "Arguments": [
            {
                "Argument": "mm",
                "Description": "Axes to use for linear interpolation mode"
            }
        ]
    },
    {
        "Command": "LS",
        "Usage": [
            {
                "Example": "LS n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {},
        "Description": "The LS command returns a listing of the programs in memory.",
        "Arguments": [
            {
                "Argument": "",
                "Description": "Firmware Rev 1.2a and later. Specifies the line in the program for"
            },
            {
                "Argument": "n0",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "which the listing will start"
            },
            {
                "Argument": "n0",
                "Description": "Specifies the line in the program for which the listing will start"
            },
            {
                "Argument": "n1",
                "Description": "Specifies the line at which the listing will end"
            }
        ]
    },
    {
        "Command": "LU",
        "Usage": [
            {
                "Example": "LU n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_LU"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "The LU command turns the automatic axes status update on the LCD on or off.",
        "Arguments": [
            {
                "Argument": "n",
                "Description": "Turns off the automatic LCD axis updates"
            },
            {
                "Argument": "",
                "Description": "Turns on the automatic LCD axis updates"
            }
        ]
    },
    {
        "Command": "LV",
        "Usage": [
            {
                "Example": "LV",
                "Explanation": "Command takes no arguments"
            }
        ],
        "Operands": {},
        "Description": "The LV command returns a listing of all of the program variables in memory. The listing will be in alphabetical order.",
        "Arguments": []
    },
    {
        "Command": "LZ",
        "Usage": [
            {
                "Example": "LZ n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_LZ"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "The LZ command is used for formatting the values returned from interrogation commands, variables, and arrays. By enabling the LZ function, all leading\nzeros of returned values will be removed.",
        "Arguments": [
            {
                "Argument": "n",
                "Description": "Does not remove leading zeros from interrogated values"
            },
            {
                "Argument": "",
                "Description": "Removes leading zeros from interrogated values"
            }
        ]
    },
    {
        "Command": "MB",
        "Usage": [
            {
                "Example": "MBm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            }
        ],
        "Operands": {},
        "Description": "The MB command is used to communicate with I/O devices using the Modbus TCP/IP protocol. The MB command supports the first two levels of Modbus\ncommands. The function code -1 designates that the first level of Modbus is used (creates raw packets and receives raw data). The other codes are the\n10 major function codes of the second level. The format of the command varies depending on each function code.\nGalil Modbus supports one master per slave.",
        "Arguments": []
    },
    {
        "Command": "MB",
        "Usage": [],
        "Operands": {},
        "Description": "",
        "Arguments": [
            {
                "Argument": "m A",
                "Description": "Handle to send Modbus command"
            },
            {
                "Argument": "n0 0",
                "Description": "Unit ID"
            },
            {
                "Argument": "n2 0",
                "Description": "Address of coil"
            },
            {
                "Argument": "n3 0",
                "Description": "Set coil status"
            },
            {
                "Argument": "'Galil DMC Code Example",
                "Description": ""
            },
            {
                "Argument": "MBB= ,5,11,1;'  Set coil 11 high",
                "Description": ""
            },
            {
                "Argument": "'equivalent to setting a Digital Output (SB/CB)",
                "Description": ""
            }
        ]
    },
    {
        "Command": "example",
        "Usage": [],
        "Operands": {},
        "Description": "",
        "Arguments": [
            {
                "Argument": "m A",
                "Description": "Handle to send Modbus command"
            },
            {
                "Argument": "n0 0",
                "Description": "Unit ID"
            },
            {
                "Argument": "str 1 char",
                "Description": "Name of array to receive data"
            },
            {
                "Argument": "'Galil DMC Code Example",
                "Description": ""
            },
            {
                "Argument": "MBB= ,17,example[];'",
                "Description": ""
            }
        ]
    },
    {
        "Command": "MC",
        "Usage": [
            {
                "Example": "MC mm",
                "Explanation": "Argument is an axis mask"
            }
        ],
        "Operands": {},
        "Description": "The MC command is a trippoint command that holds up execution until motion is complete on any one of a specified group of axes. The MC command,\nunlike the AM (after motion command) requires that both the motion profiler has completed motion AND that the motor encoder has reached the\nspecified position before continuing execution.",
        "Arguments": [
            {
                "Argument": "",
                "Description": "Axis to assign"
            },
            {
                "Argument": "mm",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "value"
            }
        ]
    },
    {
        "Command": "ME",
        "Usage": [
            {
                "Example": "ME n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {},
        "Description": "The ME command enables the ability for Modbus masters to write to array locations in the hardware's array table. When enabled, array locations can be\nwritten to as 16 bit integers or as 32 bit floating point by a modbus master by specifying different address ranges. ME is not required to read array\nlocations, reads are always supported.",
        "Arguments": [
            {
                "Argument": "n",
                "Description": "Disables the ability for Modbus masters to write to the array table"
            },
            {
                "Argument": "",
                "Description": "Enables ability for Modbus masters to write to the array table"
            }
        ]
    },
    {
        "Command": "\"Integer=\"",
        "Usage": [],
        "Operands": {},
        "Description": "",
        "Arguments": []
    },
    {
        "Command": "MF",
        "Usage": [
            {
                "Example": "MFm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "MF n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {},
        "Description": "This command will hold up the execution of the following command until the specified motor moves forward and crosses the position specified.",
        "Arguments": [
            {
                "Argument": "m",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "n",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": ""
            }
        ]
    },
    {
        "Command": "MG",
        "Usage": [
            {
                "Example": "MG n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                ":",
                "MG",
                "",
                "@AN",
                "[",
                "[",
                "1",
                "]",
                "]",
                "",
                "0.0121",
                ":",
                "'",
                ":",
                "'Array Elements",
                ":",
                "DM",
                "",
                "arr",
                "[",
                "[",
                "3",
                "]",
                "]",
                ":",
                "arr",
                "[",
                "[",
                "0",
                "]",
                "]",
                "=",
                "=",
                "0",
                ":",
                "arr",
                "[",
                "[",
                "1",
                "]",
                "]",
                "=",
                "=",
                "1",
                ":",
                "arr",
                "[",
                "[",
                "2",
                "]",
                "]",
                "=",
                "=",
                "2",
                ":",
                "MG",
                "",
                "arr",
                "[",
                "[",
                "0",
                "]",
                "]",
                ",",
                "arr",
                "[",
                "[",
                "1",
                "]",
                "]",
                ",",
                "arr",
                "[",
                "[",
                "2",
                "]",
                "]",
                "",
                "0.0000 1.0000 2.0000",
                ":",
                "'",
                ":",
                "'Mathematical Expressions",
                ":",
                "MG",
                "",
                "1",
                "+",
                "2",
                "",
                "3.0000",
                ":",
                "MG",
                "",
                "arr",
                "[",
                "[",
                "2",
                "]",
                "]",
                "+",
                "var",
                "",
                "12345680.9101",
                ":",
                "General Use",
                "'Galil DMC Code Example",
                ":",
                "MG",
                "",
                "\"Good Morning\"",
                ";",
                "",
                "'Message command displays ASCII string",
                "Good Morning",
                ":",
                "total",
                "=",
                "=",
                "",
                "1234.5322",
                ";",
                "",
                "'Assigns variable total with the value 1234.5322",
                ":",
                "MG",
                "",
                "\"The answer is...\"",
                ",",
                "total",
                "{F4.2}",
                ";",
                "",
                "'Will print the message and the value of variable total formatted with 4 integer digits and 2 fractional digits",
                "Galil Motion Control",
                "MG"
            ],
            "Explanation": "218/328"
        },
        "Description": "The MG command is used to send strings, operands, variables, and array values to a specified destination.",
        "Arguments": []
    },
    {
        "Command": ":",
        "Usage": [],
        "Operands": {},
        "Description": "",
        "Arguments": []
    },
    {
        "Command": "MO",
        "Usage": [
            {
                "Example": "MO mm",
                "Explanation": "Argument is an axis mask"
            }
        ],
        "Operands": {
            "Operands": [
                "_MOm"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "The MO command turns off the motor command line and toggles the amplifier enable signal.",
        "Arguments": [
            {
                "Argument": "mm",
                "Description": "Specifies axis to turn off"
            }
        ]
    },
    {
        "Command": "MR",
        "Usage": [
            {
                "Example": "MRm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "MR n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {},
        "Description": "This command will hold up the execution of subsequent code specified motor moves backward and crosses the position specified.",
        "Arguments": [
            {
                "Argument": "m",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "n",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": ""
            }
        ]
    },
    {
        "Command": "MT",
        "Usage": [
            {
                "Example": "MTm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "MT n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_MTm"
            ],
            "Explanation": "Operand holds the value last set by the command"
        },
        "Description": "The MT command selects the type of the motor and the polarity of the drive signal. Motor types include standard servomotors, which require a voltage in\nthe range of +/- 10 Volts, and step motors, which require pulse and direction signals. The polarity reversal inverts the analog signals for servomotors, or\ninverts logic level of the pulse train for step motors.",
        "Arguments": [
            {
                "Argument": "m",
                "Description": "Axis to assign value"
            },
            {
                "Argument": "Argument",
                "Description": ""
            },
            {
                "Argument": "n",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": ""
            }
        ]
    },
    {
        "Command": "MU",
        "Usage": [
            {
                "Example": "MU n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_MU"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "MU sets the controller's multicast address. This address is used by Galil software to detect an available Ethernet controller on the network.",
        "Arguments": [
            {
                "Argument": "n0",
                "Description": "First field of the multicast address"
            },
            {
                "Argument": "n1",
                "Description": "Second field of the multicast address"
            },
            {
                "Argument": "n2",
                "Description": "Third field of the multicast address"
            },
            {
                "Argument": "n3",
                "Description": "Last field of the multicast address"
            }
        ]
    },
    {
        "Command": "MW",
        "Usage": [
            {
                "Example": "MW n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_MW0",
                "_MW1"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "Enabling the MW command causes the controller to hold up execution of the program after sending a Modbus command until a response from the\nModbus device has been received. The MW command ensures that the command that was sent to the Modbus device was successfully received before\ncontinuing program execution.",
        "Arguments": [
            {
                "Argument": "n",
                "Description": "Disables Modbus wait"
            },
            {
                "Argument": "",
                "Description": "Enables Modbus wait"
            }
        ]
    },
    {
        "Command": "0.0000",
        "Usage": [],
        "Operands": {},
        "Description": "",
        "Arguments": []
    },
    {
        "Command": "NB",
        "Usage": [
            {
                "Example": "NBm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "NB n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_NBm"
            ],
            "Explanation": "Operand holds the value last set by the command"
        },
        "Description": "The NB command sets real part of the notch poles. In other words, the NB controls the range of frequencies that will be attenuated.",
        "Arguments": [
            {
                "Argument": "m",
                "Description": "Axis to assign value"
            },
            {
                "Argument": "",
                "Description": "Value of the notch bandwidth"
            },
            {
                "Argument": "n",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "in Hz"
            }
        ]
    },
    {
        "Command": "NF",
        "Usage": [
            {
                "Example": "NFm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "NF n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_NFm"
            ],
            "Explanation": "Operand holds the value last set by the command"
        },
        "Description": "The NF command sets the frequency of the notch filter, which is placed either in series with the PID compensation, or applied to the profiled position.",
        "Arguments": [
            {
                "Argument": "m",
                "Description": "Axis to assign value"
            },
            {
                "Argument": "n",
                "Description": "Sets the frequency of the notch filter"
            }
        ]
    },
    {
        "Command": "NO",
        "Usage": [],
        "Operands": {
            "Operands": [
                "_NO"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "The NO command performs no action in a sequence and can be used as a comment in a program.",
        "Arguments": [
            {
                "Argument": "",
                "Description": "A no action sequence used to document a"
            },
            {
                "Argument": "str",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "program"
            }
        ]
    },
    {
        "Command": "NZ",
        "Usage": [
            {
                "Example": "NZm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "NZ n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_NZm"
            ],
            "Explanation": "Operand holds the value last set by the command"
        },
        "Description": "The NZ command sets the real part of the notch zero. In other words, the NB/NZ ratio controls the amount of attenuation, or depth, of the notch filter.",
        "Arguments": [
            {
                "Argument": "m",
                "Description": "Axis to assign value"
            },
            {
                "Argument": "",
                "Description": "Value of Notch Frequency in"
            },
            {
                "Argument": "n",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "Hz"
            }
        ]
    },
    {
        "Command": "OA",
        "Usage": [
            {
                "Example": "OAm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "OA n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_OAm"
            ],
            "Explanation": "Operand holds the value last set by the command"
        },
        "Description": "The OA command turns on or off encoder failure detection. The controller can detect a failure on either or both channels of the encoder. This is\naccomplished by checking on whether motion of less than 4 counts is detected whenever the torque exceeds a preset level (OV) for a specified time (OT).",
        "Arguments": [
            {
                "Argument": "m",
                "Description": "Axis to assign value"
            },
            {
                "Argument": "n",
                "Description": "Status of encoder failure detection"
            }
        ]
    },
    {
        "Command": "OB",
        "Usage": [
            {
                "Example": "OB n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {},
        "Description": "The OB command allows variable control of an output bit based on logical expressions. The OB n, logical expression command defines output bit i as either\n0 or 1 depending on the result from the logical expression.",
        "Arguments": [
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "n",
                "Description": "Output bit specified"
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "n",
                "Description": "Modbus output bit specified"
            },
            {
                "Argument": "",
                "Description": "Expression that defines"
            },
            {
                "Argument": "ex",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "status of output"
            }
        ]
    },
    {
        "Command": "OC",
        "Usage": [
            {
                "Example": "OCm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            }
        ],
        "Operands": {
            "Operands": [
                "_OC"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "The OC command sets up the Output Compare feature, also known as Pulse on Position. The controller has a special digital output which can be\nconfigured to pulse on a specified absolute encoder position, and optionally on a delta encoder change after that. These operations are known as one-\nshot and circular compare, respectively.\nEach set of 4 axes, ABCD and EFGH, has one digital output which can be configured to this mode of operation",
        "Arguments": [
            {
                "Argument": "",
                "Description": "Axis to enable"
            },
            {
                "Argument": "m",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "output compare"
            },
            {
                "Argument": "",
                "Description": "Absolute encoder"
            },
            {
                "Argument": "n0",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "position of first pulse"
            },
            {
                "Argument": "",
                "Description": "Incremental"
            },
            {
                "Argument": "n1",
                "Description": "encoder distance"
            },
            {
                "Argument": "",
                "Description": "between pulses"
            }
        ]
    },
    {
        "Command": "\u00a92017 Galil Motion Control. Corrections, Feedback: ",
        "Usage": [],
        "Operands": {},
        "Description": "",
        "Arguments": []
    },
    {
        "Command": "OE",
        "Usage": [
            {
                "Example": "OEm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "OE n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_OEm"
            ],
            "Explanation": "Operand holds the value last set by the command"
        },
        "Description": "The OE command sets the Off On Error function for the controller. The OE command causes the controller to shut off the motor command if a position\nerror exceeds the limit specified by the ER command, an abort occurs from either the abort input or on AB command, or an amplifier error occurs based\non the description of the TA command.",
        "Arguments": [
            {
                "Argument": "m",
                "Description": ""
            },
            {
                "Argument": "n",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": ""
            }
        ]
    },
    {
        "Command": "documentation@galilmc.com",
        "Usage": [],
        "Operands": {},
        "Description": "",
        "Arguments": []
    },
    {
        "Command": "OF",
        "Usage": [
            {
                "Example": "OFm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "OF n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_OFm"
            ],
            "Explanation": "Operand holds the value last set by the command"
        },
        "Description": "The OF command sets a bias voltage in the command output or returns a previously set value.",
        "Arguments": [
            {
                "Argument": "m",
                "Description": "Axis to assign value"
            },
            {
                "Argument": "n",
                "Description": "Offset voltage applied to MCMD"
            }
        ]
    },
    {
        "Command": "OP",
        "Usage": [
            {
                "Example": "OP n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_OP0",
                "_OP1",
                "_OP2"
            ],
            "Explanation": "Operand holds the value last set by the command"
        },
        "Description": "The OP command sets the output ports of the controller in a bank using bitmasks. Arguments to the OP command are bit patterns (decimal or hex) to\nset entire banks (bytes) of digital outputs. Use SB, CB or OB to set bits individually.",
        "Arguments": [
            {
                "Argument": "",
                "Description": "Decimal representation: General"
            },
            {
                "Argument": "n0",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "Outputs 1-16"
            },
            {
                "Argument": "",
                "Description": "Decimal representation: Extended"
            },
            {
                "Argument": "n1",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "Output (Bank 2,3)"
            },
            {
                "Argument": "",
                "Description": "Decimal representation: Extended"
            },
            {
                "Argument": "n2",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "Output (Bank 4,5)"
            }
        ]
    },
    {
        "Command": "OT",
        "Usage": [
            {
                "Example": "OTm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "OT n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_OTm"
            ],
            "Explanation": "Operand holds the value last set by the command"
        },
        "Description": "The OT command sets the timeout time for the encoder failure routine. The command sets the time in samples that the encoder failure will wait for motion\nafter the OV threshold has been exceeded. The controller can detect a failure on either or both channels of the encoder.",
        "Arguments": [
            {
                "Argument": "m",
                "Description": "Axis to assign value"
            },
            {
                "Argument": "n",
                "Description": "Number of samples for error detection"
            }
        ]
    },
    {
        "Command": "OV",
        "Usage": [
            {
                "Example": "OVm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "OV n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_OVm"
            ],
            "Explanation": "Operand holds the value last set by the command"
        },
        "Description": "The OV command sets the threshold voltage for detecting an encoder failure. The controller can detect a failure on either or both channels of the\nencoder.",
        "Arguments": [
            {
                "Argument": "m",
                "Description": "Axis to assign value"
            },
            {
                "Argument": "n",
                "Description": "Torque voltage to trigger encoder error detection"
            }
        ]
    },
    {
        "Command": "P2CD",
        "Usage": [
            {
                "Example": "variable= P2CD",
                "Explanation": "Holds a value"
            }
        ],
        "Operands": {
            "Operands": [
                "P2CD"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "P2CD returns the status of the auxiliary serial port (port 2). The value of P2CD returns zero after the corresponding string or number is read.",
        "Arguments": []
    },
    {
        "Command": "P2CH",
        "Usage": [
            {
                "Example": "variable= P2CH",
                "Explanation": "Holds a value"
            }
        ],
        "Operands": {
            "Operands": [
                "P2CH"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "P2CH returns the last character sent to the auxiliary serial port (port 2)",
        "Arguments": []
    },
    {
        "Command": "P2NM",
        "Usage": [
            {
                "Example": "variable= P2NM",
                "Explanation": "Holds a value"
            }
        ],
        "Operands": {
            "Operands": [
                "P2NM"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "P2NM returns the last number (followed by carriage return) sent to auxiliary serial port (port 2).",
        "Arguments": []
    },
    {
        "Command": "P2ST",
        "Usage": [
            {
                "Example": "variable= P2ST",
                "Explanation": "Holds a value"
            }
        ],
        "Operands": {
            "Operands": [
                "P2ST"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "P2ST returns the last string (followed by carriage return) sent to auxiliary serial port (port 2)",
        "Arguments": []
    },
    {
        "Command": "PA",
        "Usage": [
            {
                "Example": "PAm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "PA n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_PAm"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "The PA command sets the end target of the Position Absolute Mode of Motion.",
        "Arguments": [
            {
                "Argument": "m",
                "Description": "Axis to assign value"
            },
            {
                "Argument": "",
                "Description": "Virtual axis to assign value"
            },
            {
                "Argument": "",
                "Description": "Absolute position target for"
            },
            {
                "Argument": "n",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "independant move"
            }
        ]
    },
    {
        "Command": "PF",
        "Usage": [
            {
                "Example": "PF n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_PF"
            ],
            "Explanation": "Operand holds the value last set by the command"
        },
        "Description": "The PF command allows the user to format the position numbers such as those returned by TP. The number of digits of integers and the number of digits\nof decimal can be selected with this command. An extra digit for sign and a digit for decimal point will be added to the total number of digits.",
        "Arguments": [
            {
                "Argument": "",
                "Description": "Number of places displayed"
            },
            {
                "Argument": "n0",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "preceding the decimal point"
            },
            {
                "Argument": "",
                "Description": "Number of places displayed after the"
            },
            {
                "Argument": "n1",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "decimal point"
            }
        ]
    },
    {
        "Command": "PL",
        "Usage": [
            {
                "Example": "PLm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "PL n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_PLm"
            ],
            "Explanation": "Operand holds the value last set by the command"
        },
        "Description": "The PL command adds a low-pass filter in series with the PID compensation.\nThe crossover frequency is entered directly as an argument to PL. To maintain compatibility with earlier versions, a value less than 1 may also be specified.",
        "Arguments": [
            {
                "Argument": "m",
                "Description": "Axis to assign value"
            },
            {
                "Argument": "",
                "Description": "Crossover frequency created by"
            },
            {
                "Argument": "n",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "the PL command"
            },
            {
                "Argument": "",
                "Description": "Value used to generate pole filter"
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "crossover frequency"
            }
        ]
    },
    {
        "Command": "PR",
        "Usage": [
            {
                "Example": "PRm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "PR n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_PRm"
            ],
            "Explanation": "Operand holds the value last set by the command"
        },
        "Description": "The PR command sets the incremental distance and direction of the next move. The move is referenced with respect to the current position. .",
        "Arguments": [
            {
                "Argument": "m",
                "Description": "Axis to assign value"
            },
            {
                "Argument": "",
                "Description": "Virtual axis to assign value"
            },
            {
                "Argument": "",
                "Description": "Incremental distance for"
            },
            {
                "Argument": "n",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "independent move"
            }
        ]
    },
    {
        "Command": "PT",
        "Usage": [
            {
                "Example": "PTm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "PT n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_PTm"
            ],
            "Explanation": "Operand holds the value last set by the command"
        },
        "Description": "The PT command will place the controller in the position tracking mode. In this mode, the controller will allow the user to issue absolute position commands\nthat begin motion immediately without requiring a BG command. The absolute position may be specified such that the axis will begin motion, continue in\nthe same direction, reverse directions, or decelerate to a stop",
        "Arguments": [
            {
                "Argument": "m",
                "Description": "Axis to assign value"
            },
            {
                "Argument": "",
                "Description": "Setting for position tracking mode of"
            },
            {
                "Argument": "n",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "motion"
            }
        ]
    },
    {
        "Command": "PV",
        "Usage": [
            {
                "Example": "PVm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            }
        ],
        "Operands": {
            "Operands": [
                "_PVm"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "The PV command is used to enter PVT data into the PVT buffer. Data is entered by specifying the target delta position, target velocity, and delta time for\nthe segment duration.",
        "Arguments": [
            {
                "Argument": "m A",
                "Description": "Axis to assign value"
            },
            {
                "Argument": "-",
                "Description": "Position target for PVT"
            },
            {
                "Argument": "n0",
                "Description": ""
            },
            {
                "Argument": "44,000,000",
                "Description": "segment"
            },
            {
                "Argument": "-",
                "Description": "Velocity target for PVT"
            },
            {
                "Argument": "n1",
                "Description": ""
            },
            {
                "Argument": "22,000,000",
                "Description": "segment"
            },
            {
                "Argument": "n2 = -1 clears the PVT buffer, n2 = 0 exits PVTn2 0",
                "Description": "Number of samples for PVT"
            },
            {
                "Argument": "",
                "Description": "segment"
            }
        ]
    },
    {
        "Command": "PW",
        "Usage": [
            {
                "Example": "PW n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {},
        "Description": "The PW command sets the password used to lock the controller. Locking the controller prevents interrogation of the controller program space.",
        "Arguments": [
            {
                "Argument": "",
                "Description": "String to be used for"
            },
            {
                "Argument": "str",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "password"
            }
        ]
    },
    {
        "Command": "QD",
        "Usage": [
            {
                "Example": "QD n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {},
        "Description": "The QD command transfers array data from the host computer to the controller. QD array[], start, end requires that the array name be specified along\nwith the index of the first element of the array and the index of the last element of the array.",
        "Arguments": [
            {
                "Argument": "",
                "Description": "Name of array to receive data"
            },
            {
                "Argument": "str",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "via download."
            },
            {
                "Argument": "n0",
                "Description": "Index of the first array element."
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "n1",
                "Description": "Index of the last array element."
            },
            {
                "Argument": "",
                "Description": ""
            }
        ]
    },
    {
        "Command": "QH",
        "Usage": [
            {
                "Example": "QH mm",
                "Explanation": "Argument is an axis mask"
            }
        ],
        "Operands": {
            "Operands": [
                "_QHm"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "The QH command transmits the state of the Hall sensor inputs. The value is decimal and represented by a 3 bit value (see Remarks).",
        "Arguments": [
            {
                "Argument": "mm",
                "Description": "Axes to return Hall status"
            }
        ]
    },
    {
        "Command": "QP",
        "Usage": [
            {
                "Example": "QP",
                "Explanation": "Command takes no arguments"
            }
        ],
        "Operands": {},
        "Description": "Returns memory information for the controller.",
        "Arguments": []
    },
    {
        "Command": "QR",
        "Usage": [
            {
                "Example": "QR mm",
                "Explanation": "Argument is an axis mask"
            }
        ],
        "Operands": {},
        "Description": "The QR command causes the controller to return a record of information regarding controller status.\nThis status information includes 4 bytes of header information and specific blocks of information as specified by the command arguments. The details of\nthe status information is described in Chapter 4 of the user's manual.",
        "Arguments": [
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "mm",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "Argument",
                "Description": ""
            },
            {
                "Argument": "mm",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": ""
            }
        ]
    },
    {
        "Command": "QS",
        "Usage": [
            {
                "Example": "QS mm",
                "Explanation": "Argument is an axis mask"
            }
        ],
        "Operands": {
            "Operands": [
                "_QSm"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "The QS command reports the magnitude of error, in drive step counts, for axes in Stepper Position Maintenance mode. A step count is directly\nproportional to the micro-stepping resolution of the stepper drive.",
        "Arguments": [
            {
                "Argument": "",
                "Description": "Axes to query for step motor error"
            },
            {
                "Argument": "mm",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "magnitude"
            },
            {
                "Argument": "m",
                "Description": "Single Axis to query for error magnitude"
            }
        ]
    },
    {
        "Command": "QU",
        "Usage": [
            {
                "Example": "QU n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {},
        "Description": "The QU command transfers array data from the controller to a host computer. The QU requires that the array name be specified along with the first\nelement of the array and last element of the array.",
        "Arguments": []
    },
    {
        "Command": "QZ",
        "Usage": [
            {
                "Example": "QZ",
                "Explanation": "Command takes no arguments"
            }
        ],
        "Operands": {},
        "Description": "The QZ command is an interrogation command that returns information regarding the data record. The controller's response to this command will be the\nreturn of 4 integers separated by commas.",
        "Arguments": []
    },
    {
        "Command": "RA",
        "Usage": [
            {
                "Example": "RA n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {},
        "Description": "The RA command selects the user arrays to be populated by the Record Array function. The data to be captured is specified by the RD command and\ntime interval by the RC command.",
        "Arguments": [
            {
                "Argument": "",
                "Description": "Valid array name to use in"
            },
            {
                "Argument": "str",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "record array function"
            }
        ]
    },
    {
        "Command": "RC",
        "Usage": [
            {
                "Example": "RC n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_RC"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "The RC command begins recording for the Automatic Record Array Mode. RC 0 stops recording. The record array mode loads source data specified by\nthe RD command into the arrays defined by the RA command. The address for the array element for the next recording can be interrogated with _RD.",
        "Arguments": [
            {
                "Argument": "",
                "Description": "Specify the record array time interval"
            },
            {
                "Argument": "n0 0",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "as 2^n samples."
            },
            {
                "Argument": "n1 has special rules for the maximumn1 see Notes",
                "Description": "Specify the number of records to"
            },
            {
                "Argument": "",
                "Description": "perform"
            }
        ]
    },
    {
        "Command": "RD",
        "Usage": [
            {
                "Example": "variable= RD",
                "Explanation": "Holds a value"
            }
        ],
        "Operands": {
            "Operands": [
                "_RD"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "The RD command specifies the data type to be captured for the Record Array (RA) mode. The data defined in this command is stored in arrays defined\nby the RA command at the time interval specified with the RC command.",
        "Arguments": [
            {
                "Argument": "",
                "Description": "Time in"
            },
            {
                "Argument": "arg",
                "Description": "servo"
            },
            {
                "Argument": "",
                "Description": "samples"
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "Analog input"
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "digital value"
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "Auxiliary"
            },
            {
                "Argument": "",
                "Description": "encoder"
            },
            {
                "Argument": "",
                "Description": "position"
            },
            {
                "Argument": "",
                "Description": "Encoder"
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "position"
            },
            {
                "Argument": "",
                "Description": "Position"
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "error"
            },
            {
                "Argument": "",
                "Description": "Commanded"
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "position"
            },
            {
                "Argument": "",
                "Description": "Commanded"
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "position"
            },
            {
                "Argument": "",
                "Description": "Latched"
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "position"
            },
            {
                "Argument": "",
                "Description": "Input status"
            },
            {
                "Argument": "",
                "Description": "Output"
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "status"
            },
            {
                "Argument": "",
                "Description": "Switches"
            },
            {
                "Argument": "",
                "Description": "Stop code"
            },
            {
                "Argument": "",
                "Description": "Torque"
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "command"
            },
            {
                "Argument": "",
                "Description": "Filtered"
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "velocity"
            },
            {
                "Argument": "",
                "Description": "Auxiliary"
            },
            {
                "Argument": "",
                "Description": "encoder"
            },
            {
                "Argument": "",
                "Description": "position"
            }
        ]
    },
    {
        "Command": "RE",
        "Usage": [
            {
                "Example": "RE n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {},
        "Description": "The RE command is used to end subroutines in application code. An RE at the end of these routines causes a return to the main program. Specific\nautomatic error subroutines require the use of the RE command to end the code correctly.",
        "Arguments": [
            {
                "Argument": "",
                "Description": "Determines state of interrupted trippoint"
            },
            {
                "Argument": "n",
                "Description": "when returning from an automatic"
            },
            {
                "Argument": "",
                "Description": "subroutine."
            }
        ]
    },
    {
        "Command": "REM",
        "Usage": [],
        "Operands": {},
        "Description": "REM is used for comment lines. The REM statement is NOT a controller command. Rather, it is recognized by Galil PC software, which strips away the REM\nlines before downloading the DMC file to the controller.",
        "Arguments": []
    },
    {
        "Command": "RI",
        "Usage": [
            {
                "Example": "RI n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {},
        "Description": "The RI command is used to end the input interrupt subroutine.\nThe input interrupt subroutine begins with the label #ININT. An RI at the end of this routine causes a return to the main program.",
        "Arguments": [
            {
                "Argument": "",
                "Description": "Determines state of interrupted trippoint"
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "n",
                "Description": "when returning from an automatic"
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "subroutine."
            }
        ]
    },
    {
        "Command": "RL",
        "Usage": [
            {
                "Example": "RL mm",
                "Explanation": "Argument is an axis mask"
            }
        ],
        "Operands": {
            "Operands": [
                "_RLm"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "The RL command will return the last position captured by the latch. The latch must first be armed by the AL command and then the appropriate input\nmust be activated. Each axis uses a specific general input for the latch input; see the AL command for information on latch inputs.",
        "Arguments": [
            {
                "Argument": "mm",
                "Description": "Axes to query for latched position"
            }
        ]
    },
    {
        "Command": "RP",
        "Usage": [
            {
                "Example": "RP mm",
                "Explanation": "Argument is an axis mask"
            }
        ],
        "Operands": {
            "Operands": [
                "_RPm"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "The RP command returns the commanded reference position of the motor(s). RP command is useful when operating step motors since it provides the\ncommanded position in steps when operating in stepper mode.",
        "Arguments": [
            {
                "Argument": "mm",
                "Description": "Axes to report commanded position"
            },
            {
                "Argument": "",
                "Description": "Virtual axes to report commanded position"
            }
        ]
    },
    {
        "Command": "RS",
        "Usage": [
            {
                "Example": "RS n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_RS"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "The RS command resets the state of the processor to its power-on condition. The previously saved state of the hardware, along with parameter values\nand saved program, are restored.",
        "Arguments": [
            {
                "Argument": "",
                "Description": "Set behavior of RS"
            },
            {
                "Argument": "n",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "command"
            }
        ]
    },
    {
        "Command": "SA",
        "Usage": [
            {
                "Example": "SAm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            }
        ],
        "Operands": {},
        "Description": "SA sends a command, and optionally receives a response, from one controller to another via Ethernet.",
        "Arguments": [
            {
                "Argument": "m",
                "Description": "Handle to specify for message output"
            },
            {
                "Argument": "str",
                "Description": "String to send over handle"
            },
            {
                "Argument": "n",
                "Description": "Value to send for the specified parameter"
            }
        ]
    },
    {
        "Command": "SB",
        "Usage": [
            {
                "Example": "SB n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {},
        "Description": "The SB command sets a particular digital output. The SB and CB (Clear Bit) instructions can be used to control the state of output lines.",
        "Arguments": [
            {
                "Argument": "n",
                "Description": "General output bit to be set"
            },
            {
                "Argument": "",
                "Description": "Extended I/O output bit to be"
            },
            {
                "Argument": "n",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "set"
            },
            {
                "Argument": "n",
                "Description": "Set Modbus slave bit"
            }
        ]
    },
    {
        "Command": "SC",
        "Usage": [
            {
                "Example": "SC mm",
                "Explanation": "Argument is an axis mask"
            }
        ],
        "Operands": {
            "Operands": [
                "_SCm"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "The Stop Code command returns a number indicating why a motor has stopped.",
        "Arguments": [
            {
                "Argument": "mm",
                "Description": "Axis to query stop code"
            }
        ]
    },
    {
        "Command": "SD",
        "Usage": [
            {
                "Example": "SDm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "SD n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_SDm"
            ],
            "Explanation": "Operand holds the value last set by the command"
        },
        "Description": "The Limit Switch Deceleration command (SD) sets the linear deceleration rate of the motors when a limit switch has been reached.",
        "Arguments": [
            {
                "Argument": "m",
                "Description": "Axis to assign value"
            },
            {
                "Argument": "n",
                "Description": "Value of switch deceleration"
            }
        ]
    },
    {
        "Command": "SH",
        "Usage": [
            {
                "Example": "SH mm",
                "Explanation": "Argument is an axis mask"
            }
        ],
        "Operands": {},
        "Description": "The SH commands tells the controller to use the current motor position as the command position and to enable servo control at the current position.",
        "Arguments": [
            {
                "Argument": "mm",
                "Description": "Axes to enable"
            }
        ]
    },
    {
        "Command": "SI",
        "Usage": [
            {
                "Example": "SIm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            }
        ],
        "Operands": {
            "Operands": [
                "_SIm"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "The SI command enables and configures the controller to read SSI encoder data. Synchronous Serial Interface (SSI) allows for serial transmission of\nabsolute position data (either binary or Gray code) from the encoder based on a timed clock pulse train from the controller. Connection between the\ncontroller and encoder is based on two signal lines, clock and data, which are usually differential for increased noise immunity. For each sequential clock\npulse of the controller, the encoder transmits one data bit from shift registers on the encoder.\nSSI Timing\nDuring the controller's control loop, a clock will be transmitted for encoders configured for SSI. \nThe SSI encoder responds by transmitting a serial data\nstream synchronized to the controller's clock. \nThe data stream has 2 important features as described below.\n1\n. \nData.\n \nShown in the above timing diagrams, \nData\n contains the absolute position of the SSI encoder. \nData\n is used for the n\n2\n argument of the SI\ncommand\n2\n. \nStatus\n \n(if applicable)\n. \nShown above in the latter two timing diagrams, \nStatus\n is used for the n\n3\n argument of the SI command. \nThe meaning of the\nStatus\n and the is defined by the encoder manufacturer. \nThe controller provides access to this value via the _SIm operand.\nThe sign of argument n\n3\n selects if the \nStatus\n are at the beginning of the SSI data or at the end. \nThis is shown in the above timing diagrams and\nis based on the encoder's manufacturer.",
        "Arguments": [
            {
                "Argument": "m",
                "Description": "Axis to configure for SSI"
            },
            {
                "Argument": "n0",
                "Description": "Position register to use"
            },
            {
                "Argument": "",
                "Description": "Total number of SSI bits"
            },
            {
                "Argument": "n1",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "(including status bits)"
            },
            {
                "Argument": "n2",
                "Description": "Number of single turn bits"
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "n3",
                "Description": "Number of status bits"
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "Clock divider, defines"
            },
            {
                "Argument": "o",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "Clock frequency"
            },
            {
                "Argument": "p",
                "Description": "Data Encoding"
            }
        ]
    },
    {
        "Command": "option.",
        "Usage": [],
        "Operands": {
            "Operands": [
                "_SIm returns",
                "the value of the SSI encoder's status bits, as defined in n",
                "3",
                ". The returned decimal number represents an 8 bit",
                "binary value. The meaning",
                "of the status bits is defined by the encoder manufacturer.",
                "Examples",
                "'Galil DMC Code Example",
                "SI",
                "A",
                "A",
                "=",
                "=",
                "",
                "1",
                ",",
                "25",
                ",",
                "25",
                ",",
                "0",
                "<",
                "4",
                ">",
                "1",
                ";",
                "' Encoder on axis A replaces main encoder (TP), 25 bits total, all single turn, no status",
                "'Galil DMC Code Example",
                "SI",
                "A",
                "A",
                "=",
                "=",
                "",
                "0",
                ";",
                "'           Disable SSI on axis A",
                "SI applies to SER",
                "\u00a92017 Galil Motion Control. Corrections, Feedback:",
                "documentation@galilmc.com",
                "Galil Motion Control",
                "SI"
            ],
            "Explanation": "273/328"
        },
        "Description": "",
        "Arguments": []
    },
    {
        "Command": "SL",
        "Usage": [
            {
                "Example": "SL n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {},
        "Description": "The SL command is used to single-step through a program for debugging purposes. SL can be used after execution has paused at a breakpoint (BK). The\nargument n allows user to specify the number of lines to execute before pausing again.",
        "Arguments": [
            {
                "Argument": "n",
                "Description": "Number of lines to execute before pausing"
            }
        ]
    },
    {
        "Command": "SM",
        "Usage": [
            {
                "Example": "SM n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_SM0"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "The SM command assigns a subnet mask to the controller. All packets sent to the controller whose source IP address is not on the subnet will be ignored\nby the controller. For example, for SM 255,255,0,0 and IA 10,0,51,1, only packets from IP addresses of the form 10.0.xxx.xxx will be accepted.",
        "Arguments": [
            {
                "Argument": "n0",
                "Description": "Byte 3 of the Subnet mask"
            },
            {
                "Argument": "n1",
                "Description": "Byte 2 of the Subnet mask"
            },
            {
                "Argument": "n2",
                "Description": "Byte 1 of the Subnet mask"
            },
            {
                "Argument": "n3",
                "Description": "Byte 0 of the Subnet mask"
            },
            {
                "Argument": "",
                "Description": "The full subnet mask specified as a signed 32 bit two's"
            },
            {
                "Argument": "n",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "complement integer"
            }
        ]
    },
    {
        "Command": "SP",
        "Usage": [
            {
                "Example": "SPm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "SP n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_SPm"
            ],
            "Explanation": "Operand holds the value last set by the command"
        },
        "Description": "The SP command sets the slew speed of any or all axes for independent moves.",
        "Arguments": [
            {
                "Argument": "m",
                "Description": "Axis to assign value"
            },
            {
                "Argument": "",
                "Description": "Virtual axis to assign"
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "value"
            },
            {
                "Argument": "",
                "Description": "Value of jog speed in"
            },
            {
                "Argument": "n",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "cnts/second"
            },
            {
                "Argument": "",
                "Description": "Value of jog speed in"
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "cnts/second"
            },
            {
                "Argument": "",
                "Description": "Vale of jog speed in"
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "cnts/second"
            }
        ]
    },
    {
        "Command": "SS",
        "Usage": [
            {
                "Example": "SSm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            }
        ],
        "Operands": {
            "Operands": [
                "_SSm"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "The SS command enables and configures the controller to read BiSS encoder data. BiSS is an open-source, digital interface for encoders. BiSS is hardware\ncompatible to the industrial standard SSI (Serial Synchronous Interface) but offers additional features and options.\nBiSS Timing\nDuring the controller's servo interrupt, a clock will be transmitted for encoders configured for BiSS. The BiSS encoder responds by transmitting a serial\ndata stream synchronized to the controllers's clock. The data stream has five important features as described below.\n1\n. \nData\n. Shown in the above timing diagram as the bit stream between \na\n and \nb\n, \nData\n contains the absolute position of the BiSS encoder. The length of\nthe \nData\n, in bits, is used for both the n\n1\n and n\n2\n arguments of the SS command.\n2\n. \nZero Padding\n. Some encoder manufacturers (Hengstler and possibly others) pad the encoder data with trailing zero bits in the \nData\n stream. This bit\nsegment is shown between \nc\n and \nd\n above. The number of zero padding bits is the n\n3\n argument of the SS command.\n3\n. \nError Bit\n. Shown above as \nE\n, BiSS defines an Error bit that is transmitted by the encoder. It can be active high or low, depending on the\nmanufacturer. The controller provides access to the Error bit via the _SSm operand.\n4\n. \nWarning Bit\n. Shown above as \nW\n, BiSS also defines a Warning bit that is transmitted by the encoder. It is also active high or low based on the\nencoder. \nThe controller provides access to the Warning bit via the _SSm operand.\n5\n. \nCRC\n. The \nData\n, \nE\n and \nW\n bits are all checked for validity via a 6-bit cyclic redundancy check, shown above as \nCRC\n. The controller provides access to\nthe CRC validity via the _SSm operand.",
        "Arguments": [
            {
                "Argument": "m",
                "Description": "Axis to configure for BiSS"
            },
            {
                "Argument": "n0",
                "Description": "Position register to use"
            },
            {
                "Argument": "n1",
                "Description": "Number of Data bits"
            },
            {
                "Argument": "n2",
                "Description": "Number of Data bits"
            },
            {
                "Argument": "n3",
                "Description": "Number of zero padding bits"
            },
            {
                "Argument": "",
                "Description": "Clock divider, defines Clock"
            },
            {
                "Argument": "o",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "frequency"
            }
        ]
    },
    {
        "Command": "Required Hardware and Firmware",
        "Usage": [
            {
                "Example": "_SSm Returns 4 bits of axis status data where m is the axis.",
                "Explanation": "_SSm Bit Map"
            },
            {
                "Example": "Bit Position",
                "Explanation": "Bit Meaning"
            },
            {
                "Example": "Bit value = 0",
                "Explanation": "Bit value = 1"
            }
        ],
        "Operands": {},
        "Description": "",
        "Arguments": []
    },
    {
        "Command": "#logwarn",
        "Usage": [],
        "Operands": {},
        "Description": "",
        "Arguments": []
    },
    {
        "Command": "ST",
        "Usage": [
            {
                "Example": "ST mm",
                "Explanation": "Argument is an axis mask"
            }
        ],
        "Operands": {},
        "Description": "The ST command stops motion on the specified axis. Motors will come to a decelerated stop.",
        "Arguments": [
            {
                "Argument": "mm",
                "Description": "Axes to command to stop motion"
            }
        ]
    },
    {
        "Command": "SY",
        "Usage": [
            {
                "Example": "SYm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "SY n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_SYm"
            ],
            "Explanation": "Operand holds the value last set by the command"
        },
        "Description": "This command is used to designate the active level of the Error and Warning bits when using the Galil BiSS upgrade. The BiSS protocol defines two bits\nwhich can be used by the encoder to signal various events.",
        "Arguments": [
            {
                "Argument": "m",
                "Description": "Axis to assign value"
            }
        ]
    },
    {
        "Command": ";",
        "Usage": [],
        "Operands": {},
        "Description": "",
        "Arguments": []
    },
    {
        "Command": "TA",
        "Usage": [
            {
                "Example": "TA n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_TA0",
                "_TA1",
                "_TA2",
                "_TA3"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "The command returns the amplifier error status. The value is decimal and represents an 8 bit value. Bit 7 is most significant bit, 0 is least.",
        "Arguments": [
            {
                "Argument": "n",
                "Description": "Selects amp status byte to return"
            }
        ]
    },
    {
        "Command": "TB",
        "Usage": [
            {
                "Example": "TB",
                "Explanation": "Command takes no arguments"
            }
        ],
        "Operands": {
            "Operands": [
                "_TB"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "The TB command returns status information from the controller as a decimal number. Each bit of the status byte denotes an active condition when the\nbit is set (high):",
        "Arguments": []
    },
    {
        "Command": "TC",
        "Usage": [
            {
                "Example": "TC n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_TC"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "The TC command reports programming or command errors detected by the controller. The TC command returns a number between 1 and 255. This\nnumber is a code that reflects why a command was not accepted by the controller. This command is useful when the controller halts execution of a\nprogram or when the response to a command is a question mark.",
        "Arguments": [
            {
                "Argument": "n",
                "Description": "Return the numerical code only"
            },
            {
                "Argument": "",
                "Description": "Return the numerical code and human-readable message"
            }
        ]
    },
    {
        "Command": "Download error - line too long or too many lines",
        "Usage": [],
        "Operands": {},
        "Description": "",
        "Arguments": []
    },
    {
        "Command": "Invalid EtherCAT configuration",
        "Usage": [],
        "Operands": {},
        "Description": "",
        "Arguments": []
    },
    {
        "Command": "TD",
        "Usage": [
            {
                "Example": "TD mm",
                "Explanation": "Argument is an axis mask"
            }
        ],
        "Operands": {
            "Operands": [
                "_TDm"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "The TD command returns the current position of the dual (auxiliary) encoder input. When operating with stepper motors, the TD command returns the\nnumber of counts that have been output by the controller.",
        "Arguments": [
            {
                "Argument": "mm",
                "Description": "Axes to report dual (auxiliary) encoder position."
            }
        ]
    },
    {
        "Command": "TE",
        "Usage": [
            {
                "Example": "TE mm",
                "Explanation": "Argument is an axis mask"
            }
        ],
        "Operands": {
            "Operands": [
                "_TEm"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "The TE command returns the current error in the control loop.\nThe command returns the position error of the motor(s), which is the difference between commanded (RP) and actual (TP) position.",
        "Arguments": [
            {
                "Argument": "mm",
                "Description": "Axes to report position error"
            }
        ]
    },
    {
        "Command": "TH",
        "Usage": [
            {
                "Example": "TH",
                "Explanation": "Command takes no arguments"
            }
        ],
        "Operands": {},
        "Description": "The TH command returns a list of data pertaining to the Galil's Ethernet connection. This list begins with the IP address and Ethernet address (physical\naddress), followed by the status of each handle indicating connection type and IP address.",
        "Arguments": []
    },
    {
        "Command": "TI",
        "Usage": [
            {
                "Example": "TI n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_TI0",
                "_TI1",
                "_TI2",
                "_TI3",
                "_TI4",
                "_TI5",
                "_TI10",
                "_TI11"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "The TI command returns the state of the inputs in banks of 8 bits, or 1 byte. The value returned by this command is decimal and represents an 8 bit\nvalue (decimal value ranges from 0 to 255). Each bit represents one input where the LSB is the lowest input number and the MSB is the highest input bit.",
        "Arguments": [
            {
                "Argument": "n",
                "Description": "Report status of Inputs 1-8"
            },
            {
                "Argument": "",
                "Description": "Report status of Inputs 9-16"
            },
            {
                "Argument": "",
                "Description": "Report status of Inputs 17-24"
            },
            {
                "Argument": "",
                "Description": "Report status of Inputs 25-32"
            },
            {
                "Argument": "",
                "Description": "Report status of Inputs 31-40"
            },
            {
                "Argument": "",
                "Description": "Report status of Inputs 41-48"
            },
            {
                "Argument": "",
                "Description": "Report status of Inputs 81-88"
            },
            {
                "Argument": "",
                "Description": "Report status of Inputs 89-96"
            }
        ]
    },
    {
        "Command": "TIME",
        "Usage": [
            {
                "Example": "variable= TIME",
                "Explanation": "Holds a value"
            }
        ],
        "Operands": {
            "Operands": [
                "TIME"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "The TIME operand returns the value of the internal free running, real time clock.\nThe returned value represents the number of servo loop updates and is based on the TM command. The default value for the TM command is 1000. With\nthis update rate, the operand TIME will increase by 1 count every update of approximately 1000usec. The clock is reset to 0 with a standard reset or a\nmaster reset.",
        "Arguments": []
    },
    {
        "Command": "TK",
        "Usage": [
            {
                "Example": "TKm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "TK n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_TKm"
            ],
            "Explanation": "Operand holds the value last set by the command"
        },
        "Description": "The TK command sets the peak torque limit on the motor command output. This command works with the TL command which sets the continuous\ntorque limit. When the average torque is below TL, the motor command signal can go up to the TK (Peak Torque) limit for a short amount of time.",
        "Arguments": [
            {
                "Argument": "m",
                "Description": "Axis to assign value"
            },
            {
                "Argument": "n",
                "Description": "Value of peak torque limit"
            }
        ]
    },
    {
        "Command": "TL",
        "Usage": [
            {
                "Example": "TLm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "TL n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_TLm"
            ],
            "Explanation": "Operand holds the value last set by the command"
        },
        "Description": "The TL command sets the limit on the motor command output. This limit is designed to prevent over current to motors with lower current rating than the\ndrive.\nTL works along with the TK (Peak torque) command to control output current to the motor.",
        "Arguments": [
            {
                "Argument": "m",
                "Description": "Axis to assign value"
            },
            {
                "Argument": "n",
                "Description": "Value of torque limit"
            }
        ]
    },
    {
        "Command": "TM",
        "Usage": [
            {
                "Example": "TM n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_TM"
            ],
            "Explanation": "Operand holds the value last set by the command"
        },
        "Description": "The TM command sets the sampling period of the control loop. The units of this command are microseconds. A negative number turns off the servo loop.",
        "Arguments": [
            {
                "Argument": "",
                "Description": "Set the sample time"
            },
            {
                "Argument": "n",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "in usecs"
            }
        ]
    },
    {
        "Command": "TN",
        "Usage": [
            {
                "Example": "TN n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_TNm"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "The TN command describes the tangent axis to the coordinated motion path. n\n0\n is the scale factor in counts/degree of the tangent axis. n\n1\n is the\nabsolute position of the tangent axis where the tangent axis is aligned with zero degrees in the coordinated motion plane. The tangent function is useful\nfor cutting applications where a cutting tool must remain tangent to the part.",
        "Arguments": [
            {
                "Argument": "n0",
                "Description": "Scale factor in counts/degree of the tangent axis"
            },
            {
                "Argument": "n1",
                "Description": "Absolute position of tangent axis where the tangent angle is 0"
            }
        ]
    },
    {
        "Command": "TP",
        "Usage": [
            {
                "Example": "TP mm",
                "Explanation": "Argument is an axis mask"
            }
        ],
        "Operands": {
            "Operands": [
                "_TPm"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "The TP command returns the current position of the motor.",
        "Arguments": [
            {
                "Argument": "mm",
                "Description": "Axes to report motor position"
            }
        ]
    },
    {
        "Command": "TR",
        "Usage": [
            {
                "Example": "TR n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {},
        "Description": "The TR command causes each instruction in a program to be sent out the communications port prior to execution. The trace command is useful in\ndebugging programs.",
        "Arguments": [
            {
                "Argument": "n0 = 0 or null disables Trace. n0 = 1 enablesn0 0",
                "Description": "Set status of trace function"
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "Set threads to trace by"
            },
            {
                "Argument": "n1 0",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "bitmask"
            }
        ]
    },
    {
        "Command": "TS",
        "Usage": [
            {
                "Example": "TS mm",
                "Explanation": "Argument is an axis mask"
            }
        ],
        "Operands": {
            "Operands": [
                "_TSm"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "The TS command returns information including axis-specific IO status, error conditions, motor condition and state. The value returned by this command is\ndecimal and represents an 8 bit value (decimal value ranges from 0 to 255).",
        "Arguments": [
            {
                "Argument": "mm",
                "Description": "Axes to report axis switches"
            }
        ]
    },
    {
        "Command": "TT",
        "Usage": [
            {
                "Example": "TT mm",
                "Explanation": "Argument is an axis mask"
            }
        ],
        "Operands": {
            "Operands": [
                "_TTm"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "The TT command reports the value of the analog output signal, which is a number between -9.998 and 9.998 volts.",
        "Arguments": [
            {
                "Argument": "mm",
                "Description": "Axes to report output torque command"
            }
        ]
    },
    {
        "Command": "TV",
        "Usage": [
            {
                "Example": "TV mm",
                "Explanation": "Argument is an axis mask"
            }
        ],
        "Operands": {
            "Operands": [
                "_TVm"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "The TV command returns the actual velocity of the axes in units of encoder count/s. The value returned includes the sign bit for direction.",
        "Arguments": [
            {
                "Argument": "mm",
                "Description": "Axes to report velocity"
            }
        ]
    },
    {
        "Command": "TW",
        "Usage": [
            {
                "Example": "TWm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "TW n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_TWm"
            ],
            "Explanation": "Operand holds the value last set by the command"
        },
        "Description": "The TW command sets the timeout time for the MC trippoint. The TW command sets the timeout in msec to declare an error if the MC command is active\nand the motor is not at or beyond the actual position within n msec after the completion of the motion profile. If a timeout occurs, then the MC trippoint\nwill clear and the stopcode will be set to 99. A running program will jump to the special label #MCTIME, if located in the application code.",
        "Arguments": [
            {
                "Argument": "m",
                "Description": "Axis to assign value"
            },
            {
                "Argument": "n",
                "Description": "Set the timeout in msec for the MC command"
            }
        ]
    },
    {
        "Command": "TZ",
        "Usage": [
            {
                "Example": "TZ",
                "Explanation": "Command takes no arguments"
            }
        ],
        "Operands": {},
        "Description": "The TZ command is used to request the I/O status of the controller. This is returned to the user as a human-readable text string.",
        "Arguments": []
    },
    {
        "Command": "UI",
        "Usage": [
            {
                "Example": "UI n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {},
        "Description": "The UI command allows user-defined interrupts to be created. UI can generate 16 different status bytes, $F0 to $FF (240-255), corresponding to UI0 to\nUI15.\nUI pushes a user-defined status byte into the EI queue. When the UI command (e.g. UI5) is executed, the status byte value (e.g. $F5 or 245) is queued\nup for transmission to the host, along with any other interrupts.",
        "Arguments": [
            {
                "Argument": "n 0",
                "Description": ""
            },
            {
                "Argument": "Status Byte (dec)",
                "Description": "Condition"
            },
            {
                "Argument": "$F0 (240)",
                "Description": "UI8 was executed"
            },
            {
                "Argument": "$F1 (241)",
                "Description": "UI9 was executed"
            },
            {
                "Argument": "$F2 (242)",
                "Description": "UI10 was executed"
            },
            {
                "Argument": "$F3 (243)",
                "Description": "UI11 was executed"
            },
            {
                "Argument": "$F4 (244)",
                "Description": "UI12 was executed"
            },
            {
                "Argument": "$F5 (245)",
                "Description": "UI13 was executed"
            },
            {
                "Argument": "$F6 (246)",
                "Description": "UI14 was executed"
            },
            {
                "Argument": "$F7 (247)",
                "Description": "UI15 was executed"
            }
        ]
    },
    {
        "Command": "UL",
        "Usage": [
            {
                "Example": "UL",
                "Explanation": "Command takes no arguments"
            }
        ],
        "Operands": {
            "Operands": [
                "_UL"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "The UL command transfers data from the controller to a host computer. Programs are sent without line numbers. The Uploaded program will be followed\nby a <control>Z or a '\\' as an end of text marker.",
        "Arguments": []
    },
    {
        "Command": "VA",
        "Usage": [
            {
                "Example": "VAm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "VA n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_VAm"
            ],
            "Explanation": "Operand holds the value last set by the command"
        },
        "Description": "The VA command sets the acceleration rate of the vector in a coordinated motion sequence.",
        "Arguments": [
            {
                "Argument": "m",
                "Description": "Coordinate plane to be specified"
            },
            {
                "Argument": "n",
                "Description": "Vector acceleration for the coordinate system"
            }
        ]
    },
    {
        "Command": "VD",
        "Usage": [
            {
                "Example": "VDm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "VD n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_VDm"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "The VD command sets the deceleration rate of the vector in a coordinated motion sequence.",
        "Arguments": [
            {
                "Argument": "m",
                "Description": "Coordinate plane to be specified"
            },
            {
                "Argument": "n",
                "Description": "Vector deceleration for the coordinate system"
            }
        ]
    },
    {
        "Command": "VE",
        "Usage": [
            {
                "Example": "VE n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_VEm"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "The VE command indicates to the controller that the end of the vector is coming up. This allows the controller to slow down through multiple segments, if\nrequired. VE is required to exit the vector mode gracefully (stop code, SC, 101).",
        "Arguments": [
            {
                "Argument": "n",
                "Description": "Specify the end of a vector segment"
            },
            {
                "Argument": "",
                "Description": "Returns the length of the vector in counts"
            }
        ]
    },
    {
        "Command": "VF",
        "Usage": [
            {
                "Example": "VF n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_VF"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "The VF command formats the number of digits to be displayed when interrogating the controller. If a number exceeds the format, the number will be\ndisplayed as the maximum possible positive or negative number (i.e. 999.99, -999, $8000 or $7FF).",
        "Arguments": [
            {
                "Argument": "",
                "Description": "Specify the number of digits displayed"
            },
            {
                "Argument": "n0",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "before the decimal point"
            },
            {
                "Argument": "",
                "Description": "Specify the number of digits displayed"
            },
            {
                "Argument": "n1",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "after the decimal point"
            }
        ]
    },
    {
        "Command": "VM",
        "Usage": [
            {
                "Example": "VM mm",
                "Explanation": "Argument is an axis mask"
            }
        ],
        "Operands": {
            "Operands": [
                "_VMm"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "The VM command enables the coordinated motion mode and specifies the plane of motion. This mode may be specified for motion on any set of two\naxes, including a combination of real and virtual axes for single-axis operation. The motion is specified by the instructions VP and CR, which specify linear\nand circular segments.\nUp to 511 segments may be given before the Begin Sequence (BGS or BGT) command. The number of available segments is queriable via the _LMm\noperand.",
        "Arguments": [
            {
                "Argument": "",
                "Description": "First axis specified for"
            },
            {
                "Argument": "m0",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "vector motion"
            },
            {
                "Argument": "",
                "Description": "Second axis specified for"
            },
            {
                "Argument": "m1",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "vector motion"
            },
            {
                "Argument": "",
                "Description": "Virtual axis specified for"
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "vector mode"
            },
            {
                "Argument": "",
                "Description": "Tangent axis specified for"
            },
            {
                "Argument": "m2",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "vector mode."
            },
            {
                "Argument": "",
                "Description": "Virtual axis specified for"
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "vector mode."
            }
        ]
    },
    {
        "Command": "\u00a92017 Galil Motion Control. Corrections, Feedback: ",
        "Usage": [],
        "Operands": {},
        "Description": "",
        "Arguments": []
    },
    {
        "Command": "VP",
        "Usage": [
            {
                "Example": "VP n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_VPm"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "The VP command defines a vector move segment for the VM mode of motion. The VP command defines the target coordinates of a straight line segment\nin a 2 axis motion sequence. The units are in quadrature counts, and are a function of the elliptical scale factor set using the command ES. For three or\nmore axes in linear interpolation mode, use the LI command.",
        "Arguments": [
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "n0",
                "Description": "Specify the target position for the first vector axis"
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "n1",
                "Description": "Specify the target postion for the second vector axis"
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "Specifies the vector speed to be commanded at the"
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "beginning of the linear segment. The controller will start"
            },
            {
                "Argument": "o",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "accelerating or decelerating at the start of the sequence to"
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "this speed."
            },
            {
                "Argument": "",
                "Description": "Specifies the vector speed to be commanded at the"
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "beginning of the linear segment. The controller will start"
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "accelerating or decelerating at the start of the sequence to"
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "this speed."
            },
            {
                "Argument": "",
                "Description": "Specifies the vector speed to be achieved at the end of the"
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "linear segment. The controller will decelerate or accelerate"
            },
            {
                "Argument": "p",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "during the segment and will reach the specified speed at the"
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "end of the segment."
            },
            {
                "Argument": "",
                "Description": "Specifies the vector speed to be achieved at the end of the"
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "linear segment. The controller will decelerate or accelerate"
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "during the segment and will reach the specified speed at the"
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "end of the segment."
            },
            {
                "Argument": "Argument",
                "Description": ""
            },
            {
                "Argument": "o",
                "Description": ""
            }
        ]
    },
    {
        "Command": " ",
        "Usage": [],
        "Operands": {},
        "Description": "",
        "Arguments": []
    },
    {
        "Command": "VR",
        "Usage": [
            {
                "Example": "VR n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_VRm"
            ],
            "Explanation": "Operand holds the value last set by the command"
        },
        "Description": "The VR sets a ratio to be used as a multiplier of the current vector speed. The vector speed can be set by the command VS or the operators < and >\nused with CR, VP and LI commands. VR takes effect immediately and will ratio all the previous vector speed commands.",
        "Arguments": [
            {
                "Argument": "n0",
                "Description": "Vector ratio specified for the S coordinate plane"
            },
            {
                "Argument": "n1",
                "Description": "Vector ratio specified for the T coordinate plane"
            }
        ]
    },
    {
        "Command": "VS",
        "Usage": [
            {
                "Example": "VSm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "VS n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_VSm"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "The VS command specifies the speed of the vector in a coordinated motion sequence in either the LM or VM modes. This speed is in place when individual\nsegment speeds for VP, LI and CR are not specified.",
        "Arguments": [
            {
                "Argument": "m",
                "Description": "Coordinate plane to be specified"
            },
            {
                "Argument": "n",
                "Description": "Vector speed applied to the coordinate system"
            }
        ]
    },
    {
        "Command": "VV",
        "Usage": [
            {
                "Example": "VVm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "VV n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_VVm"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "The VV command sets the speed of the vector variable in a coordinated motion sequence in either the LM or VM modes. The VV command is used to set\nthe \"o\" vector speed argument for segments that exist in the vector buffer for LI, CR and VP commands. By defining a vector segment begin speed as a\nnegative 1 (i.e. \"<-1\"), the controller will utilize the current vector variable speed as the segment is profiled from the buffer.",
        "Arguments": [
            {
                "Argument": "m",
                "Description": "Coordinate plane to assign value"
            },
            {
                "Argument": "n",
                "Description": "Variable vector speed"
            },
            {
                "Argument": "",
                "Description": "Variable vector speed"
            }
        ]
    },
    {
        "Command": "WH",
        "Usage": [
            {
                "Example": "WH",
                "Explanation": "Command takes no arguments"
            }
        ],
        "Operands": {
            "Operands": [
                "_WH"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "The WH command is used to identify the handle from which the command was received. This is useful for determining what interface or handle you are\nconnected to.",
        "Arguments": []
    },
    {
        "Command": "WT",
        "Usage": [
            {
                "Example": "WT n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {},
        "Description": "The WT command is a trippoint used to time events.When this command is executed, the controller will wait for the amout of time specified before\nexecuting the next command.\nThe amount of time in the WT command is specified to be either samples or milliseconds, depending on the second argument of WT",
        "Arguments": [
            {
                "Argument": "",
                "Description": "Specify amount of time to hold"
            },
            {
                "Argument": "n0",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "execution of code"
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "n1",
                "Description": "Specify the type of WT"
            },
            {
                "Argument": "",
                "Description": ""
            }
        ]
    },
    {
        "Command": "XQ",
        "Usage": [
            {
                "Example": "XQ n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_XQ0",
                "_XQ1",
                "_XQ2",
                "_XQ3",
                "_XQ4",
                "_XQ5",
                "_XQ6",
                "_XQ7"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "The XQ command begins execution of a program residing in the program memory of the controller. Execution will start at the label or line number\nspecified.\nUp to 8 programs may be executed simultaneously to perform multitasking.",
        "Arguments": [
            {
                "Argument": "str",
                "Description": "Label to begin code execution"
            },
            {
                "Argument": "n0",
                "Description": "Line number to begin code execution"
            },
            {
                "Argument": "n0",
                "Description": "Line number to begin code execution"
            },
            {
                "Argument": "n1",
                "Description": "Thread number to execute code"
            }
        ]
    },
    {
        "Command": "YA",
        "Usage": [
            {
                "Example": "YAm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "YA n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_YAm"
            ],
            "Explanation": "Operand holds the value last set by the command"
        },
        "Description": "Specifies the microstepping resolution of the step drive for Stepper Position Maintenance (SPM) mode in microsteps per full motor step. Consult your drive\ndocumentation to determine its microstepping setting. See the table below for internal Galil stepper drives.\nWhen using the SDM-44040, YA will also configure the drive hardware for microstepping resolution. The SDM-44140 is \nnot\n configurable with YA.",
        "Arguments": [
            {
                "Argument": "",
                "Description": "Axis to assign"
            },
            {
                "Argument": "m",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "value"
            },
            {
                "Argument": "",
                "Description": "Drive"
            },
            {
                "Argument": "",
                "Description": "resolution in"
            },
            {
                "Argument": "",
                "Description": "step"
            },
            {
                "Argument": "n",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "counts/motor"
            },
            {
                "Argument": "",
                "Description": "step for SPM"
            },
            {
                "Argument": "",
                "Description": "mode"
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "Valid settings"
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "for SDM-"
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "44040 (-"
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "D4040)"
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "Valid setting"
            },
            {
                "Argument": "",
                "Description": "for SDM-"
            },
            {
                "Argument": "",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "44140 (-"
            },
            {
                "Argument": "",
                "Description": "D4140)"
            }
        ]
    },
    {
        "Command": "YB",
        "Usage": [
            {
                "Example": "YBm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "YB n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_YBm"
            ],
            "Explanation": "Operand holds the value last set by the command"
        },
        "Description": "The YB command specifies the resolution of the step motor, in full steps per full revolution, for Stepper Position Maintenance (SPM) mode.",
        "Arguments": [
            {
                "Argument": "m",
                "Description": "Axis to assign value"
            },
            {
                "Argument": "n",
                "Description": "Motor resolution in full steps/revolution"
            }
        ]
    },
    {
        "Command": "YC",
        "Usage": [
            {
                "Example": "YCm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "YC n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_YCm"
            ],
            "Explanation": "Operand holds the value last set by the command"
        },
        "Description": "The YC command specifies the resolution of the encoder, in counts per revolution, for Stepper Position Maintenance (SPM) mode.",
        "Arguments": [
            {
                "Argument": "m",
                "Description": "Axis to assign value"
            },
            {
                "Argument": "n",
                "Description": "Encoder resolution in counts/revolution"
            }
        ]
    },
    {
        "Command": "YR",
        "Usage": [
            {
                "Example": "YRm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "YR n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {},
        "Description": "The YR command allows the user to correct for position error in Stepper Position Maintenance mode. This correction acts like an IP command, moving the\naxis or axes the specified quantity of step counts. YR will typically be used in conjunction with QS.",
        "Arguments": [
            {
                "Argument": "m",
                "Description": "Axis to assign value"
            },
            {
                "Argument": "n",
                "Description": "Number of step pulses to increment position by"
            }
        ]
    },
    {
        "Command": "YS",
        "Usage": [
            {
                "Example": "YSm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "YS n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_YSm"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "The YS command enables and disables the Stepper Position Maintenance Mode function. YS also reacts to excessive position error condition as defined by\nthe QS command.",
        "Arguments": [
            {
                "Argument": "m",
                "Description": "Axis to assign value"
            },
            {
                "Argument": "",
                "Description": "Setting of the SPM"
            },
            {
                "Argument": "n",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "mode"
            }
        ]
    },
    {
        "Command": "ZA",
        "Usage": [
            {
                "Example": "ZAm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "ZA n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_ZAm"
            ],
            "Explanation": "Operand holds the value last set by the command"
        },
        "Description": "ZA sets the user variables in the data record. The user variables (one per axis) are automatically sent as part of the status record from the controller to the\nhost computer. These variables provide a method for specific controller information to be passed to the host automatically.",
        "Arguments": [
            {
                "Argument": "m",
                "Description": "Axis to assign value"
            },
            {
                "Argument": "n",
                "Description": "Value of user variable for data record"
            }
        ]
    },
    {
        "Command": "ZN",
        "Usage": [
            {
                "Example": "ZNm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "ZN n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {},
        "Description": "ZN adds a negative open loop voltage to the controller?s command signal when the position error is negative.",
        "Arguments": [
            {
                "Argument": "m",
                "Description": "Axis to assign value"
            },
            {
                "Argument": "n",
                "Description": "Open loop voltage (Volts)"
            }
        ]
    },
    {
        "Command": "ZP",
        "Usage": [
            {
                "Example": "ZPm= n",
                "Explanation": "Arguments specified with a single axis mask and an assignment (=)"
            },
            {
                "Example": "ZP n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {},
        "Description": "ZP adds a positive open loop voltage to the controller?s command signal when the position error is positive.",
        "Arguments": [
            {
                "Argument": "m",
                "Description": "Axis to assign value"
            },
            {
                "Argument": "n",
                "Description": "Open loop voltage (Volts)"
            }
        ]
    },
    {
        "Command": "ZS",
        "Usage": [
            {
                "Example": "ZS n ...",
                "Explanation": "Arguments specified with an implicit, comma-separated order"
            }
        ],
        "Operands": {
            "Operands": [
                "_ZS0",
                "_ZS1",
                "_ZS2",
                "_ZS3",
                "_ZS4",
                "_ZS5",
                "_ZS6",
                "_ZS7"
            ],
            "Explanation": "Operand has special meaning, see Remarks"
        },
        "Description": "The ZS command is used to clear the stack when finishing or leaving a subroutine. This command is used to avoid returning from an interrupt (either input\nor error). This turns the jump to subroutine into a jump. The status of the stack can be interrogated with the operand _ZS, see Remarks.",
        "Arguments": [
            {
                "Argument": "",
                "Description": "Sets zero stack"
            },
            {
                "Argument": "n",
                "Description": ""
            },
            {
                "Argument": "",
                "Description": "operation"
            }
        ]
    }
]